{
    "en": {
      "elements": {
        "langRegisterForm": "Register Form",
        "langUsername": "Username",
        "langMandatory": "(mandatory)",
        "langPassword": "Password",
        "langMandatory2": "(mandatory)",
        "langRegister": "Register",
        "buttonStart": "start",
        "langSFX": "Sound Effects",
        "titleSettings": "Languages",
        "langLogOut": "Logout",
        "langHome": "Home",
        "swipe": "Swipe",
        "langStats": "Statistics",
        "langAchievements": "Achievements",
        "langGiga": "GigaChad",
        "langTask1": "You need to get 100 exp",
        "langCrazy": "You are crazy",
        "langTask2": "You need to spend 100 diamands",
        "langDesigner": "Mr/Mrs designer",
        "langTask3": "You need to finish 5 CSS lessons",
        "langDoom": "Doom...",
        "langTaxt4": "You need to finish all courses",
        "langHomeProfile": "Home",
        "title": "What you'll discover",
        "langLessons": "Lessons",
        "langStartLesson": "Start lesson >",
        "langIntro": "<  Introduction",
        "langQuizBtn": "Quiz >",
        "title2": "Do you want to start the quiz?",
        "langBackBtn2": "< Back",
        "langStartIdk": "Start >",
        "langAnswers": "Answers:",
        "langConnection": "Check your internet connection..."
      },
      "categories": {
        "html": [
          {
            "title": "HTML Basics",
            "content": "##Welcome to the HTML Basics lesson! In this lesson, we'll cover the essential elements of HTML to get you started on your web development journey.\n\nHTML, which stands for HyperText Markup Language, is the standard language used to create and design web pages.\nIn this lesson, you'll discover:\n\n1. The purpose and usage of the DOCTYPE declaration.\n2. Basic HTML structure and elements.\n3. How to view the HTML source code of a web page.\n",
            "lesson": "##Understanding the DOCTYPE Declaration\n\nThe DOCTYPE declaration is an essential part of an HTML document. It specifies the version of HTML being used and helps web browsers render the page correctly. Here's an example of the DOCTYPE declaration for HTML5:\n\n`<!DOCTYPE html>`\n\nThis declaration should be placed at the beginning of every HTML document to ensure compatibility and proper rendering.\n\n##Basic HTML Structure\n\nAn HTML document consists of several basic elements, including:\n\n1. <html>: This tag marks the beginning and end of your webpage. All other elements are placed inside it. It should always be closed at the end of the document, like this <\\html>.\n\n2. <head>: Within this tag, you include important information about your webpage, like its title, keywords, and references to other files.  It should be closed -<\\head>- before the <body> tag starts.\n\n3. <body>: Inside this tag, you put all the content that users see when they visit your webpage, like text, images, and links. It should be closed at the end of the document - <\\body>.\n\n4. <title>: This tag sets the title of your webpage, which appears at the top of the browser window or tab. It's self-contained within the <head> section.\n\n5. <meta>: These tags provide additional information about your webpage, such as its character encoding and viewport settings. They are self-closing tags and do not require a separate closing tag.\n\n##Viewing HTML Source Code\n\nEver stumbled upon a webpage that made you go, \"Wow, how did they do that?\" Let's unlock the mystery!\nView HTML Source Code:\nClick CTRL + U in an HTML page, or right-click on the page and select \"View Page Source\". This will open a new tab containing the HTML source code of the page.\n\n\n\n",
            "quiz": [
              {
                "question": "What is the purpose of the DOCTYPE declaration in an HTML document?",
                "options": [
                  "A) It specifies the version of JavaScript used.",
                  "B) It helps web browsers render the page correctly.",
                  "C) It defines the layout and design of the webpage.",
                  "D) It determines the character encoding of the webpage."
                ],
                "correctAnswer": 1
              },
              {
                "question": "Which tag marks the beginning and end of an HTML webpage and should always be closed at the end of the document?",
                "options": [
                  "A) <head>",
                  "B) <body>",
                  "C) <title>",
                  "D) <html>"
                ],
                "correctAnswer": 3
              },
              {
                "question": "How can you view the HTML source code of a webpage?",
                "options": [
                  "A) Press CTRL + U",
                  "B) Right-click and select \"View Page Source\"",
                  "C) Both A and B",
                  "D) None of the above"
                ],
                "correctAnswer": 2
              }
            ]
          },
          {
            "title": "HTML Elements and Attributes",
            "content": "##1. The essence of HTML elements and their significance in web design.\n##2. Understanding the syntax of HTML elements and the role of attributes in providing additional information about elements.\n##3. Exploring various attributes and HTML elements in action.\n\n",
            "lesson": "##Elements syntax unveiled:\nHTML utilizes elements as its core components. An HTML element is comprised of three main parts:\n\n\n1. Start tag: It marks the beginning of an element and is enclosed within angle brackets (< and >). For instance, <tagname>.\n2. Element content: This is the actual content encapsulated by the element. It could be text, images, or other elements.\n3. End tag: It denotes the conclusion of an element and is similar to the start tag, except it includes a forward slash before the tag name. For example, </tagname>.\nAdditionally, some elements may be empty, meaning they don't contain any content and thus don't require an end tag. These are known as empty elements.\n\n##Elements in Action:\nLet's explore some examples to better grasp how HTML elements function:\n\n`<!DOCTYPE html>\n<html>\n<body>\n\n<h1>My First Heading</h1>\n<p>This is a <br> paragraph with a line break.</p>\n\n</body>\n</html>`\n\nIn this example, you can see already familiar elements such as <!DOCTYPE html>, <html>, and <body>. You'll also encounter an empty element, <br>, which represents a line break and is an empty element. Empty elements like <br> don't have a closing tag because they don't contain any content.\n \n##Attributes\nHTML attributes provide additional information about elements and are always specified within the start tag of an element. \n1. The href attribute is commonly used with the <a> tag to define hyperlinks. It specifies the URL of the page the link goes to. For example:\n\n`<a href=\"https://www.example.com\">Visit Example</a>`\n\n2. The src attribute is utilized with the <img> tag to embed images in HTML pages. It specifies the path to the image to be displayed. \n\n`<img src=\"image.jpg\">\n<img src=\"https://www.example.com/image.jpg\">`\n\n3. The width and height attributes define the width and height of an image in pixels, ensuring proper display. \n`<img src=\"image.jpg\" width=\"500\" height=\"300\">`\n\n4. The alt attribute provides alternate text for images, which is displayed if the image cannot be loaded. \n`<img src=\"image.jpg\" alt=\"Description of the image\">`\n\n5. The style attribute adds inline styles to elements, allowing customization of appearance. \n`<p style=\"color: blue;\">Styled paragraph</p>`\n\n6. The lang attribute specifies the language of the HTML document, assisting search engines and browsers. \n\n`<html lang=\"en\">`\n\n 7. The title attribute provides additional information about an element, displayed as a tooltip when hovered over.\n\n`<p title=\"Extra information\">Hello</p>`\n\n##Single or Double Quotes?\nDouble quotes around attribute values are the most common in HTML, but single quotes can also be used.\nIn some situations, when the attribute value itself contains double quotes, it is necessary to use single quotes:\n`<p title='John \"ShotGun\" Nelson'>Hello</p>`\n\n\n",
            "quiz": [
              {
                "question": "What are the three main parts of an HTML element?",
                "options": [
                  "  A) Start tag, Element attributes, End tag.",
                  "B) Start tag, Element content, End tag.",
                  "C) Opening tag, Element content, Closing tag.",
                  "D) Tag name, Element content, Attribute name."
                ],
                "correctAnswer": 1
              },
              {
                "question": "Which attribute is commonly used with the <a> tag to define hyperlinks?",
                "options": [
                  "   A) alt",
                  " B) src",
                  " C) href",
                  " D) style"
                ],
                "correctAnswer": 2
              },
              {
                "question": "When should single quotes be used for attribute values in HTML?",
                "options": [
                  "A) Single quotes are always preferred.",
                  "B) Single quotes are used when the attribute value contains double quotes.",
                  "C) Single quotes are used for all attribute values.",
                  "D) Single quotes are never used in HTML."
                ],
                "correctAnswer": 1
              }
            ]
          },
          {
            "title": "Your First HTML Paragraph",
            "content": "##By now, you've gained a solid understanding of HTML basics and elements, including attributes. In this lesson, we'll put that knowledge into practice by creating your first paragraph in HTML.\n##Recap of What You've Learned:\n\n1. You've learned about the essential elements of HTML, such as <html>, <head>, <body>, <title>, and <meta>.\n2. You've discovered the significance of the DOCTYPE declaration in specifying the HTML version and ensuring proper rendering.\n3. You've explored HTML elements and their syntax, including start tags, element content, and end tags.\n4. You've delved into the role of attributes in providing additional information about elements, and you've seen various attributes commonly used in HTML elements.\n##Now, let's apply this knowledge to create your first paragraph in HTML!\n\n",
            "lesson": "##Creating Your First Paragraph:\n\nTo create a paragraph in HTML, we use the <p> element. This element allows us to structure text content into paragraphs on our web page.\n\nHere's a simple example of how to create your first paragraph in HTML:\n\n`<!DOCTYPE html>\n<html>\n<head>\n    <title>My First Web Page</title>\n</head>\n<body>\n    <h1>Welcome to My Web Page!</h1>\n    <p>This is my first paragraph in HTML. I'm learning how to create web pages, and it's exciting!</p>\n</body>\n</html>`\n\nIn this example:\n1. We've started with the DOCTYPE declaration (<!DOCTYPE html>) to specify the HTML version.\n2. Inside the <html> element, we've included the <head> section, where we've set the title of our web page using the <title> element.\n3. The <body> element contains the visible content of our web page. We've added an <h1> element for the main heading (don’t panic! you will learn about headings in the subsequent lessons) and a <p> element for our paragraph.\nFeel free to customize the content of the paragraph to reflect your own thoughts, ideas, or any information you'd like to share on your web page.\n\n##Congratulations! You've successfully created your first paragraph in HTML. Keep practicing and exploring new elements and attributes to enhance your web development skills.\n",
            "quiz": [
              {
                "question": "What HTML element is used to create a paragraph?",
                "options": [
                  " A) <paragraph>",
                  " B) <p>",
                  "C) <para>",
                  "D) <pg>"
                ],
                "correctAnswer": 1
              },
              {
                "question": "What is the purpose of the <title> element in an HTML document?",
                "options": [
                  "A) It defines the main heading of the webpage.",
                  "B) It specifies the version of HTML being used.",
                  "C) It provides additional information about an element.",
                  "  D) It sets the title of the webpage displayed in the browser tab."
                ],
                "correctAnswer": 3
              },
              {
                "question": "What is the role of the <body> element in an HTML document?",
                "options": [
                  "A) It contains visible content such as text, images, and links.",
                  "B) It specifies the metadata of the webpage.",
                  "C) It defines the structure of the webpage.",
                  "D) It includes references to external files used in the webpage."
                ],
                "correctAnswer": 0
              }
            ]
          },
          {
            "title": "HTML Text Formatting",
            "content": "##1. Apply inline styling to HTML elements using the style attribute.\n##2. Manipulate the look and feel of elements with CSS properties such as background color, color, font-family, font-size, and text-align.\n\n\n",
            "lesson": "##Styling Syntax Unveiled\nThe magic happens with the syntax: \n`<tagname style=\"property:value;\">`\nHere, tagname could be any HTML element like p, h1, or body. The property is a CSS attribute, and the value is the specific styling you wish to apply.\n\n##Styling in Action\n1. Paint the Background: Set the stage with background-color:\n`<p style=\"background-color: turquoise;\">Imagine a turquoise sea.</p> a turquoise sea.</p>`\n\n2. Text Color Transformation: The color property brings words to life:\n`<h1 style=\"color: coral;\">Coral dreams awaken.</h1>`\n\n\n3. Font Family Fiesta: With font-family, switch up the typography:\n`<p style=\"font-family: 'Georgia', serif;\">Elegance in every word.</p>`\n\n\n4. Size Matters: Adjust font-size to scale the importance:\n`<p style=\"font-size: 120%;\">A bigger, bolder paragraph.</p>`\n\n\n5. Align Your Thoughts: The text-align property lines up your content:\n`<h2 style=\"text-align: right;\">Right-aligned intrigue.</h2>`\n\n\n",
            "quiz": [
              {
                "question": "What is the syntax for applying inline styling to HTML elements using the style attribute?",
                "options": [
                  " A) <tagname style=\"property:value;\">",
                  "B) <tagname style=\"value:property;\">",
                  "C) <tagname property=\"value;\">",
                  "D) <tagname style=\"value\">"
                ],
                "correctAnswer": 0
              },
              {
                "question": "Which CSS property is used to set the background color of an HTML element?",
                "options": [
                  " A) font-family",
                  "   B) text-align",
                  " C) background-color",
                  "  D) color"
                ],
                "correctAnswer": 2
              },
              {
                "question": "How can you center-align text within an HTML element using inline styling?",
                "options": [
                  "A) Using the text-align property with the value \"center\".",
                  " B) Using the align property with the value \"center\".",
                  " C) Using the center property with the value \"text-align\"",
                  "   D) Using the style property with the value \"center\""
                ],
                "correctAnswer": 0
              }
            ]
          },
          {
            "title": "HTML Comments",
            "content": "##1. Adding comments to HTML source code for documentation and organization.\n##2. Utilizing HTML comments to temporarily hide content and debug code.\n\n",
            "lesson": "##Comment Syntax Unveiled:\nComments are encapsulated within <!-- and --> tags in HTML. They provide valuable insights into your code without being displayed in the browser.\n##Comments in Action:\n1. Documenting Code: Add comments to provide context and clarity:\n`<!-- This is a comment -->`\n\n2. Hiding Content: Comments can temporarily hide content from display:\n`<!-- <p>This is another paragraph.</p>--> `\n\n3. Debugging Assistance: Comment out code to troubleshoot issues:\n`<!--\n<p>Commented out paragraph.</p>\n<img src=\"example.jpg\" alt=\"\">-->`\n",
            "quiz": [
              {
                "question": "How are HTML comments encapsulated in HTML code?",
                "options": [
                  "A) [comment] and [/comment]",
                  " B) <!-- and -->",
                  "C) {comment} and {/comment}",
                  "   D) <!-- and //-->"
                ],
                "correctAnswer": 1
              },
              {
                "question": "What is the primary purpose of adding comments to HTML source code?",
                "options": [
                  "   A) To change the appearance of elements.",
                  "B) To provide documentation and organization.",
                  "C) To create hidden elements on the webpage.",
                  "D) To apply styling to specific elements."
                ],
                "correctAnswer": 1
              },
              {
                "question": "In the context of debugging code, how can comments be helpful?",
                "options": [
                  "A) By hiding elements permanently.",
                  "B) By adding visual effects to elements.",
                  "C) By temporarily hiding or commenting out code to troubleshoot issues.",
                  " D) By changing the structure of the HTML document."
                ],
                "correctAnswer": 2
              }
            ]
          },
          {
            "title": "Links, Images in HTML",
            "content": "##How to add links and images to your HTML pages to create interactive and visually appealing content.",
            "lesson": "##Links Unveiled:\nLinks are essential for navigating between web pages. They are represented by the <a> tag and can be text or images.\n\n##Links in Action:\n1. Hyperlinks: Create clickable links with the <a> tag:\n`<a href=\"https://www.example.com/\">Visit Example.com</a>`\n\n\n2. Target Attribute: Specify where the linked document should open:\n`<a href=\"https://www.example.com/\" target=\"_blank\">Visit Example.com</a>`\n\n3. Absolute vs. Relative URLs: Choose between absolute and relative URLs for linking:\n`<a href=\"https://www.example.com/\">Absolute URL</a>`\n`<a href=\"page.html\">Relative URL</a>`\n\n##Images Explored:\nImages enhance the visual appeal of web pages. They are inserted using the <img> tag.\n\n##Images in Action:\n1. Embedding Images: Add images with the <img> tag:\n`<img src=\"image.jpg\" alt=\"Description of image\">`\n\n2. Image Attributes: Define image properties such as width and height:\n`<img src=\"image.jpg\" alt=\"Description of image\" width=\"200\" height=\"150\">`\n",
            "quiz": [
              {
                "question": "What HTML tag is used to create hyperlinks?",
                "options": [
                  "A) <link>",
                  "B) <a>",
                  "C) <href>",
                  "D) <url>"
                ],
                "correctAnswer": 1
              },
              {
                "question": "What attribute is used to define the source (URL) of an image in HTML?",
                "options": [
                  "A) image-src ",
                  "B) link",
                  "C) href",
                  "D) src"
                ],
                "correctAnswer": 3
              },
              {
                "question": "In HTML, what does the alt attribute of the <img> tag specify?",
                "options": [
                  "A) Alignment of the image",
                  "B) Alternate text for the image",
                  "C) Animation duration",
                  "D) Accessible link to the image"
                ],
                "correctAnswer": 1
              },
              {
                "question": "How can you set the width and height of an image in HTML?",
                "options": [
                  "A) Using the <size> tag",
                  "B) By adding a dimension attribute",
                  "C) Using the width and height attributes ",
                  "D) Applying CSS styles directly to the image tag"
                ],
                "correctAnswer": 2
              },
              {
                "question": "Which of the following is an example of a relative URL?",
                "options": [
                  "A) <a href=\"https://www.example.com/\">Absolute URL</a>",
                  "B) <a href=\"page.html\">Relative URL</a> ",
                  "C) <a href=\"https://www.example.com/\">Relative URL</a>",
                  "D) <a href=\"/page.html\">Absolute URL</a>"
                ],
                "correctAnswer": 1
              }
            ]
          },
          {
            "title": "HTML Lists",
            "content": "##1. Different types of lists (unordered, ordered, other)\n##2. How to declare and organize every list",
            "lesson": "##Unordered lists\nAn unordered list starts with the <ul> tag. Each list item starts with the <li> tag.\nThe list items will be marked with bullets by default.\nExample:\n`<ul>\n  <li>Coffee</li>\n  <li>Tea</li>\n  <li>Milk</li>\n</ul> `\nResults\n$\n##Choosing an unordered list item marker\nThe CSS list-style-type property is used to define the style of the list item marker. It can have one of the following values:\n1. disc – Sets the list item marker to a bullet (default) \n2. circle – Sets the list item marker to a circle\n3. square – Sets the list item marker to a square\n4. none – The list items will not be marked\n\n`<ul style=\"list-style-type:square;\">\n  <li>Coffee</li>\n  <li>Tea</li>\n  <li>Milk</li>\n</ul>`\n\nResults:\n$\n\n##Ordered lists\nAn ordered list starts with the <ol> tag. Each list item starts with the <li> tag.\nThe list items will be marked with numbers by default.\n\n\n`<ol>\n  <li>Coffee</li>\n  <li>Tea</li>\n  <li>Milk</li>\n</ol>`\n\n\nResults:\n$\n\n##Choosing an ordered list item marker (the type attribute)\nThe type attribute of the <ol> tag, defines the type of the list item marker:\n1. type=\"1\" – The list items will be numbered with numbers (default)\n2. type=\"A\" – The list items will be numbered with uppercase letters\n3. type=\"a\" – The list items will be numbered with lowercase letters\n4. type=\"I\" – The list items will be numbered with uppercase roman numbers\n5. type=\"i\" – The list items will be numbered with lowercase roman numbers\n\n`<ol type=\"a\">\n  <li>Coffee</li>\n  <li>Tea</li>\n  <li>Milk</li>\n</ol>`\n\nResults:\n$\n\n##Description lists\nA description list is a list of terms, with a description of each term.\nThe <dl> tag defines the description list, the <dt> tag defines the term (name), and the <dd> tag describes each term:\n\n\n`<dl>\n  <dt>Coffee</dt>\n  <dd>- black hot drink</dd>\n  <dt>Milk</dt>\n  <dd>- white cold drink</dd>\n</dl>`\n\n\nResults:\n$\n\n\n\n\n\n",
            "quiz": [
              {
                "question": "Which HTML tag is used to define an unordered list?",
                "options": [
                  "A)  <ol> ",
                  "B) <ul>",
                  "C) <dl>",
                  "D) <li>"
                ],
                "correctAnswer": 1
              },
              {
                "question": "What is the default marker for list items in an unordered list?",
                "options": [
                  "A) Numbers",
                  "B) Uppercase letters",
                  "C) Bullets",
                  "D) Lowercase letters"
                ],
                "correctAnswer": 2
              },
              {
                "question": "Which CSS property is used to define the style of the list item marker in an unordered list?",
                "options": [
                  "A) list-type-style",
                  "B) list-item-marker",
                  "C) list-style-type",
                  "D) marker-style"
                ],
                "correctAnswer": 2
              },
              {
                "question": "How would you declare an unordered list with circle markers?",
                "options": [
                  "A) <ul style=\"list-style-type:square;\">",
                  "B) <ul style=\"list-style-type:disc;\">",
                  "C) <ul style=\"list-style-type:circle;\">",
                  "D) <ul style=\"list-style-type:none;\">"
                ],
                "correctAnswer": 2
              }
            ]
          },
          {
            "title": "HTML Tables",
            "content": "##1. How to declare a table\n##2. Ways to span two columns and rows\n##3. Changing the dimensions of a table\n",
            "lesson": "##HTML Table Tags\n1. <table> – Defines a table\n2. <th> – Defines a header cell in a table\n3. <tr> – Defines a row in a table\n4. <td> – Defines a cell in a table\n5. <caption> –Defines a table caption\n6. <colgroup> – Specifies a group of one or more columns in a table for formatting\n7. <col> – Specifies column properties for each column within a  <colgroup> element\n8. <thead> – Groups the header content in a table\n9. <tbody> – Groups the body content in a table\n10. <tfoot> – Groups the footer content in a table\n\nHTML tables can have different sizes for each column, row or the entire table.\nYou can use the style attribute with the width or height properties to specify the size of a table, row or column.\n\n`<table style=\"width:100%\">\n  <tr>\n    <th style=\"width:70%\">Firstname</th>\n    <th>Lastname</th>\n    <th>Age</th>\n  </tr>\n  <tr>\n    <td>Jill</td>\n    <td>Smith</td>\n    <td>50</td>\n  </tr>\n  <tr>\n    <td>Eve</td>\n    <td>Jackson</td>\n    <td>94</td>\n  </tr>\n</table>`\n\nResults:\n$\n\n\n\nTo make a cell span over multiple columns, use the colspan attribute:\n`<table>\n  <tr>\n    <th colspan=\"2\">Name</th>\n    <th>Age</th>\n  </tr>\n  <tr>\n    <td>Jill</td>\n    <td>Smith</td>\n    <td>43</td>\n  </tr>\n  <tr>\n    <td>Eve</td>\n    <td>Jackson</td>\n    <td>57</td>\n  </tr>\n</table>`\n\nResults:\n$\n\nTo make a cell span over multiple rows, use the rowspan attribute:\n`<table>\n  <tr>\n    <th>Name</th>\n    <td>Jill</td>\n  </tr>\n  <tr>\n    <th rowspan=\"2\">Phone</th>\n    <td>555-1234</td>\n  </tr>\n  <tr>\n    <td>555-8745</td>\n</tr>\n</table>\n`\n\nResults:\n$\n\n",
            "quiz": [
              {
                "question": " Which HTML tag is used to define a table?",
                "options": [
                  "A) <table>",
                  "B) <tr>",
                  "C) <td>",
                  "D) <th>"
                ],
                "correctAnswer": 0
              },
              {
                "question": "How can you specify the size of a table using HTML and CSS?",
                "options": [
                  "A) By using the <size> attribute within the <table> tag",
                  "B) By using the style attribute with width and height properties within the <table> tag",
                  "C) By wrapping the table in a <div> with specific dimensions",
                  "D) By using the size property within the <table> tag"
                ],
                "correctAnswer": 1
              },
              {
                "question": "What attribute is used to make a cell span over multiple columns in an HTML table? ",
                "options": [
                  "A) colspan",
                  "B) rowspan",
                  "C) span",
                  "D) merge"
                ],
                "correctAnswer": 0
              },
              {
                "question": "Which HTML tag is used to define a table caption?",
                "options": [
                  "A) <caption>",
                  "B) <colgroup>",
                  "C) <thead>",
                  "D) <tfoot>"
                ],
                "correctAnswer": 0
              },
              {
                "question": "What HTML tag is used to group the header content in a table?",
                "options": [
                  "A) <thead>",
                  "B)  <tbody>",
                  "C) <tfoot>",
                  "D) <colgroup>"
                ],
                "correctAnswer": 0
              },
              {
                "question": "How can you make a cell span over multiple rows in an HTML table?",
                "options": [
                  "A) By using the rowspan attribute",
                  "B) By using the rowmerge attribute",
                  "C) By wrapping multiple <td> tags within a single <tr> tag",
                  "D) By using the colspan attribute"
                ],
                "correctAnswer": 0
              }
            ]
          },
          {
            "title": "HTML Blocks, Inline and Divs",
            "content": "##1. What is a block-level element\n##2. What are the inline elements\n##3. How do declare a div  \n",
            "lesson": "##Blocks\n\nA block-level element always starts on a new line, and the browsers automatically add some space (a margin) before and after the element.\nA block-level element always takes up the full width available.\n\nTwo commonly used block elements are: <p> and <div>.\nThe <p> element defines a paragraph in an HTML document.\nThe <div> element defines a division or a section in an HTML document.\n\n\n`<p>Hello World</p>\n<div>Hello World</div>\n`\n\nResults:\n$\n\n##Inline Elements\nAn inline element does not start on a new line.\nAn inline element only takes up as much width as necessary.\nThis is a <span> element inside a paragraph.\n\n`<span>Hello World</span>`\n\nResults:\n$\n\n##The <div> Element\nThe <div> element is often used as a container for other HTML elements.\nThe <div> element has no required attributes, but style, class and id are common.\nWhen used together with CSS, the <div> element can be used to style blocks of content.\n\n\n`<div style=\"background-color:black;color:white;padding:20px;\">\n  <h2>London</h2>\n  <p>London is the capital city of England. It is the most populous city in the United Kingdom, with a metropolitan area of over 13 million inhabitants.</p>\n</div>`\n\n\nResults:\n$\n\n\n",
            "quiz": [
              {
                "question": "Which of the following statements about block-level elements is true?",
                "options": [
                  "A) They always start on the same line as the previous element.",
                  "B) They only take up as much width as necessary.",
                  "C) Browsers do not add any space (margin) before or after block-level elements.",
                  "D) They always start on a new line, and browsers automatically add space before and after them."
                ],
                "correctAnswer": 3
              },
              {
                "question": "Which HTML element is commonly used as a container for other HTML elements?",
                "options": [
                  "A)  <p>",
                  "B) <span>",
                  "C)  <div>",
                  "D)  <section>"
                ],
                "correctAnswer": 2
              },
              {
                "question": "What is the purpose of the <span> element?",
                "options": [
                  "A) To define a paragraph in an HTML document.",
                  "B) To style blocks of content.",
                  "C) To start on a new line.",
                  "D) To group inline elements for styling purposes."
                ],
                "correctAnswer": 3
              },
              {
                "question": "What attributes are commonly used with the <div> element?",
                "options": [
                  "A) href and src",
                  "B)  style, class, and id",
                  "C)  type and value",
                  "D)  colspan and rowspan"
                ],
                "correctAnswer": 1
              }
            ]
          }
        ],
        "css": [],
        "js": [
          {
            "title": "DEMO LESSON",
            "content": "# Did you know frogs can jump?\n$https://i.natgeofe.com/k/8fa25ea4-6409-47fb-b3cc-4af8e0dc9616/red-eyed-tree-frog-on-leaves-3-2_3x4.jpg\n## frogs are very good animals because they:\n- Can jump high.\n- Can jump not high.\n- Can make quack sound.\n\n## how frogs' brains work:\nFrogs are very smart big brain animals, that can do many things, here is how their brain works:\n`while(!hungry && !sleepy) {\n  if(energy > 0) {\n    jump();\n    quack();\n  } else {\n    sleep();\n  }\n}`",
            "lesson": "# Did you know frogs can jump?\n$https://i.natgeofe.com/k/8fa25ea4-6409-47fb-b3cc-4af8e0dc9616/red-eyed-tree-frog-on-leaves-3-2_3x4.jpg\n## frogs are very good animals because they:\n- Can jump high.\n- Can jump not high.\n- Can make quack sound.\n\n## how frogs' brains work:\nFrogs are very smart big brain animals, that can do many things, here is how their brain works:\n`while(!hungry && !sleepy) {\n  if(energy > 0) {\n    jump();\n    quack();\n  } else {\n    sleep();\n  }\n}`",
            "quiz": []
          }
        ],
        "python": [
          {
            "title": "Gay",
            "content": "#Gay\n##MiniGay\n",
            "lesson": "# Blank lesson",
            "quiz": [
              {
                "question": "GAy",
                "options": [
                  "Me",
                  "You"
                ],
                "correctAnswer": 1
              }
            ]
          },
          {
            "title": "Python Syntax",
            "content": "##Python Syntax\n#Python syntax is designed to be clear and concise, making it easy to write and understand code. Statements are typically written on separate lines, and indentation is used to indicate code blocks.\n'if 5 > 2:\n    print(\"5 is greater than 2\")'\n",
            "lesson": "Application: Pay attention to indentation when writing Python code. Proper indentation is crucial for readability and ensures that your code functions as intended.",
            "quiz": [
              {
                "question": "How do we denote a multi-line block of code in Python?",
                "options": [
                  " Using square brackets []",
                  " Using parentheses ()",
                  "Using curly braces {}",
                  " Using indentation"
                ],
                "correctAnswer": 3
              }
            ]
          },
          {
            "title": "Python Syntax",
            "content": "#Python Syntax\n##Python syntax is designed to be clear and concise, making it easy to write and understand code. Statements are typically written on separate lines, and indentation is used to indicate code blocks.\n",
            "lesson": "##Python Indentation\nIndentation refers to the spaces at the beginning of a code line.\n\nWhere in other programming languages the indentation in code is for readability only, the indentation in Python is very important.\n\nPython uses indentation to indicate a block of code.\nThe number of spaces is up to you as a programmer, the most common use is four, but it has to be at least one.\nYou have to use the same number of spaces in the same block of code, otherwise Python will give you an error\n##Comments\nPython has commenting capability for the purpose of in-code documentation.\n`if 5 > 2:\n print(\"Five is greater than two!\") \nif 5 > 2:\n        print(\"Five is greater than two!\")`\n\nComments start with a #, and Python will render the rest of the line as a comment:\n`#This is a comment.\nprint(\"Hello, World!\")`\n#Python Variables\nIn Python, variables are created when you assign a value to it:\n`x = 5\ny = \"Hello, World!\"`\n#Python has no command for declaring a variable.\n#You will learn more about variables in the Python Variables chapter.",
            "quiz": [
              {
                "question": "How do we denote a multi-line block of code in Python?",
                "options": [
                  " Using square brackets []",
                  " Using parentheses ()",
                  "Using curly braces {}",
                  " Using indentation"
                ],
                "correctAnswer": 3
              },
              {
                "question": "What symbol do we use to indicate comments in Python?",
                "options": [
                  "//",
                  "#",
                  "%%",
                  "/* */",
                  "#"
                ],
                "correctAnswer": 1
              }
            ]
          },
          {
            "title": "Python Variables",
            "content": "#Python Variables\n##Variables are used to store data values in Python. They are assigned using the equals sign (=) and can hold different types of data, such as numbers, strings, or booleans.",
            "lesson": "#Variables are containers for storing data values.\n##Creating Variables\nPython has no command for declaring a variable.\nA variable is created the moment you first assign a value to it.\n`x = 5\ny = \"John\"\nprint(x)\nprint(y)`\nVariables do not need to be declared with any particular type, and can even change type after they have been set.\n##If you want to specify the data type of a variable, this can be done with casting.\n`x = str(3)    # x will be '3'\ny = int(3)    # y will be 3\nz = float(3)  # z will be 3.0`\n##Get the Type\nYou can get the data type of a variable with the type() function.\n`x = 5\ny = \"John\"\nprint(type(x))\nprint(type(y))`\n##Single or Double Quotes?\nString variables can be declared either by using single or double quotes:\n`x = \"John\"\n# is the same as\nx = 'John'`",
            "quiz": [
              {
                "question": "What data type is used for storing whole numbers in Python?",
                "options": [
                  "str",
                  "int",
                  "float",
                  " bool"
                ],
                "correctAnswer": 1
              },
              {
                "question": "What is the result of the following code snippet?(x = 5 y = \"Hello\" print(x + y))",
                "options": [
                  "5Hello",
                  "Hello5",
                  "TypeError",
                  "10"
                ],
                "correctAnswer": 2
              }
            ]
          },
          {
            "title": "Python Operators",
            "content": "#Python Operators\n##Operators are symbols used to perform operations on variables and values. Python supports various types of operators, including arithmetic, comparison, logical, and assignment operators.",
            "lesson": "##Operators are used to perform operations on variables and values.\n\nIn the example below, we use the + operator to add together two values:\n`print(10 + 5)`\n\nPython divides the operators in the following groups:\n\n-Arithmetic operators\n-Assignment operators\n-Comparison operators\n-Logical operators\n-Identity operators\n-Membership operators\n-Bitwise operators\n`# Arithmetic operators\nx = 5 + 3\ny = 5 * 3\nz = 5 / 2\n# Comparison operators\na = 5 > 2\nb = 5 == 2\nc = 5 != 2\n# Logical operators\np = True and False\nq = True or False\n# Assignment operators\nx += 1  # Equivalent to x = x + 1`\n##Python Comparison Operators\n==\tEqual\tx == y\t\n!=\tNot equal\tx != y\t\n>\tGreater than\tx > y\t\n<\tLess than\tx < y\t\n>=\tGreater than or equal to\tx >= y\t\n<=\tLess than or equal to\tx <= y\n##Python Arithmetic Operators\n+\tAddition\tx + y\t\n-\tSubtraction\tx - y\t\n*\tMultiplication\tx * y\t\n/\tDivision\tx / y\t\n%\tModulus\tx % y\t\n**\tExponentiation\tx ** y\t\n//\tFloor division\tx // y\n##Python Bitwise Operators\n& \tAND\tSets each bit to 1 if both bits are 1\tx & y\t\n|\tOR\tSets each bit to 1 if one of two bits is 1\tx | y\t\n^\tXOR\tSets each bit to 1 if only one of two bits is 1\tx ^ y\t\n~\tNOT\tInverts all the bits\t~x\t\n<<\tZero fill left shift\tShift left by pushing zeros in from the right and let the leftmost bits fall off\tx << 2\t\n>>\tSigned right shift\tShift right by pushing copies of the leftmost bit in from the left, and let the rightmost bits fall off\tx >> 2\n##Operator Precedence\n`print((6 + 3) - (6 + 3))`\nParentheses has the highest precedence, meaning that expressions inside parentheses must be evaluated first:\nMultiplication * has higher precedence than addition +, and therefor multiplications are evaluated before additions:\n`print(100 + 5 * 3)`\n#The precedence order is described in the table below, starting with the highest precedence at the top:\n\n()\tParentheses\t\n**\tExponentiation\t\n+x  -x  ~x\tUnary plus, unary minus, and bitwise NOT\t\n*  /  //  %\tMultiplication, division, floor division, and modulus\t\n+  -\tAddition and subtraction\t\n<<  >>\tBitwise left and right shifts\t\n&\tBitwise AND\t\n^\tBitwise XOR\t\n|\tBitwise OR\t\n==  !=  >  >=  <  <=  is  is not  in  not in \tComparisons, identity, and membership operators\t\nnot\tLogical NOT\t\nand\tAND\t\nor\tOR",
            "quiz": [
              {
                "question": "What is the result of 5 + 2?",
                "options": [
                  "7",
                  "52",
                  "TypeError",
                  "None"
                ],
                "correctAnswer": 0
              },
              {
                "question": "What operator is used for exponentiation in Python?",
                "options": [
                  "^",
                  " **",
                  "//",
                  "%"
                ],
                "correctAnswer": 1
              }
            ]
          },
          {
            "title": "Python Lists, Tuples, Sets",
            "content": "#Python Lists, Tuples, Sets\n##Lists, tuples, and sets are data structures used to store collections of items in Python. Lists are mutable, ordered collections, while tuples are immutable. Sets are unordered collections with no duplicate elements.\n",
            "lesson": "`# List\nfruits = [\"apple\", \"banana\", \"cherry\"]\n# Tuple\ncolors = (\"red\", \"green\", \"blue\")\n# Set\nnumbers = {1, 2, 3, 4, 5}`\n##List\nLists are used to store multiple items in a single variable.\n\nLists are one of 4 built-in data types in Python used to store collections of data, the other 3 are Tuple, Set, and Dictionary, all with different qualities and usage.\n\nLists are created using square brackets:\n`thislist = [\"apple\", \"banana\", \"cherry\"]\nprint(thislist)`\n##List Items\nList items are ordered, changeable, and allow duplicate values.\n\nList items are indexed, the first item has index [0], the second item has index [1] etc.\n##Ordered\nWhen we say that lists are ordered, it means that the items have a defined order, and that order will not change.\n\nIf you add new items to a list, the new items will be placed at the end of the list.\n##Allow Duplicates\nSince lists are indexed, lists can have items with the same value:\n`thislist = [\"apple\", \"banana\", \"cherry\", \"apple\", \"cherry\"]\nprint(thislist)`\n##List Length\n`thislist = [\"apple\", \"banana\", \"cherry\"]\nprint(len(thislist))`\n",
            "quiz": [
              {
                "question": "Which data type in Python is ordered and mutable?",
                "options": [
                  "list",
                  "tuple",
                  "set",
                  "dictionary"
                ],
                "correctAnswer": 0
              },
              {
                "question": "What is the correct syntax for creating a tuple?",
                "options": [
                  "[1, 2, 3]",
                  "(1, 2, 3)",
                  "{1, 2, 3}",
                  "{1: 'a', 2: 'b', 3: 'c'}"
                ],
                "correctAnswer": 1
              }
            ]
          },
          {
            "title": "Python Dictionaries",
            "content": "\n#Python Dictionaries\n##Dictionaries are data structures used to store key-value pairs in Python. Each key is associated with a value, allowing for efficient lookup and retrieval of data.\n##Use dictionaries to store and retrieve data in key-value pairs. Dictionaries are useful for representing structured data and organizing information in your programs.",
            "lesson": "##Dictionaries are used to store data values in key:value pairs.\n\nA dictionary is a collection which is ordered*, changeable and do not allow duplicates.\n`thisdict = {\n  \"brand\": \"Ford\",\n  \"model\": \"Mustang\",\n  \"year\": 1964\n}\nprint(thisdict)`\n##Dictionary Items\nDictionary items are ordered, changeable, and do not allow duplicates.\n\nDictionary items are presented in key:value pairs, and can be referred to by using the key name.\n`thisdict = {\n  \"brand\": \"Ford\",\n  \"model\": \"Mustang\",\n  \"year\": 1964\n}\nprint(thisdict[\"brand\"])`\n##Ordered or Unordered?\nWhen we say that dictionaries are ordered, it means that the items have a defined order, and that order will not change.\n\nUnordered means that the items do not have a defined order, you cannot refer to an item by using an index.\n##Changeable\nDictionaries are changeable, meaning that we can change, add or remove items after the dictionary has been created.\n##Duplicates Not Allowed\nDictionaries cannot have two items with the same key:\n\n`thisdict = {\n  \"brand\": \"Ford\",\n  \"model\": \"Mustang\",\n  \"year\": 1964,\n  \"year\": 2020\n}\nprint(thisdict)`\n\n",
            "quiz": [
              {
                "question": "How are items stored in a dictionary?",
                "options": [
                  "Ordered sequence",
                  "Random sequence",
                  "Key-value pairs",
                  "Index-value pairs"
                ],
                "correctAnswer": 2
              },
              {
                "question": "What happens if you try to access a key that does not exist in a dictionary?",
                "options": [
                  "It returns None",
                  " It returns an empty string",
                  " It raises a KeyError",
                  " It returns False"
                ],
                "correctAnswer": 2
              }
            ]
          },
          {
            "title": "Python If…Else",
            "content": "#Python If…Else\n## If...else statements are used to make decisions in Python based on certain conditions. They allow your program to execute different code blocks depending on whether a condition is true or false.\n##Use if...else statements to control the flow of your program and perform different actions based on specific conditions. They are essential for implementing logic and making your programs more dynamic.\n",
            "lesson": "#Python Conditions and If statements\nPython supports the usual logical conditions from mathematics:\nEquals: a == b\nNot Equals: a != b\nLess than: a < b\nLess than or equal to: a <= b\nGreater than: a > b\nGreater than or equal to: a >= b\n`Example:\nx = 5\nif x > 3:\n    print(\"x is greater than 3\")\nelse:\n    print(\"x is less than or equal to 3\")`\n#Indentation\nPython relies on indentation (whitespace at the beginning of a line) to define scope in the code. Other programming languages often use curly-brackets for this purpose.\n\n##Elif\nThe elif keyword is Python's way of saying \"if the previous conditions were not true, then try this condition\".\n`a = 33\nb = 33\nif b > a:\n  print(\"b is greater than a\")\nelif a == b:\n  print(\"a and b are equal\")`\n\n##Else\nThe else keyword catches anything which isn't caught by the preceding conditions.\n`a = 200\nb = 33\nif b > a:\n  print(\"b is greater than a\")\nelif a == b:\n  print(\"a and b are equal\")\nelse:\n  print(\"a is greater than b\")`\n\nIn this example a is greater than b, so the first condition is not true, also the elif condition is not true, so we go to the else condition and print to screen that \"a is greater than b\".\n\nYou can also have an else without the elif:\n\n`a = 200\nb = 33\nif b > a:\n  print(\"b is greater than a\")\nelse:\n  print(\"b is not greater than a\")`\n\n\n##Short Hand If\nIf you have only one statement to execute, you can put it on the same line as the if statement.\n`if a > b: print(\"a is greater than b\")`\n\n##And\nThe and keyword is a logical operator, and is used to combine conditional statements:\n`a = 200\nb = 33\nc = 500\nif a > b and c > a:\n  print(\"Both conditions are True\")`\n##Or\nThe or keyword is a logical operator, and is used to combine conditional statements:\n`a = 200\nb = 33\nc = 500\nif a > b or a > c:\n  print(\"At least one of the conditions is True\")`\n\n##Not\nThe not keyword is a logical operator, and is used to reverse the result of the conditional statement:\n`a = 33\nb = 200\nif not a > b:\n  print(\"a is NOT greater than b\")`\n\n#Nested If\nYou can have if statements inside if statements, this is called nested if statements.\n`x = 41\n\nif x > 10:\n  print(\"Above ten,\")\n  if x > 20:\n    print(\"and also above 20!\")\n  else:\n    print(\"but not above 20.\")`\n",
            "quiz": [
              {
                "question": "What keyword is used to start an if statement in Python?",
                "options": [
                  "then",
                  "elif",
                  " else",
                  "if"
                ],
                "correctAnswer": 3
              },
              {
                "question": "What happens if no conditions in an if...elif...else statement are True?",
                "options": [
                  "The program crashes",
                  "The else block is executed",
                  "The program exits",
                  "None of the above"
                ],
                "correctAnswer": 1
              }
            ]
          },
          {
            "title": "Python While Loops",
            "content": "#Python While Loops\n## While loops are used to execute a block of code repeatedly as long as a specified condition is true. They continue iterating until the condition becomes false.\n##Use while loops when you need to repeatedly execute a block of code until a certain condition is met. Be cautious to avoid infinite loops by ensuring that the condition eventually becomes false.",
            "lesson": "`Example:\ni = 0\nwhile i < 5:\n    print(i)\n    i += 1`\n\n##Python Loops\nPython has two primitive loop commands:\n\nwhile loops\nfor loops\n\n##The break Statement\nWith the break statement we can stop the loop even if the while condition is true:\n`i = 1\nwhile i < 6:\n  print(i)\n  if i == 3:\n    break\n  i += 1`\n\n##The continue Statement\n`i = 0\nwhile i < 6:\n  i += 1\n  if i == 3:\n    continue\n  print(i)`\n\n\n##The else Statement\nWith the else statement we can run a block of code once when the condition no longer is true:\n`i = 1\nwhile i < 6:\n  print(i)\n  i += 1\nelse:\n  print(\"i is no longer less than 6\")`\n\n",
            "quiz": [
              {
                "question": "What keyword is used to start a while loop in Python?",
                "options": [
                  "for",
                  "while",
                  "loop",
                  "until"
                ],
                "correctAnswer": 1
              },
              {
                "question": "How do you exit a while loop prematurely?",
                "options": [
                  " Using the break keyword",
                  "Using the continue keyword",
                  "Using the return keyword",
                  "None of the above"
                ],
                "correctAnswer": 0
              }
            ]
          }
        ],
        "c": [],
        "cpp": []
      }
    },
    "ru": {
      "elements": {
        "langRegisterForm": "Форма регистрации",
        "langUsername": "Имя пользователя",
        "langMandatory": "(обязательное)",
        "langPassword": "Пароль",
        "langMandatory2": "(обязательное)",
        "langRegister": "Зарегистрироваться",
        "buttonStart": "Старт",
        "langSFX": "Звуковые эффекты",
        "titleSettings": "Языки",
        "langLogOut": "Выйти",
        "langHome": "Главная",
        "swipe": "Провести",
        "langStats": "Статистика",
        "langAchievements": "Достижения",
        "langGiga": "Гига Чад",
        "langTask1": "Вам нужно получить 100 опыта",
        "langCrazy": "Ты сумасшедший",
        "langTask2": "Вам нужно потратить 100 бриллиантов",
        "langDesigner": "Г-н/Г-жа дизайнер",
        "langTask3": "Вам нужно закончить 5 уроков CSS",
        "langDoom": "Рок...",
        "langTaxt4": "Вам нужно закончить все курсы",
        "langHomeProfile": "Главная",
        "title": "Что вы обнаружите",
        "langLessons": "Уроки",
        "langStartLesson": "Начать урок >",
        "langIntro": "< Введение",
        "langQuizBtn": "Викторина >",
        "title2": "Хотите начать викторину?",
        "langBackBtn2": "< Назад",
        "langStartIdk": "Начать >",
        "langAnswers": "Ответы:",
        "langConnection": "Проверьте ваше интернет-соединение..."
      },
      "categories": {
        "html": [
          {
            "title": "Основы HTML",
            "content": "# Введение\nHTML, основа веб-разработки, является языком разметки, используемым для структурирования и представления контента в Интернете. Он использует теги, заключенные в угловые скобки, для определения элементов в документе.\n\n## Понимание тегов и элементов\nТеги являются строительными блоками HTML, представляя элементы, такие как заголовки, абзацы, изображения и ссылки. Каждый тег служит определенной цели в форматировании и организации контента.\n\n## Структура базового HTML-документа\nТипичный HTML-документ начинается с объявления типа документа (`<!DOCTYPE html>`), за которым следует элемент HTML (`<html>`), который содержит структуру документа внутри секций `<head>` и `<body>`.",
            "lesson": "# ваш урок будет здесь",
            "quiz": [
              {
                "question": "Как вы сегодня?",
                "options": [
                  "ОЧЕНЬ ПЛОХО",
                  "плохо",
                  "так себе",
                  "хорошо",
                  "УДИВИТЕЛЬНО"
                ],
                "correctAnswer": 4
              },
              {
                "question": "Как ваша мама?",
                "options": [
                  "ОЧЕНЬ ТОЛСТАЯ",
                  "Толстая",
                  "Толстуха",
                  "Слишком толстая",
                  "ЧРЕЗВЫЧАЙНО ТОЛСТАЯ"
                ],
                "correctAnswer": 4
              },
              {
                "question": "ЛООООЛ, ТЫ ЛИШЬ ЧТО СКАЗАЛ, ЧТО ТВОЯ МАМА ТОЛСТАЯ??",
                "options": [
                  "...",
                  "ДА ЛОЛ",
                  "Она толстая",
                  "Нет, ты толстый",
                  "Я люблю толстых"
                ],
                "correctAnswer": 1
              },
              {
                "question": "Брат.. вообще, сколько тебе лет?",
                "options": [
                  "10 лет",
                  "3.14 года",
                  "Я только что родился",
                  "Моя мама толстая",
                  "Да"
                ],
                "correctAnswer": 3
              }
            ]
          },
          {
            "title": "Структура документа",
            "content": "# Анатомия HTML-документа\nHTML-документ состоит из различных элементов, включая заголовки, абзацы, списки и блоки, которые структурированы для передачи информации логическим и иерархическим образом.\n\n## Заголовки и абзацы\nЗаголовки, обозначенные тегами `<h1>` до `<h6>`, обеспечивают иерархическую структуру содержимого, где `<h1>` является наиболее важным. Абзацы, определенные тегом `<p>`, разделяют текст на отдельные блоки.\n\n## Блоки и инлайны\nБлоки (`<div>`) - это контейнерные элементы, используемые для группировки и стилизации содержимого, в то время как инлайны (`<span>`) - это элементы в строке, используемые для применения стилей к конкретным частям текста.",
            "lesson": "# это заголовок\n## это подзаголовок\nэто какой-то случайный абзац привет там ого лол лол мао хд это супер круто ахаха лол мао.\n# еще один заголовок\nЯ хочу съесть этот торт ого\n`\nconsole.log(\"я не знаю\");\nfor(int i = 0; i < 3; i++) {\n  console.log(i);\n}\n\n`",
            "quiz": [
              {
                "question": "Как вы сегодня?",
                "options": [
                  "ОЧЕНЬ ПЛОХО",
                  "плохо",
                  "так себе",
                  "хорошо",
                  "УДИВИТЕЛЬНО"
                ],
                "correctAnswer": 4
              },
              {
                "question": "Как ваша мама?",
                "options": [
                  "ОЧЕНЬ ТОЛСТАЯ",
                  "Толстая",
                  "Толстуха",
                  "Слишком толстая",
                  "ЧРЕЗВЫЧАЙНО ТОЛСТАЯ"
                ],
                "correctAnswer": 4
              },
              {
                "question": "ЛООООЛ, ТЫ ЛИШЬ ЧТО СКАЗАЛ, ЧТО ТВОЯ МАМА ТОЛСТАЯ??",
                "options": [
                  "...",
                  "ДА ЛОЛ",
                  "Она толстая",
                  "Нет, ты толстый",
                  "Я люблю толстых"
                ],
                "correctAnswer": 1
              },
              {
                "question": "Брат.. вообще, сколько тебе лет?",
                "options": [
                  "10 лет",
                  "3.14 года",
                  "Я только что родился",
                  "Моя мама толстая",
                  "Да"
                ],
                "correctAnswer": 3
              }
            ]
          },
          {
            "title": "Форматирование текста",
            "content": "# Жирный и курсивный текст\nТекст может быть выделен жирным (`<strong>`) или курсивом (`<em>`) для обозначения важности или акцента, соответственно.\n\n## Переносы строк и горизонтальные линии\nПереносы строк (`<br>`) используются для создания переносов строк внутри абзацев, в то время как горизонтальные линии (`<hr>`) создают визуальные разделители между разделами контента.\n\n## Предварительно отформатированный текст\nТег `<pre>` сохраняет форматирование текста, включая переносы строк и пробелы, что делает его подходящим для отображения фрагментов кода или стихов.",
            "lesson": "# ваш урок будет здесь",
            "quiz": []
          },
          {
            "title": "Ссылки и якоря",
            "content": "# Создание гиперссылок\nГиперссылки необходимы для соединения веб-страниц. Они создаются с использованием тега `<a>` (якоря), а атрибут `href` указывает URL связанной страницы.\n\n## Ссылки на внешние веб-сайты\nДля создания ссылок на внешние веб-сайты атрибут `href` содержит полный URL страницы назначения. Пользователи могут нажимать на эти ссылки для перехода на указанный веб-сайт.\n\n## Теги якорей и внутренние ссылки\nТеги якорей также могут использоваться для создания внутренних ссылок внутри одной и той же веб-страницы. Это достигается путем установки атрибута `href` на ID другого элемента на странице, позволяя пользователям переходить к конкретному разделу.",
            "lesson": "# ваш урок будет здесь",
            "quiz": []
          },
          {
            "title": "Изображения и мультимедиа",
            "content": "# Встраивание изображений\nИзображения могут быть встроены в веб-страницы с использованием тега `<img>`. Атрибут `src` указывает путь к файлу изображения, а атрибут `alt` предоставляет альтернативный текст для целей доступности.\n\n## Добавление аудио и видео\nАудио- и видео-контент может улучшить взаимодействие пользователя. Они добавляются на веб-страницы с помощью тегов `<audio>` и `<video>` соответственно. Эти теги включают атрибуты, такие как `src` для указания медиа-файла и controls для управления воспроизведением.\n\n## Альтернативный текст и доступность\nПредоставление альтернативного текста для изображений с помощью атрибута `alt` гарантирует, что пользователи с нарушениями зрения могут понять содержание. Это также улучшает оптимизацию поисковых систем, предоставляя контекст для изображения.",
            "lesson": "# ваш урок будет здесь",
            "quiz": []
          },
          {
            "title": "Списки в HTML",
            "content": "# Нумерованные списки\nНумерованные списки (`<ol>`) используются для элементов с определенной последовательностью или порядком. Каждый элемент списка (`<li>`) автоматически нумеруется браузером.\n\n## Ненумерованные списки\nНенумерованные списки (`<ul>`) используются для элементов без определенного порядка. Для обозначения каждого элемента списка (`<li>`) используются маркеры или другие метки.\n\n## Списки определений\nСписки определений (`<dl>`) состоят из терминов (`<dt>`) и их определений (`<dd>`). Они часто используются для глоссариев или словарей.",
            "lesson": "# ваш урок будет здесь",
            "quiz": []
          },
          {
            "title": "Таблицы в HTML",
            "content": "# Создание таблиц\nТаблицы структурируются с использованием тега `<table>`, строки определяются тегами `<tr>`, а ячейки в каждой строке определяются тегами `<td>`.\n\n## Строки и столбцы таблицы\nСтроки (`<tr>`) и столбцы (`<td>`) формируют основную структуру таблицы. Дополнительные теги, такие как `<th>`, используются для заголовков таблицы для указания заголовков столбцов.\n\n## Заголовки и подвалы таблицы\nЗаголовки таблицы (`<th>`) могут использоваться для определения заголовков строк или столбцов, а тег `<tfoot>` указывает подвал для таблицы.",
            "lesson": "# ваш урок будет здесь",
            "quiz": []
          },
          {
            "title": "Формы и поля ввода",
            "content": "# Создание HTML-форм\nФормы создаются с использованием тега `<form>`, который содержит различные элементы ввода, такие как текстовые поля, флажки, переключатели и раскрывающиеся меню.\n\n## Элементы ввода формы\nЭлементы ввода собирают данные пользователя. Среди них текстовые поля (`<input type=\"text\">`), флажки (`<input type=\"checkbox\">`), переключатели (`<input type=\"radio\">`) и раскрывающиеся меню (`<select>`).\n\n## Отправка данных формы\nДанные формы отправляются на сервер для обработки с использованием атрибута `action` тега `<form>`, который указывает URL, куда должны быть отправлены данные формы.",
            "lesson": "# ваш урок будет здесь",
            "quiz": []
          },
          {
            "title": "Семантический HTML",
            "content": "# Введение в семантические элементы\nСемантические элементы HTML придают значение контенту не только представлением. Они включают элементы, такие как `<header>`, `<footer>`, `<nav>`, `<article>`, `<section>` и `<aside>`.\n\n## Элементы заголовка и подвала\n`<header>` и `<footer>` определяют верхнюю и нижнюю части веб-страницы соответственно. Они обычно содержат ссылки навигации, информацию о копирайте и другие метаданные.\n\n## Элементы разделения\nЭлементы разделения, такие как `<section>`, `<article>`, `<nav>` и `<aside>`, используются для разделения содержимого веб-страницы на значимые разделы, улучшая доступность и SEO.",
            "lesson": "# ваш урок будет здесь",
            "quiz": []
          },
          {
            "title": "Возможности HTML5",
            "content": "# Введение в HTML5\nHTML5 вводит новые функции и элементы для современной веб-разработки, включая поддержку мультимедиа, семантические элементы и улучшенные формы и API.\n\n## Графика Canvas и SVG\nЭлемент `<canvas>` позволяет динамическое отображение графики с использованием JavaScript, а SVG (масштабируемая векторная графика) обеспечивает изображения и анимации с разрешением, независимым от разрешения экрана.\n\n## Воспроизведение аудио и видео\nHTML5 вводит нативную поддержку воспроизведения аудио и видео с использованием элементов `<audio>` и `<video>`. Это устраняет необходимость в сторонних плагинах, таких как Flash.",
            "lesson": "# ваш урок будет здесь",
            "quiz": []
          },
          {
            "title": "HTML Basics",
            "content": "hello",
            "lesson": "hhello",
            "quiz": [
              {
                "question": "What is the purpose of the DOCTYPE declaration in an HTML document?",
                "options": [
                  "A) It specifies the version of JavaScript used.",
                  "B) It helps web browsers render the page correctly.",
                  "C) It defines the layout and design of the webpage.",
                  "D) It determines the character encoding of the webpage."
                ],
                "correctAnswer": 1
              },
              {
                "question": "Which tag marks the beginning and end of an HTML webpage and should always be closed at the end of the document?",
                "options": [
                  "A) <head>",
                  "B) <body>",
                  "C) <title>",
                  "D) <html>"
                ],
                "correctAnswer": 3
              },
              {
                "question": "How can you view the HTML source code of a webpage?",
                "options": [
                  "A) Press CTRL + U",
                  "B) Right-click and select \"View Page Source\"",
                  "C) Both A and B",
                  "D) None of the above"
                ],
                "correctAnswer": 2
              }
            ]
          },
          {
            "title": "HTML Basics",
            "content": "##Welcome to the HTML Basics lesson! In this lesson, we'll cover the essential elements of HTML to get you started on your web development journey.\n\nHTML, which stands for HyperText Markup Language, is the standard language used to create and design web pages.\nIn this lesson, you'll discover:\n\n1. The purpose and usage of the DOCTYPE declaration.\n2. Basic HTML structure and elements.\n3. How to view the HTML source code of a web page.\n",
            "lesson": "##Understanding the DOCTYPE Declaration\n\nThe DOCTYPE declaration is an essential part of an HTML document. It specifies the version of HTML being used and helps web browsers render the page correctly. Here's an example of the DOCTYPE declaration for HTML5:\n\n`<!DOCTYPE html>`\n\nThis declaration should be placed at the beginning of every HTML document to ensure compatibility and proper rendering.\n\n##Basic HTML Structure\n\nAn HTML document consists of several basic elements, including:\n\n1. <html>: This tag marks the beginning and end of your webpage. All other elements are placed inside it. It should always be closed at the end of the document, like this <\\html>.\n\n2. <head>: Within this tag, you include important information about your webpage, like its title, keywords, and references to other files.  It should be closed -<\\head>- before the <body> tag starts.\n\n3. <body>: Inside this tag, you put all the content that users see when they visit your webpage, like text, images, and links. It should be closed at the end of the document - <\\body>.\n\n4. <title>: This tag sets the title of your webpage, which appears at the top of the browser window or tab. It's self-contained within the <head> section.\n\n5. <meta>: These tags provide additional information about your webpage, such as its character encoding and viewport settings. They are self-closing tags and do not require a separate closing tag.\n\n##Viewing HTML Source Code\n\nEver stumbled upon a webpage that made you go, \"Wow, how did they do that?\" Let's unlock the mystery!\nView HTML Source Code:\nClick CTRL + U in an HTML page, or right-click on the page and select \"View Page Source\". This will open a new tab containing the HTML source code of the page.\n\n\n\n",
            "quiz": [
              {
                "question": "What is the purpose of the DOCTYPE declaration in an HTML document?",
                "options": [
                  "A) It specifies the version of JavaScript used.",
                  "B) It helps web browsers render the page correctly.",
                  "C) It defines the layout and design of the webpage.",
                  "D) It determines the character encoding of the webpage."
                ],
                "correctAnswer": 1
              },
              {
                "question": "Which tag marks the beginning and end of an HTML webpage and should always be closed at the end of the document?",
                "options": [
                  "A) <head>",
                  "B) <body>",
                  "C) <title>",
                  "D) <html>"
                ],
                "correctAnswer": 3
              },
              {
                "question": "How can you view the HTML source code of a webpage?",
                "options": [
                  "A) Press CTRL + U",
                  "B) Right-click and select \"View Page Source\"",
                  "C) Both A and B",
                  "D) None of the above"
                ],
                "correctAnswer": 2
              }
            ]
          },
          {
            "title": "HTML Elements and Attributes",
            "content": "##1. The essence of HTML elements and their significance in web design.\n##2. Understanding the syntax of HTML elements and the role of attributes in providing additional information about elements.\n##3. Exploring various attributes and HTML elements in action.\n\n",
            "lesson": "##Elements syntax unveiled:\nHTML utilizes elements as its core components. An HTML element is comprised of three main parts:\n\n\n1. Start tag: It marks the beginning of an element and is enclosed within angle brackets (< and >). For instance, <tagname>.\n2. Element content: This is the actual content encapsulated by the element. It could be text, images, or other elements.\n3. End tag: It denotes the conclusion of an element and is similar to the start tag, except it includes a forward slash before the tag name. For example, </tagname>.\nAdditionally, some elements may be empty, meaning they don't contain any content and thus don't require an end tag. These are known as empty elements.\n\n##Elements in Action:\nLet's explore some examples to better grasp how HTML elements function:\n\n`<!DOCTYPE html>\n<html>\n<body>\n\n<h1>My First Heading</h1>\n<p>This is a <br> paragraph with a line break.</p>\n\n</body>\n</html>`\n\nIn this example, you can see already familiar elements such as <!DOCTYPE html>, <html>, and <body>. You'll also encounter an empty element, <br>, which represents a line break and is an empty element. Empty elements like <br> don't have a closing tag because they don't contain any content.\n \n##Attributes\nHTML attributes provide additional information about elements and are always specified within the start tag of an element. \n1. The href attribute is commonly used with the <a> tag to define hyperlinks. It specifies the URL of the page the link goes to. For example:\n\n`<a href=\"https://www.example.com\">Visit Example</a>`\n\n2. The src attribute is utilized with the <img> tag to embed images in HTML pages. It specifies the path to the image to be displayed. \n\n`<img src=\"image.jpg\">\n<img src=\"https://www.example.com/image.jpg\">`\n\n3. The width and height attributes define the width and height of an image in pixels, ensuring proper display. \n`<img src=\"image.jpg\" width=\"500\" height=\"300\">`\n\n4. The alt attribute provides alternate text for images, which is displayed if the image cannot be loaded. \n`<img src=\"image.jpg\" alt=\"Description of the image\">`\n\n5. The style attribute adds inline styles to elements, allowing customization of appearance. \n`<p style=\"color: blue;\">Styled paragraph</p>`\n\n6. The lang attribute specifies the language of the HTML document, assisting search engines and browsers. \n\n`<html lang=\"en\">`\n\n 7. The title attribute provides additional information about an element, displayed as a tooltip when hovered over.\n\n`<p title=\"Extra information\">Hello</p>`\n\n##Single or Double Quotes?\nDouble quotes around attribute values are the most common in HTML, but single quotes can also be used.\nIn some situations, when the attribute value itself contains double quotes, it is necessary to use single quotes:\n`<p title='John \"ShotGun\" Nelson'>Hello</p>`\n\n\n",
            "quiz": [
              {
                "question": "What are the three main parts of an HTML element?",
                "options": [
                  "  A) Start tag, Element attributes, End tag.",
                  "B) Start tag, Element content, End tag.",
                  "C) Opening tag, Element content, Closing tag.",
                  "D) Tag name, Element content, Attribute name."
                ],
                "correctAnswer": 1
              },
              {
                "question": "Which attribute is commonly used with the <a> tag to define hyperlinks?",
                "options": [
                  "   A) alt",
                  " B) src",
                  " C) href",
                  " D) style"
                ],
                "correctAnswer": 2
              },
              {
                "question": "When should single quotes be used for attribute values in HTML?",
                "options": [
                  "A) Single quotes are always preferred.",
                  "B) Single quotes are used when the attribute value contains double quotes.",
                  "C) Single quotes are used for all attribute values.",
                  "D) Single quotes are never used in HTML."
                ],
                "correctAnswer": 1
              }
            ]
          },
          {
            "title": "Your First HTML Paragraph",
            "content": "##By now, you've gained a solid understanding of HTML basics and elements, including attributes. In this lesson, we'll put that knowledge into practice by creating your first paragraph in HTML.\n##Recap of What You've Learned:\n\n1. You've learned about the essential elements of HTML, such as <html>, <head>, <body>, <title>, and <meta>.\n2. You've discovered the significance of the DOCTYPE declaration in specifying the HTML version and ensuring proper rendering.\n3. You've explored HTML elements and their syntax, including start tags, element content, and end tags.\n4. You've delved into the role of attributes in providing additional information about elements, and you've seen various attributes commonly used in HTML elements.\n##Now, let's apply this knowledge to create your first paragraph in HTML!\n\n",
            "lesson": "##Creating Your First Paragraph:\n\nTo create a paragraph in HTML, we use the <p> element. This element allows us to structure text content into paragraphs on our web page.\n\nHere's a simple example of how to create your first paragraph in HTML:\n\n`<!DOCTYPE html>\n<html>\n<head>\n    <title>My First Web Page</title>\n</head>\n<body>\n    <h1>Welcome to My Web Page!</h1>\n    <p>This is my first paragraph in HTML. I'm learning how to create web pages, and it's exciting!</p>\n</body>\n</html>`\n\nIn this example:\n1. We've started with the DOCTYPE declaration (<!DOCTYPE html>) to specify the HTML version.\n2. Inside the <html> element, we've included the <head> section, where we've set the title of our web page using the <title> element.\n3. The <body> element contains the visible content of our web page. We've added an <h1> element for the main heading (don’t panic! you will learn about headings in the subsequent lessons) and a <p> element for our paragraph.\nFeel free to customize the content of the paragraph to reflect your own thoughts, ideas, or any information you'd like to share on your web page.\n\n##Congratulations! You've successfully created your first paragraph in HTML. Keep practicing and exploring new elements and attributes to enhance your web development skills.\n",
            "quiz": [
              {
                "question": "What HTML element is used to create a paragraph?",
                "options": [
                  " A) <paragraph>",
                  " B) <p>",
                  "C) <para>",
                  "D) <pg>"
                ],
                "correctAnswer": 1
              },
              {
                "question": "What is the purpose of the <title> element in an HTML document?",
                "options": [
                  "A) It defines the main heading of the webpage.",
                  "B) It specifies the version of HTML being used.",
                  "C) It provides additional information about an element.",
                  "  D) It sets the title of the webpage displayed in the browser tab."
                ],
                "correctAnswer": 3
              },
              {
                "question": "What is the role of the <body> element in an HTML document?",
                "options": [
                  "A) It contains visible content such as text, images, and links.",
                  "B) It specifies the metadata of the webpage.",
                  "C) It defines the structure of the webpage.",
                  "D) It includes references to external files used in the webpage."
                ],
                "correctAnswer": 0
              }
            ]
          },
          {
            "title": "HTML Text Formatting",
            "content": "##1. Apply inline styling to HTML elements using the style attribute.\n##2. Manipulate the look and feel of elements with CSS properties such as background color, color, font-family, font-size, and text-align.\n\n\n",
            "lesson": "##Styling Syntax Unveiled\nThe magic happens with the syntax: \n`<tagname style=\"property:value;\">`\nHere, tagname could be any HTML element like p, h1, or body. The property is a CSS attribute, and the value is the specific styling you wish to apply.\n\n##Styling in Action\n1. Paint the Background: Set the stage with background-color:\n`<p style=\"background-color: turquoise;\">Imagine a turquoise sea.</p> a turquoise sea.</p>`\n\n2. Text Color Transformation: The color property brings words to life:\n`<h1 style=\"color: coral;\">Coral dreams awaken.</h1>`\n\n\n3. Font Family Fiesta: With font-family, switch up the typography:\n`<p style=\"font-family: 'Georgia', serif;\">Elegance in every word.</p>`\n\n\n4. Size Matters: Adjust font-size to scale the importance:\n`<p style=\"font-size: 120%;\">A bigger, bolder paragraph.</p>`\n\n\n5. Align Your Thoughts: The text-align property lines up your content:\n`<h2 style=\"text-align: right;\">Right-aligned intrigue.</h2>`\n\n\n",
            "quiz": [
              {
                "question": "What is the syntax for applying inline styling to HTML elements using the style attribute?",
                "options": [
                  " A) <tagname style=\"property:value;\">",
                  "B) <tagname style=\"value:property;\">",
                  "C) <tagname property=\"value;\">",
                  "D) <tagname style=\"value\">"
                ],
                "correctAnswer": 0
              },
              {
                "question": "Which CSS property is used to set the background color of an HTML element?",
                "options": [
                  " A) font-family",
                  "   B) text-align",
                  " C) background-color",
                  "  D) color"
                ],
                "correctAnswer": 2
              },
              {
                "question": "How can you center-align text within an HTML element using inline styling?",
                "options": [
                  "A) Using the text-align property with the value \"center\".",
                  " B) Using the align property with the value \"center\".",
                  " C) Using the center property with the value \"text-align\"",
                  "   D) Using the style property with the value \"center\""
                ],
                "correctAnswer": 0
              }
            ]
          },
          {
            "title": "HTML Comments",
            "content": "##1. Adding comments to HTML source code for documentation and organization.\n##2. Utilizing HTML comments to temporarily hide content and debug code.\n\n",
            "lesson": "##Comment Syntax Unveiled:\nComments are encapsulated within <!-- and --> tags in HTML. They provide valuable insights into your code without being displayed in the browser.\n##Comments in Action:\n1. Documenting Code: Add comments to provide context and clarity:\n`<!-- This is a comment -->`\n\n2. Hiding Content: Comments can temporarily hide content from display:\n`<!-- <p>This is another paragraph.</p>--> `\n\n3. Debugging Assistance: Comment out code to troubleshoot issues:\n`<!--\n<p>Commented out paragraph.</p>\n<img src=\"example.jpg\" alt=\"\">-->`\n",
            "quiz": [
              {
                "question": "How are HTML comments encapsulated in HTML code?",
                "options": [
                  "A) [comment] and [/comment]",
                  " B) <!-- and -->",
                  "C) {comment} and {/comment}",
                  "   D) <!-- and //-->"
                ],
                "correctAnswer": 1
              },
              {
                "question": "What is the primary purpose of adding comments to HTML source code?",
                "options": [
                  "   A) To change the appearance of elements.",
                  "B) To provide documentation and organization.",
                  "C) To create hidden elements on the webpage.",
                  "D) To apply styling to specific elements."
                ],
                "correctAnswer": 1
              },
              {
                "question": "In the context of debugging code, how can comments be helpful?",
                "options": [
                  "A) By hiding elements permanently.",
                  "B) By adding visual effects to elements.",
                  "C) By temporarily hiding or commenting out code to troubleshoot issues.",
                  " D) By changing the structure of the HTML document."
                ],
                "correctAnswer": 2
              }
            ]
          },
          {
            "title": "Links, Images in HTML",
            "content": "##How to add links and images to your HTML pages to create interactive and visually appealing content.",
            "lesson": "##Links Unveiled:\nLinks are essential for navigating between web pages. They are represented by the <a> tag and can be text or images.\n\n##Links in Action:\n1. Hyperlinks: Create clickable links with the <a> tag:\n`<a href=\"https://www.example.com/\">Visit Example.com</a>`\n\n\n2. Target Attribute: Specify where the linked document should open:\n`<a href=\"https://www.example.com/\" target=\"_blank\">Visit Example.com</a>`\n\n3. Absolute vs. Relative URLs: Choose between absolute and relative URLs for linking:\n`<a href=\"https://www.example.com/\">Absolute URL</a>`\n`<a href=\"page.html\">Relative URL</a>`\n\n##Images Explored:\nImages enhance the visual appeal of web pages. They are inserted using the <img> tag.\n\n##Images in Action:\n1. Embedding Images: Add images with the <img> tag:\n`<img src=\"image.jpg\" alt=\"Description of image\">`\n\n2. Image Attributes: Define image properties such as width and height:\n`<img src=\"image.jpg\" alt=\"Description of image\" width=\"200\" height=\"150\">`\n",
            "quiz": [
              {
                "question": "What HTML tag is used to create hyperlinks?",
                "options": [
                  "A) <link>",
                  "B) <a>",
                  "C) <href>",
                  "D) <url>"
                ],
                "correctAnswer": 1
              },
              {
                "question": "What attribute is used to define the source (URL) of an image in HTML?",
                "options": [
                  "A) image-src ",
                  "B) link",
                  "C) href",
                  "D) src"
                ],
                "correctAnswer": 3
              },
              {
                "question": "In HTML, what does the alt attribute of the <img> tag specify?",
                "options": [
                  "A) Alignment of the image",
                  "B) Alternate text for the image",
                  "C) Animation duration",
                  "D) Accessible link to the image"
                ],
                "correctAnswer": 1
              },
              {
                "question": "How can you set the width and height of an image in HTML?",
                "options": [
                  "A) Using the <size> tag",
                  "B) By adding a dimension attribute",
                  "C) Using the width and height attributes ",
                  "D) Applying CSS styles directly to the image tag"
                ],
                "correctAnswer": 2
              },
              {
                "question": "Which of the following is an example of a relative URL?",
                "options": [
                  "A) <a href=\"https://www.example.com/\">Absolute URL</a>",
                  "B) <a href=\"page.html\">Relative URL</a> ",
                  "C) <a href=\"https://www.example.com/\">Relative URL</a>",
                  "D) <a href=\"/page.html\">Absolute URL</a>"
                ],
                "correctAnswer": 1
              }
            ]
          },
          {
            "title": "HTML Lists",
            "content": "##1. Different types of lists (unordered, ordered, other)\n##2. How to declare and organize every list",
            "lesson": "##Unordered lists\nAn unordered list starts with the <ul> tag. Each list item starts with the <li> tag.\nThe list items will be marked with bullets by default.\nExample:\n`<ul>\n  <li>Coffee</li>\n  <li>Tea</li>\n  <li>Milk</li>\n</ul> `\nResults\n$\n##Choosing an unordered list item marker\nThe CSS list-style-type property is used to define the style of the list item marker. It can have one of the following values:\n1. disc – Sets the list item marker to a bullet (default) \n2. circle – Sets the list item marker to a circle\n3. square – Sets the list item marker to a square\n4. none – The list items will not be marked\n\n`<ul style=\"list-style-type:square;\">\n  <li>Coffee</li>\n  <li>Tea</li>\n  <li>Milk</li>\n</ul>`\n\nResults:\n$\n\n##Ordered lists\nAn ordered list starts with the <ol> tag. Each list item starts with the <li> tag.\nThe list items will be marked with numbers by default.\n\n\n`<ol>\n  <li>Coffee</li>\n  <li>Tea</li>\n  <li>Milk</li>\n</ol>`\n\n\nResults:\n$\n\n##Choosing an ordered list item marker (the type attribute)\nThe type attribute of the <ol> tag, defines the type of the list item marker:\n1. type=\"1\" – The list items will be numbered with numbers (default)\n2. type=\"A\" – The list items will be numbered with uppercase letters\n3. type=\"a\" – The list items will be numbered with lowercase letters\n4. type=\"I\" – The list items will be numbered with uppercase roman numbers\n5. type=\"i\" – The list items will be numbered with lowercase roman numbers\n\n`<ol type=\"a\">\n  <li>Coffee</li>\n  <li>Tea</li>\n  <li>Milk</li>\n</ol>`\n\nResults:\n$\n\n##Description lists\nA description list is a list of terms, with a description of each term.\nThe <dl> tag defines the description list, the <dt> tag defines the term (name), and the <dd> tag describes each term:\n\n\n`<dl>\n  <dt>Coffee</dt>\n  <dd>- black hot drink</dd>\n  <dt>Milk</dt>\n  <dd>- white cold drink</dd>\n</dl>`\n\n\nResults:\n$\n\n\n\n\n\n",
            "quiz": [
              {
                "question": "Which HTML tag is used to define an unordered list?",
                "options": [
                  "A)  <ol> ",
                  "B) <ul>",
                  "C) <dl>",
                  "D) <li>"
                ],
                "correctAnswer": 1
              },
              {
                "question": "What is the default marker for list items in an unordered list?",
                "options": [
                  "A) Numbers",
                  "B) Uppercase letters",
                  "C) Bullets",
                  "D) Lowercase letters"
                ],
                "correctAnswer": 2
              },
              {
                "question": "Which CSS property is used to define the style of the list item marker in an unordered list?",
                "options": [
                  "A) list-type-style",
                  "B) list-item-marker",
                  "C) list-style-type",
                  "D) marker-style"
                ],
                "correctAnswer": 2
              },
              {
                "question": "How would you declare an unordered list with circle markers?",
                "options": [
                  "A) <ul style=\"list-style-type:square;\">",
                  "B) <ul style=\"list-style-type:disc;\">",
                  "C) <ul style=\"list-style-type:circle;\">",
                  "D) <ul style=\"list-style-type:none;\">"
                ],
                "correctAnswer": 2
              }
            ]
          },
          {
            "title": "HTML Tables",
            "content": "##1. How to declare a table\n##2. Ways to span two columns and rows\n##3. Changing the dimensions of a table\n",
            "lesson": "##HTML Table Tags\n1. <table> – Defines a table\n2. <th> – Defines a header cell in a table\n3. <tr> – Defines a row in a table\n4. <td> – Defines a cell in a table\n5. <caption> –Defines a table caption\n6. <colgroup> – Specifies a group of one or more columns in a table for formatting\n7. <col> – Specifies column properties for each column within a  <colgroup> element\n8. <thead> – Groups the header content in a table\n9. <tbody> – Groups the body content in a table\n10. <tfoot> – Groups the footer content in a table\n\nHTML tables can have different sizes for each column, row or the entire table.\nYou can use the style attribute with the width or height properties to specify the size of a table, row or column.\n\n`<table style=\"width:100%\">\n  <tr>\n    <th style=\"width:70%\">Firstname</th>\n    <th>Lastname</th>\n    <th>Age</th>\n  </tr>\n  <tr>\n    <td>Jill</td>\n    <td>Smith</td>\n    <td>50</td>\n  </tr>\n  <tr>\n    <td>Eve</td>\n    <td>Jackson</td>\n    <td>94</td>\n  </tr>\n</table>`\n\nResults:\n$\n\n\n\nTo make a cell span over multiple columns, use the colspan attribute:\n`<table>\n  <tr>\n    <th colspan=\"2\">Name</th>\n    <th>Age</th>\n  </tr>\n  <tr>\n    <td>Jill</td>\n    <td>Smith</td>\n    <td>43</td>\n  </tr>\n  <tr>\n    <td>Eve</td>\n    <td>Jackson</td>\n    <td>57</td>\n  </tr>\n</table>`\n\nResults:\n$\n\nTo make a cell span over multiple rows, use the rowspan attribute:\n`<table>\n  <tr>\n    <th>Name</th>\n    <td>Jill</td>\n  </tr>\n  <tr>\n    <th rowspan=\"2\">Phone</th>\n    <td>555-1234</td>\n  </tr>\n  <tr>\n    <td>555-8745</td>\n</tr>\n</table>\n`\n\nResults:\n$\n\n",
            "quiz": [
              {
                "question": " Which HTML tag is used to define a table?",
                "options": [
                  "A) <table>",
                  "B) <tr>",
                  "C) <td>",
                  "D) <th>"
                ],
                "correctAnswer": 0
              },
              {
                "question": "How can you specify the size of a table using HTML and CSS?",
                "options": [
                  "A) By using the <size> attribute within the <table> tag",
                  "B) By using the style attribute with width and height properties within the <table> tag",
                  "C) By wrapping the table in a <div> with specific dimensions",
                  "D) By using the size property within the <table> tag"
                ],
                "correctAnswer": 1
              },
              {
                "question": "What attribute is used to make a cell span over multiple columns in an HTML table? ",
                "options": [
                  "A) colspan",
                  "B) rowspan",
                  "C) span",
                  "D) merge"
                ],
                "correctAnswer": 0
              },
              {
                "question": "Which HTML tag is used to define a table caption?",
                "options": [
                  "A) <caption>",
                  "B) <colgroup>",
                  "C) <thead>",
                  "D) <tfoot>"
                ],
                "correctAnswer": 0
              },
              {
                "question": "What HTML tag is used to group the header content in a table?",
                "options": [
                  "A) <thead>",
                  "B)  <tbody>",
                  "C) <tfoot>",
                  "D) <colgroup>"
                ],
                "correctAnswer": 0
              },
              {
                "question": "How can you make a cell span over multiple rows in an HTML table?",
                "options": [
                  "A) By using the rowspan attribute",
                  "B) By using the rowmerge attribute",
                  "C) By wrapping multiple <td> tags within a single <tr> tag",
                  "D) By using the colspan attribute"
                ],
                "correctAnswer": 0
              }
            ]
          },
          {
            "title": "HTML Blocks, Inline and Divs",
            "content": "##1. What is a block-level element\n##2. What are the inline elements\n##3. How do declare a div  \n",
            "lesson": "##Blocks\n\nA block-level element always starts on a new line, and the browsers automatically add some space (a margin) before and after the element.\nA block-level element always takes up the full width available.\n\nTwo commonly used block elements are: <p> and <div>.\nThe <p> element defines a paragraph in an HTML document.\nThe <div> element defines a division or a section in an HTML document.\n\n\n`<p>Hello World</p>\n<div>Hello World</div>\n`\n\nResults:\n$\n\n##Inline Elements\nAn inline element does not start on a new line.\nAn inline element only takes up as much width as necessary.\nThis is a <span> element inside a paragraph.\n\n`<span>Hello World</span>`\n\nResults:\n$\n\n##The <div> Element\nThe <div> element is often used as a container for other HTML elements.\nThe <div> element has no required attributes, but style, class and id are common.\nWhen used together with CSS, the <div> element can be used to style blocks of content.\n\n\n`<div style=\"background-color:black;color:white;padding:20px;\">\n  <h2>London</h2>\n  <p>London is the capital city of England. It is the most populous city in the United Kingdom, with a metropolitan area of over 13 million inhabitants.</p>\n</div>`\n\n\nResults:\n$\n\n\n",
            "quiz": [
              {
                "question": "Which of the following statements about block-level elements is true?",
                "options": [
                  "A) They always start on the same line as the previous element.",
                  "B) They only take up as much width as necessary.",
                  "C) Browsers do not add any space (margin) before or after block-level elements.",
                  "D) They always start on a new line, and browsers automatically add space before and after them."
                ],
                "correctAnswer": 3
              },
              {
                "question": "Which HTML element is commonly used as a container for other HTML elements?",
                "options": [
                  "A)  <p>",
                  "B) <span>",
                  "C)  <div>",
                  "D)  <section>"
                ],
                "correctAnswer": 2
              },
              {
                "question": "What is the purpose of the <span> element?",
                "options": [
                  "A) To define a paragraph in an HTML document.",
                  "B) To style blocks of content.",
                  "C) To start on a new line.",
                  "D) To group inline elements for styling purposes."
                ],
                "correctAnswer": 3
              },
              {
                "question": "What attributes are commonly used with the <div> element?",
                "options": [
                  "A) href and src",
                  "B)  style, class, and id",
                  "C)  type and value",
                  "D)  colspan and rowspan"
                ],
                "correctAnswer": 1
              }
            ]
          }
        ],
        "css": [],
        "js": [
          {
            "title": "ДЕМО УРОК",
            "content": "# Знали ли вы, что лягушки могут прыгать?\n$https://i.natgeofe.com/k/8fa25ea4-6409-47fb-b3cc-4af8e0dc9616/red-eyed-tree-frog-on-leaves-3-2_3x4.jpg\n## лягушки - очень хорошие животные, потому что они:\n- Могут прыгать высоко.\n- Могут не очень высоко прыгать.\n- Могут издавать кряк-кряк.\n\n## как работает мозг лягушки:\nЛягушки - очень умные большие мозги, которые могут делать многое, вот как работает их мозг:\n`while(!голоден && !сонлив) {\n  if(энергия > 0) {\n    прыгать();\n    крякать();\n  } else {\n    спать();\n  }\n}`",
            "lesson": "# Знали ли вы, что лягушки могут прыгать?\n$https://i.natgeofe.com/k/8fa25ea4-6409-47fb-b3cc-4af8e0dc9616/red-eyed-tree-frog-on-leaves-3-2_3x4.jpg\n## лягушки - очень хорошие животные, потому что они:\n- Могут прыгать высоко.\n- Могут не очень высоко прыгать.\n- Могут издавать кряк-кряк.\n\n## как работает мозг лягушки:\nЛягушки - очень умные большие мозги, которые могут делать многое, вот как работает их мозг:\n`while(!голоден && !сонлив) {\n  if(энергия > 0) {\n    прыгать();\n    крякать();\n  } else {\n    спать();\n  }\n}`",
            "quiz": []
          }
        ],
        "python": [
          {
            "title": "Gay",
            "content": "#Gay\n##MiniGay\n",
            "lesson": "# Blank lesson",
            "quiz": [
              {
                "question": "GAy",
                "options": [
                  "Me",
                  "You"
                ],
                "correctAnswer": 1
              }
            ]
          },
          {
            "title": "Python Syntax",
            "content": "##Python Syntax\n#Python syntax is designed to be clear and concise, making it easy to write and understand code. Statements are typically written on separate lines, and indentation is used to indicate code blocks.\n'if 5 > 2:\n    print(\"5 is greater than 2\")'\n",
            "lesson": "Application: Pay attention to indentation when writing Python code. Proper indentation is crucial for readability and ensures that your code functions as intended.",
            "quiz": [
              {
                "question": "How do we denote a multi-line block of code in Python?",
                "options": [
                  " Using square brackets []",
                  " Using parentheses ()",
                  "Using curly braces {}",
                  " Using indentation"
                ],
                "correctAnswer": 3
              }
            ]
          },
          {
            "title": "Python Syntax",
            "content": "#Python Syntax\n##Python syntax is designed to be clear and concise, making it easy to write and understand code. Statements are typically written on separate lines, and indentation is used to indicate code blocks.\n",
            "lesson": "##Python Indentation\nIndentation refers to the spaces at the beginning of a code line.\n\nWhere in other programming languages the indentation in code is for readability only, the indentation in Python is very important.\n\nPython uses indentation to indicate a block of code.\nThe number of spaces is up to you as a programmer, the most common use is four, but it has to be at least one.\nYou have to use the same number of spaces in the same block of code, otherwise Python will give you an error\n##Comments\nPython has commenting capability for the purpose of in-code documentation.\n`if 5 > 2:\n print(\"Five is greater than two!\") \nif 5 > 2:\n        print(\"Five is greater than two!\")`\n\nComments start with a #, and Python will render the rest of the line as a comment:\n`#This is a comment.\nprint(\"Hello, World!\")`\n#Python Variables\nIn Python, variables are created when you assign a value to it:\n`x = 5\ny = \"Hello, World!\"`\n#Python has no command for declaring a variable.\n#You will learn more about variables in the Python Variables chapter.",
            "quiz": [
              {
                "question": "How do we denote a multi-line block of code in Python?",
                "options": [
                  " Using square brackets []",
                  " Using parentheses ()",
                  "Using curly braces {}",
                  " Using indentation"
                ],
                "correctAnswer": 3
              },
              {
                "question": "What symbol do we use to indicate comments in Python?",
                "options": [
                  "//",
                  "#",
                  "%%",
                  "/* */",
                  "#"
                ],
                "correctAnswer": 1
              }
            ]
          },
          {
            "title": "Python Variables",
            "content": "#Python Variables\n##Variables are used to store data values in Python. They are assigned using the equals sign (=) and can hold different types of data, such as numbers, strings, or booleans.",
            "lesson": "#Variables are containers for storing data values.\n##Creating Variables\nPython has no command for declaring a variable.\nA variable is created the moment you first assign a value to it.\n`x = 5\ny = \"John\"\nprint(x)\nprint(y)`\nVariables do not need to be declared with any particular type, and can even change type after they have been set.\n##If you want to specify the data type of a variable, this can be done with casting.\n`x = str(3)    # x will be '3'\ny = int(3)    # y will be 3\nz = float(3)  # z will be 3.0`\n##Get the Type\nYou can get the data type of a variable with the type() function.\n`x = 5\ny = \"John\"\nprint(type(x))\nprint(type(y))`\n##Single or Double Quotes?\nString variables can be declared either by using single or double quotes:\n`x = \"John\"\n# is the same as\nx = 'John'`",
            "quiz": [
              {
                "question": "What data type is used for storing whole numbers in Python?",
                "options": [
                  "str",
                  "int",
                  "float",
                  " bool"
                ],
                "correctAnswer": 1
              },
              {
                "question": "What is the result of the following code snippet?(x = 5 y = \"Hello\" print(x + y))",
                "options": [
                  "5Hello",
                  "Hello5",
                  "TypeError",
                  "10"
                ],
                "correctAnswer": 2
              }
            ]
          },
          {
            "title": "Python Operators",
            "content": "#Python Operators\n##Operators are symbols used to perform operations on variables and values. Python supports various types of operators, including arithmetic, comparison, logical, and assignment operators.",
            "lesson": "##Operators are used to perform operations on variables and values.\n\nIn the example below, we use the + operator to add together two values:\n`print(10 + 5)`\n\nPython divides the operators in the following groups:\n\n-Arithmetic operators\n-Assignment operators\n-Comparison operators\n-Logical operators\n-Identity operators\n-Membership operators\n-Bitwise operators\n`# Arithmetic operators\nx = 5 + 3\ny = 5 * 3\nz = 5 / 2\n# Comparison operators\na = 5 > 2\nb = 5 == 2\nc = 5 != 2\n# Logical operators\np = True and False\nq = True or False\n# Assignment operators\nx += 1  # Equivalent to x = x + 1`\n##Python Comparison Operators\n==\tEqual\tx == y\t\n!=\tNot equal\tx != y\t\n>\tGreater than\tx > y\t\n<\tLess than\tx < y\t\n>=\tGreater than or equal to\tx >= y\t\n<=\tLess than or equal to\tx <= y\n##Python Arithmetic Operators\n+\tAddition\tx + y\t\n-\tSubtraction\tx - y\t\n*\tMultiplication\tx * y\t\n/\tDivision\tx / y\t\n%\tModulus\tx % y\t\n**\tExponentiation\tx ** y\t\n//\tFloor division\tx // y\n##Python Bitwise Operators\n& \tAND\tSets each bit to 1 if both bits are 1\tx & y\t\n|\tOR\tSets each bit to 1 if one of two bits is 1\tx | y\t\n^\tXOR\tSets each bit to 1 if only one of two bits is 1\tx ^ y\t\n~\tNOT\tInverts all the bits\t~x\t\n<<\tZero fill left shift\tShift left by pushing zeros in from the right and let the leftmost bits fall off\tx << 2\t\n>>\tSigned right shift\tShift right by pushing copies of the leftmost bit in from the left, and let the rightmost bits fall off\tx >> 2\n##Operator Precedence\n`print((6 + 3) - (6 + 3))`\nParentheses has the highest precedence, meaning that expressions inside parentheses must be evaluated first:\nMultiplication * has higher precedence than addition +, and therefor multiplications are evaluated before additions:\n`print(100 + 5 * 3)`\n#The precedence order is described in the table below, starting with the highest precedence at the top:\n\n()\tParentheses\t\n**\tExponentiation\t\n+x  -x  ~x\tUnary plus, unary minus, and bitwise NOT\t\n*  /  //  %\tMultiplication, division, floor division, and modulus\t\n+  -\tAddition and subtraction\t\n<<  >>\tBitwise left and right shifts\t\n&\tBitwise AND\t\n^\tBitwise XOR\t\n|\tBitwise OR\t\n==  !=  >  >=  <  <=  is  is not  in  not in \tComparisons, identity, and membership operators\t\nnot\tLogical NOT\t\nand\tAND\t\nor\tOR",
            "quiz": [
              {
                "question": "What is the result of 5 + 2?",
                "options": [
                  "7",
                  "52",
                  "TypeError",
                  "None"
                ],
                "correctAnswer": 0
              },
              {
                "question": "What operator is used for exponentiation in Python?",
                "options": [
                  "^",
                  " **",
                  "//",
                  "%"
                ],
                "correctAnswer": 1
              }
            ]
          },
          {
            "title": "Python Lists, Tuples, Sets",
            "content": "#Python Lists, Tuples, Sets\n##Lists, tuples, and sets are data structures used to store collections of items in Python. Lists are mutable, ordered collections, while tuples are immutable. Sets are unordered collections with no duplicate elements.\n",
            "lesson": "`# List\nfruits = [\"apple\", \"banana\", \"cherry\"]\n# Tuple\ncolors = (\"red\", \"green\", \"blue\")\n# Set\nnumbers = {1, 2, 3, 4, 5}`\n##List\nLists are used to store multiple items in a single variable.\n\nLists are one of 4 built-in data types in Python used to store collections of data, the other 3 are Tuple, Set, and Dictionary, all with different qualities and usage.\n\nLists are created using square brackets:\n`thislist = [\"apple\", \"banana\", \"cherry\"]\nprint(thislist)`\n##List Items\nList items are ordered, changeable, and allow duplicate values.\n\nList items are indexed, the first item has index [0], the second item has index [1] etc.\n##Ordered\nWhen we say that lists are ordered, it means that the items have a defined order, and that order will not change.\n\nIf you add new items to a list, the new items will be placed at the end of the list.\n##Allow Duplicates\nSince lists are indexed, lists can have items with the same value:\n`thislist = [\"apple\", \"banana\", \"cherry\", \"apple\", \"cherry\"]\nprint(thislist)`\n##List Length\n`thislist = [\"apple\", \"banana\", \"cherry\"]\nprint(len(thislist))`\n",
            "quiz": [
              {
                "question": "Which data type in Python is ordered and mutable?",
                "options": [
                  "list",
                  "tuple",
                  "set",
                  "dictionary"
                ],
                "correctAnswer": 0
              },
              {
                "question": "What is the correct syntax for creating a tuple?",
                "options": [
                  "[1, 2, 3]",
                  "(1, 2, 3)",
                  "{1, 2, 3}",
                  "{1: 'a', 2: 'b', 3: 'c'}"
                ],
                "correctAnswer": 1
              }
            ]
          },
          {
            "title": "Python Dictionaries",
            "content": "\n#Python Dictionaries\n##Dictionaries are data structures used to store key-value pairs in Python. Each key is associated with a value, allowing for efficient lookup and retrieval of data.\n##Use dictionaries to store and retrieve data in key-value pairs. Dictionaries are useful for representing structured data and organizing information in your programs.",
            "lesson": "##Dictionaries are used to store data values in key:value pairs.\n\nA dictionary is a collection which is ordered*, changeable and do not allow duplicates.\n`thisdict = {\n  \"brand\": \"Ford\",\n  \"model\": \"Mustang\",\n  \"year\": 1964\n}\nprint(thisdict)`\n##Dictionary Items\nDictionary items are ordered, changeable, and do not allow duplicates.\n\nDictionary items are presented in key:value pairs, and can be referred to by using the key name.\n`thisdict = {\n  \"brand\": \"Ford\",\n  \"model\": \"Mustang\",\n  \"year\": 1964\n}\nprint(thisdict[\"brand\"])`\n##Ordered or Unordered?\nWhen we say that dictionaries are ordered, it means that the items have a defined order, and that order will not change.\n\nUnordered means that the items do not have a defined order, you cannot refer to an item by using an index.\n##Changeable\nDictionaries are changeable, meaning that we can change, add or remove items after the dictionary has been created.\n##Duplicates Not Allowed\nDictionaries cannot have two items with the same key:\n\n`thisdict = {\n  \"brand\": \"Ford\",\n  \"model\": \"Mustang\",\n  \"year\": 1964,\n  \"year\": 2020\n}\nprint(thisdict)`\n\n",
            "quiz": [
              {
                "question": "How are items stored in a dictionary?",
                "options": [
                  "Ordered sequence",
                  "Random sequence",
                  "Key-value pairs",
                  "Index-value pairs"
                ],
                "correctAnswer": 2
              },
              {
                "question": "What happens if you try to access a key that does not exist in a dictionary?",
                "options": [
                  "It returns None",
                  " It returns an empty string",
                  " It raises a KeyError",
                  " It returns False"
                ],
                "correctAnswer": 2
              }
            ]
          },
          {
            "title": "Python If…Else",
            "content": "#Python If…Else\n## If...else statements are used to make decisions in Python based on certain conditions. They allow your program to execute different code blocks depending on whether a condition is true or false.\n##Use if...else statements to control the flow of your program and perform different actions based on specific conditions. They are essential for implementing logic and making your programs more dynamic.\n",
            "lesson": "#Python Conditions and If statements\nPython supports the usual logical conditions from mathematics:\nEquals: a == b\nNot Equals: a != b\nLess than: a < b\nLess than or equal to: a <= b\nGreater than: a > b\nGreater than or equal to: a >= b\n`Example:\nx = 5\nif x > 3:\n    print(\"x is greater than 3\")\nelse:\n    print(\"x is less than or equal to 3\")`\n#Indentation\nPython relies on indentation (whitespace at the beginning of a line) to define scope in the code. Other programming languages often use curly-brackets for this purpose.\n\n##Elif\nThe elif keyword is Python's way of saying \"if the previous conditions were not true, then try this condition\".\n`a = 33\nb = 33\nif b > a:\n  print(\"b is greater than a\")\nelif a == b:\n  print(\"a and b are equal\")`\n\n##Else\nThe else keyword catches anything which isn't caught by the preceding conditions.\n`a = 200\nb = 33\nif b > a:\n  print(\"b is greater than a\")\nelif a == b:\n  print(\"a and b are equal\")\nelse:\n  print(\"a is greater than b\")`\n\nIn this example a is greater than b, so the first condition is not true, also the elif condition is not true, so we go to the else condition and print to screen that \"a is greater than b\".\n\nYou can also have an else without the elif:\n\n`a = 200\nb = 33\nif b > a:\n  print(\"b is greater than a\")\nelse:\n  print(\"b is not greater than a\")`\n\n\n##Short Hand If\nIf you have only one statement to execute, you can put it on the same line as the if statement.\n`if a > b: print(\"a is greater than b\")`\n\n##And\nThe and keyword is a logical operator, and is used to combine conditional statements:\n`a = 200\nb = 33\nc = 500\nif a > b and c > a:\n  print(\"Both conditions are True\")`\n##Or\nThe or keyword is a logical operator, and is used to combine conditional statements:\n`a = 200\nb = 33\nc = 500\nif a > b or a > c:\n  print(\"At least one of the conditions is True\")`\n\n##Not\nThe not keyword is a logical operator, and is used to reverse the result of the conditional statement:\n`a = 33\nb = 200\nif not a > b:\n  print(\"a is NOT greater than b\")`\n\n#Nested If\nYou can have if statements inside if statements, this is called nested if statements.\n`x = 41\n\nif x > 10:\n  print(\"Above ten,\")\n  if x > 20:\n    print(\"and also above 20!\")\n  else:\n    print(\"but not above 20.\")`\n",
            "quiz": [
              {
                "question": "What keyword is used to start an if statement in Python?",
                "options": [
                  "then",
                  "elif",
                  " else",
                  "if"
                ],
                "correctAnswer": 3
              },
              {
                "question": "What happens if no conditions in an if...elif...else statement are True?",
                "options": [
                  "The program crashes",
                  "The else block is executed",
                  "The program exits",
                  "None of the above"
                ],
                "correctAnswer": 1
              }
            ]
          },
          {
            "title": "Python While Loops",
            "content": "#Python While Loops\n## While loops are used to execute a block of code repeatedly as long as a specified condition is true. They continue iterating until the condition becomes false.\n##Use while loops when you need to repeatedly execute a block of code until a certain condition is met. Be cautious to avoid infinite loops by ensuring that the condition eventually becomes false.",
            "lesson": "`Example:\ni = 0\nwhile i < 5:\n    print(i)\n    i += 1`\n\n##Python Loops\nPython has two primitive loop commands:\n\nwhile loops\nfor loops\n\n##The break Statement\nWith the break statement we can stop the loop even if the while condition is true:\n`i = 1\nwhile i < 6:\n  print(i)\n  if i == 3:\n    break\n  i += 1`\n\n##The continue Statement\n`i = 0\nwhile i < 6:\n  i += 1\n  if i == 3:\n    continue\n  print(i)`\n\n\n##The else Statement\nWith the else statement we can run a block of code once when the condition no longer is true:\n`i = 1\nwhile i < 6:\n  print(i)\n  i += 1\nelse:\n  print(\"i is no longer less than 6\")`\n\n",
            "quiz": [
              {
                "question": "What keyword is used to start a while loop in Python?",
                "options": [
                  "for",
                  "while",
                  "loop",
                  "until"
                ],
                "correctAnswer": 1
              },
              {
                "question": "How do you exit a while loop prematurely?",
                "options": [
                  " Using the break keyword",
                  "Using the continue keyword",
                  "Using the return keyword",
                  "None of the above"
                ],
                "correctAnswer": 0
              }
            ]
          }
        ],
        "c": [],
        "cpp": []
      }
    },
    "ro": {
      "elements": {
        "langRegisterForm": "Formular de Înregistrare",
        "langUsername": "Nume de Utilizator",
        "langMandatory": "(obligatoriu)",
        "langPassword": "Parolă",
        "langMandatory2": "(obligatoriu)",
        "langRegister": "Înregistrare",
        "buttonStart": "start",
        "langSFX": "Efecte Sonore",
        "titleSettings": "Limbi",
        "langLogOut": "Deconectare",
        "langHome": "Acasă",
        "swipe": "Glisează",
        "langStats": "Statistici",
        "langAchievements": "Realizări",
        "langGiga": "GigaChad",
        "langTask1": "Trebuie să obții 100 de puncte de experiență",
        "langCrazy": "Ești nebun",
        "langTask2": "Trebuie să cheltuiești 100 de diamante",
        "langDesigner": "Dl./Dna. Designer",
        "langTask3": "Trebuie să termini 5 lecții de CSS",
        "langDoom": "Doom...",
        "langTaxt4": "Trebuie să termini toate cursurile",
        "langHomeProfile": "Acasă",
        "title": "Ce vei descoperi",
        "langLessons": "Lecții",
        "langStartLesson": "Începe lecția >",
        "langIntro": "< Introducere",
        "langQuizBtn": "Quiz >",
        "title2": "Vrei să începi quiz-ul?",
        "langBackBtn2": "< Înapoi",
        "langStartIdk": "Start >",
        "langAnswers": "Răspunsuri:",
        "langConnection": "Verificați conexiunea dvs. la internet..."
      },
      "categories": {
        "html": [
          {
            "title": "Bazele HTML",
            "content": "# Introducere\nHTML, coloana vertebrala a dezvoltarii web, este un limbaj de marcaj folosit pentru a structura si prezenta continutul pe internet. Foloseste taguri inchise in paranteze unghiulare pentru a defini elementele dintr-un document.\n\n## Intelegerea Tagurilor si Elementelor\nTagurile sunt blocurile de constructie ale HTML-ului, reprezentand elemente precum antete, paragrafe, imagini si linkuri. Fiecare tag serveste un scop specific in formatarea si organizarea continutului.\n\n## Structura de Baza a Documentului HTML\nUn document HTML tipic incepe cu o declaratie de tip de document (`<!DOCTYPE html>`), urmata de un element HTML (`<html>`), care contine structura documentului in sectiunile `<head>` si `<body>`.",
            "lesson": "# lectia ta va fi aici",
            "quiz": [
              {
                "question": "Cum iti merge astazi?",
                "options": [
                  "FOARTE RAU",
                  "rau",
                  "asa si asa",
                  "bine",
                  "UIMITOR"
                ],
                "correctAnswer": 4
              },
              {
                "question": "Cum este mama ta?",
                "options": [
                  "FOARTE GREA",
                  "Grea",
                  "Grasa",
                  "Prea grasa",
                  "EXTREM DE GRASA"
                ],
                "correctAnswer": 4
              },
              {
                "question": "LOOOOL AI SPUS CHIAR CA MAMA TA E GRASA??",
                "options": [
                  "...",
                  "DA LOL",
                  "Ea grasa",
                  "Nu, tu gras",
                  "Imi plac grasele"
                ],
                "correctAnswer": 1
              },
              {
                "question": "Bruh.. oricum, cati ani ai?",
                "options": [
                  "10 ani",
                  "3.14 ani",
                  "Abia m-am nascut",
                  "Mama mea grasa",
                  "Da"
                ],
                "correctAnswer": 3
              }
            ]
          },
          {
            "title": "Structura Documentului",
            "content": "# Anatomia unui Document HTML\nUn document HTML este alcatuit din diverse elemente, inclusiv antete, paragrafe, liste si div-uri, care sunt structurate pentru a transmite informatii intr-un mod logic si ierarhic.\n\n## Antete si Paragrafe\nAntetele, indicate de tagurile `<h1>` pana la `<h6>`, ofera structura ierarhica a continutului, `<h1>` fiind cel mai important. Paragrafele, definite de tagul `<p>`, separa textul in blocuri distincte.\n\n## Divizii si Spatii\nDiviziile (`<div>`) sunt elemente de container folosite pentru a grupa si stiliza continutul, in timp ce spatii (`<span>`) sunt elemente inline folosite pentru a aplica stiluri la portiuni specifice de text.",
            "lesson": "# acesta este titlul\n## acesta este subtitlul\nacesta este un paragraf aleatoriu salut acolo omg lol lmao xd asta e super tare ahahha lmao.\n# un alt titlu\nVreau sa mananc acest tort omg\n`\nconsole.log(\"nu stiu\");\nfor(int i = 0; i < 3; i++) {\n  console.log(i);\n}\n\n`",
            "quiz": [
              {
                "question": "Cum iti merge astazi?",
                "options": [
                  "FOARTE RAU",
                  "rau",
                  "asa si asa",
                  "bine",
                  "UIMITOR"
                ],
                "correctAnswer": 4
              },
              {
                "question": "Cum este mama ta?",
                "options": [
                  "FOARTE GREA",
                  "Grea",
                  "Grasa",
                  "Prea grasa",
                  "EXTREM DE GRASA"
                ],
                "correctAnswer": 4
              },
              {
                "question": "LOOOOL AI SPUS CHIAR CA MAMA TA E GRASA??",
                "options": [
                  "...",
                  "DA LOL",
                  "Ea grasa",
                  "Nu, tu gras",
                  "Imi plac grasele"
                ],
                "correctAnswer": 1
              },
              {
                "question": "Bruh.. oricum, cati ani ai?",
                "options": [
                  "10 ani",
                  "3.14 ani",
                  "Abia m-am nascut",
                  "Mama mea grasa",
                  "Da"
                ],
                "correctAnswer": 3
              }
            ]
          },
          {
            "title": "Formatarea Textului",
            "content": "# Text Gras si Italic\nTextul poate fi accentuat folosind tagurile bold (`<strong>`) sau italic (`<em>`) pentru a indica importanta sau accentul, respectiv.\n\n## Rupturi de Linie si Linii Orizontale\nRupturile de linie (`<br>`) sunt folosite pentru a crea rupturi de linie in paragrafe, in timp ce liniile orizontale (`<hr>`) creeaza separatii vizuale intre sectiunile de continut.\n\n## Text Preformatat\nTagul `<pre>` pastreaza formatarea textului, inclusiv rupturile de linie si spatiile albe, facandu-l potrivit pentru afisarea fragmentelor de cod sau a poeziilor.",
            "lesson": "# lectia ta va fi aici",
            "quiz": []
          },
          {
            "title": "Linkuri si Ancore",
            "content": "# Crearea Hiperlinkurilor\nHiperlinkurile sunt esentiale pentru conectarea paginilor web. Ele sunt create folosind tagul `<a>` (ancora), iar atributul `href` specifica URL-ul paginii legate.\n\n## Linkuri catre Site-uri Externe\nPentru a face legatura catre site-uri externe, atributul `href` contine URL-ul complet al paginii de destinatie. Utilizatorii pot da clic pe aceste linkuri pentru a naviga la site-ul specificat.\n\n## Tagurile Ancorelor si Linkuri Interne\nTagurile ancorelor pot fi, de asemenea, utilizate pentru a crea linkuri interne in aceeasi pagina web. Acest lucru se realizeaza setand atributul `href` la ID-ul altui element de pe pagina, permitand utilizatorilor sa sara la o sectiune specifica.",
            "lesson": "# lectia ta va fi aici",
            "quiz": []
          },
          {
            "title": "Imagini si Media",
            "content": "# Incorporarea Imaginilor\nImaginile pot fi incorporate in paginile web folosind tagul `<img>`. Atributul `src` specifica calea catre fisierul de imagine, in timp ce atributul `alt` furnizeaza text alternativ in scopuri de accesibilitate.\n\n## Adaugarea Audio si Video\nContinutul audio si video poate imbunatati implicarea utilizatorului. Acestea sunt adaugate paginilor web folosind tagurile `<audio>` si `<video>`, respectiv. Aceste taguri includ atribute precum `src` pentru specificarea fisierului media si controls pentru redarea.\n\n## Text Alternativ si Accesibilitate\nFurnizarea de text alternativ pentru imagini folosind atributul `alt` asigura ca utilizatorii cu deficiente de vedere pot intelege continutul. De asemenea, imbunatateste optimizarea pentru motoarele de cautare prin furnizarea de context pentru imagine.",
            "lesson": "# lectia ta va fi aici",
            "quiz": []
          },
          {
            "title": "Liste in HTML",
            "content": "# Liste Ordonate\nListele ordonate (`<ol>`) sunt folosite pentru elemente cu o secventa sau ordine specifica. Fiecare element al listei (`<li>`) este numerotat automat de catre browser.\n\n## Liste Neordonate\nListele neordonate (`<ul>`) sunt folosite pentru elemente fara o ordine particulara. Bule sau alte marcaje sunt folosite pentru a indica fiecare element al listei (`<li>`).\n\n## Liste de Definitii\nListele de definitii (`<dl>`) constau din termeni (`<dt>`) si definitiile lor (`<dd>`). Ele sunt folosite in mod obisnuit pentru glosare sau dictionare.",
            "lesson": "# lectia ta va fi aici",
            "quiz": []
          },
          {
            "title": "Tabele in HTML",
            "content": "# Crearea Tabelului\nTabelele sunt structurate folosind tagul `<table>`, cu randuri definite de tagurile `<tr>` si celule in fiecare rand definite de tagurile `<td>`.\n\n## Randuri si Coloane ale Tabelului\nRandurile (`<tr>`) si coloanele (`<td>`) formeaza structura de baza a unui tabel. Taguri suplimentare precum `<th>` sunt folosite pentru antetele tabelului pentru a specifica titlurile de coloane.\n\n## Antete si Subsoluri ale Tabelului\nAntetele tabelului (`<th>`) pot fi folosite pentru a defini antetele pentru randuri sau coloane, in timp ce tagul `<tfoot>` specifica un subsol pentru un tabel.",
            "lesson": "# lectia ta va fi aici",
            "quiz": []
          },
          {
            "title": "Formulare si Intrari",
            "content": "# Crearea Formularilor HTML\nFormularele sunt create folosind tagul `<form>`, care contine diverse elemente de intrare cum ar fi campuri de text, casute de bifat, butoane radio si meniuri derulante.\n\n## Elemente de Intrare ale Formularului\nElementele de intrare colecteaza date de la utilizator. Acestea includ campuri de text (`<input type=\"text\">`), casete de bifat (`<input type=\"checkbox\">`), butoane radio (`<input type=\"radio\">`) si meniuri derulante (`<select>`).\n\n## Trimiterea Datelor Formularului\nDatele formularului sunt trimise unui server pentru procesare folosind atributul `action` al tagului `<form>`, care specifica URL-ul unde datele formularului ar trebui trimise.",
            "lesson": "# lectia ta va fi aici",
            "quiz": []
          },
          {
            "title": "HTML Semantic",
            "content": "# Introducere in Elementele Semantice HTML\nElementele HTML semantice ofera semnificatie continutului in afara doar de prezentare. Ele includ elemente precum `<header>`, `<footer>`, `<nav>`, `<article>`, `<section>` si `<aside>`.\n\n## Elemente de Antet si Subsol\n`<header>` si `<footer>` definesc sectiunile superioare si inferioare ale unei pagini web, respectiv. Ele contin in mod obisnuit linkuri de navigare, informatii despre drepturile de autor si alte metadate.\n\n## Elemente de Sectiune\nElementele de sectiune precum `<section>`, `<article>`, `<nav>` si `<aside>` sunt folosite pentru a impartasi continutul unei pagini web in sectiuni semnificative, imbunatatind accesibilitatea si SEO.",
            "lesson": "# lectia ta va fi aici",
            "quiz": []
          },
          {
            "title": "Caracteristici HTML5",
            "content": "# Introducere in HTML5\nHTML5 introduce noi caracteristici si elemente pentru dezvoltarea web moderna, inclusiv suport pentru multimedia, elemente semantice si forme si API-uri imbunatatite.\n\n## Grafica Canvas si SVG\nElementul `<canvas>` permite redarea dinamica a graficii folosind JavaScript, in timp ce SVG (Scalable Vector Graphics) ofera imagini si animatii independente de rezolutie.\n\n## Redare Audio si Video\nHTML5 introduce suport nativ pentru redarea audio si video folosind elementele `<audio>` si `<video>`. Acest lucru elimina necesitatea de pluginuri terte precum Flash.",
            "lesson": "# lectia ta va fi aici",
            "quiz": []
          },
          {
            "title": "HTML Basics",
            "content": "hello",
            "lesson": "hhello",
            "quiz": [
              {
                "question": "What is the purpose of the DOCTYPE declaration in an HTML document?",
                "options": [
                  "A) It specifies the version of JavaScript used.",
                  "B) It helps web browsers render the page correctly.",
                  "C) It defines the layout and design of the webpage.",
                  "D) It determines the character encoding of the webpage."
                ],
                "correctAnswer": 1
              },
              {
                "question": "Which tag marks the beginning and end of an HTML webpage and should always be closed at the end of the document?",
                "options": [
                  "A) <head>",
                  "B) <body>",
                  "C) <title>",
                  "D) <html>"
                ],
                "correctAnswer": 3
              },
              {
                "question": "How can you view the HTML source code of a webpage?",
                "options": [
                  "A) Press CTRL + U",
                  "B) Right-click and select \"View Page Source\"",
                  "C) Both A and B",
                  "D) None of the above"
                ],
                "correctAnswer": 2
              }
            ]
          },
          {
            "title": "HTML Basics",
            "content": "##Welcome to the HTML Basics lesson! In this lesson, we'll cover the essential elements of HTML to get you started on your web development journey.\n\nHTML, which stands for HyperText Markup Language, is the standard language used to create and design web pages.\nIn this lesson, you'll discover:\n\n1. The purpose and usage of the DOCTYPE declaration.\n2. Basic HTML structure and elements.\n3. How to view the HTML source code of a web page.\n",
            "lesson": "##Understanding the DOCTYPE Declaration\n\nThe DOCTYPE declaration is an essential part of an HTML document. It specifies the version of HTML being used and helps web browsers render the page correctly. Here's an example of the DOCTYPE declaration for HTML5:\n\n`<!DOCTYPE html>`\n\nThis declaration should be placed at the beginning of every HTML document to ensure compatibility and proper rendering.\n\n##Basic HTML Structure\n\nAn HTML document consists of several basic elements, including:\n\n1. <html>: This tag marks the beginning and end of your webpage. All other elements are placed inside it. It should always be closed at the end of the document, like this <\\html>.\n\n2. <head>: Within this tag, you include important information about your webpage, like its title, keywords, and references to other files.  It should be closed -<\\head>- before the <body> tag starts.\n\n3. <body>: Inside this tag, you put all the content that users see when they visit your webpage, like text, images, and links. It should be closed at the end of the document - <\\body>.\n\n4. <title>: This tag sets the title of your webpage, which appears at the top of the browser window or tab. It's self-contained within the <head> section.\n\n5. <meta>: These tags provide additional information about your webpage, such as its character encoding and viewport settings. They are self-closing tags and do not require a separate closing tag.\n\n##Viewing HTML Source Code\n\nEver stumbled upon a webpage that made you go, \"Wow, how did they do that?\" Let's unlock the mystery!\nView HTML Source Code:\nClick CTRL + U in an HTML page, or right-click on the page and select \"View Page Source\". This will open a new tab containing the HTML source code of the page.\n\n\n\n",
            "quiz": [
              {
                "question": "What is the purpose of the DOCTYPE declaration in an HTML document?",
                "options": [
                  "A) It specifies the version of JavaScript used.",
                  "B) It helps web browsers render the page correctly.",
                  "C) It defines the layout and design of the webpage.",
                  "D) It determines the character encoding of the webpage."
                ],
                "correctAnswer": 1
              },
              {
                "question": "Which tag marks the beginning and end of an HTML webpage and should always be closed at the end of the document?",
                "options": [
                  "A) <head>",
                  "B) <body>",
                  "C) <title>",
                  "D) <html>"
                ],
                "correctAnswer": 3
              },
              {
                "question": "How can you view the HTML source code of a webpage?",
                "options": [
                  "A) Press CTRL + U",
                  "B) Right-click and select \"View Page Source\"",
                  "C) Both A and B",
                  "D) None of the above"
                ],
                "correctAnswer": 2
              }
            ]
          },
          {
            "title": "HTML Elements and Attributes",
            "content": "##1. The essence of HTML elements and their significance in web design.\n##2. Understanding the syntax of HTML elements and the role of attributes in providing additional information about elements.\n##3. Exploring various attributes and HTML elements in action.\n\n",
            "lesson": "##Elements syntax unveiled:\nHTML utilizes elements as its core components. An HTML element is comprised of three main parts:\n\n\n1. Start tag: It marks the beginning of an element and is enclosed within angle brackets (< and >). For instance, <tagname>.\n2. Element content: This is the actual content encapsulated by the element. It could be text, images, or other elements.\n3. End tag: It denotes the conclusion of an element and is similar to the start tag, except it includes a forward slash before the tag name. For example, </tagname>.\nAdditionally, some elements may be empty, meaning they don't contain any content and thus don't require an end tag. These are known as empty elements.\n\n##Elements in Action:\nLet's explore some examples to better grasp how HTML elements function:\n\n`<!DOCTYPE html>\n<html>\n<body>\n\n<h1>My First Heading</h1>\n<p>This is a <br> paragraph with a line break.</p>\n\n</body>\n</html>`\n\nIn this example, you can see already familiar elements such as <!DOCTYPE html>, <html>, and <body>. You'll also encounter an empty element, <br>, which represents a line break and is an empty element. Empty elements like <br> don't have a closing tag because they don't contain any content.\n \n##Attributes\nHTML attributes provide additional information about elements and are always specified within the start tag of an element. \n1. The href attribute is commonly used with the <a> tag to define hyperlinks. It specifies the URL of the page the link goes to. For example:\n\n`<a href=\"https://www.example.com\">Visit Example</a>`\n\n2. The src attribute is utilized with the <img> tag to embed images in HTML pages. It specifies the path to the image to be displayed. \n\n`<img src=\"image.jpg\">\n<img src=\"https://www.example.com/image.jpg\">`\n\n3. The width and height attributes define the width and height of an image in pixels, ensuring proper display. \n`<img src=\"image.jpg\" width=\"500\" height=\"300\">`\n\n4. The alt attribute provides alternate text for images, which is displayed if the image cannot be loaded. \n`<img src=\"image.jpg\" alt=\"Description of the image\">`\n\n5. The style attribute adds inline styles to elements, allowing customization of appearance. \n`<p style=\"color: blue;\">Styled paragraph</p>`\n\n6. The lang attribute specifies the language of the HTML document, assisting search engines and browsers. \n\n`<html lang=\"en\">`\n\n 7. The title attribute provides additional information about an element, displayed as a tooltip when hovered over.\n\n`<p title=\"Extra information\">Hello</p>`\n\n##Single or Double Quotes?\nDouble quotes around attribute values are the most common in HTML, but single quotes can also be used.\nIn some situations, when the attribute value itself contains double quotes, it is necessary to use single quotes:\n`<p title='John \"ShotGun\" Nelson'>Hello</p>`\n\n\n",
            "quiz": [
              {
                "question": "What are the three main parts of an HTML element?",
                "options": [
                  "  A) Start tag, Element attributes, End tag.",
                  "B) Start tag, Element content, End tag.",
                  "C) Opening tag, Element content, Closing tag.",
                  "D) Tag name, Element content, Attribute name."
                ],
                "correctAnswer": 1
              },
              {
                "question": "Which attribute is commonly used with the <a> tag to define hyperlinks?",
                "options": [
                  "   A) alt",
                  " B) src",
                  " C) href",
                  " D) style"
                ],
                "correctAnswer": 2
              },
              {
                "question": "When should single quotes be used for attribute values in HTML?",
                "options": [
                  "A) Single quotes are always preferred.",
                  "B) Single quotes are used when the attribute value contains double quotes.",
                  "C) Single quotes are used for all attribute values.",
                  "D) Single quotes are never used in HTML."
                ],
                "correctAnswer": 1
              }
            ]
          },
          {
            "title": "Your First HTML Paragraph",
            "content": "##By now, you've gained a solid understanding of HTML basics and elements, including attributes. In this lesson, we'll put that knowledge into practice by creating your first paragraph in HTML.\n##Recap of What You've Learned:\n\n1. You've learned about the essential elements of HTML, such as <html>, <head>, <body>, <title>, and <meta>.\n2. You've discovered the significance of the DOCTYPE declaration in specifying the HTML version and ensuring proper rendering.\n3. You've explored HTML elements and their syntax, including start tags, element content, and end tags.\n4. You've delved into the role of attributes in providing additional information about elements, and you've seen various attributes commonly used in HTML elements.\n##Now, let's apply this knowledge to create your first paragraph in HTML!\n\n",
            "lesson": "##Creating Your First Paragraph:\n\nTo create a paragraph in HTML, we use the <p> element. This element allows us to structure text content into paragraphs on our web page.\n\nHere's a simple example of how to create your first paragraph in HTML:\n\n`<!DOCTYPE html>\n<html>\n<head>\n    <title>My First Web Page</title>\n</head>\n<body>\n    <h1>Welcome to My Web Page!</h1>\n    <p>This is my first paragraph in HTML. I'm learning how to create web pages, and it's exciting!</p>\n</body>\n</html>`\n\nIn this example:\n1. We've started with the DOCTYPE declaration (<!DOCTYPE html>) to specify the HTML version.\n2. Inside the <html> element, we've included the <head> section, where we've set the title of our web page using the <title> element.\n3. The <body> element contains the visible content of our web page. We've added an <h1> element for the main heading (don’t panic! you will learn about headings in the subsequent lessons) and a <p> element for our paragraph.\nFeel free to customize the content of the paragraph to reflect your own thoughts, ideas, or any information you'd like to share on your web page.\n\n##Congratulations! You've successfully created your first paragraph in HTML. Keep practicing and exploring new elements and attributes to enhance your web development skills.\n",
            "quiz": [
              {
                "question": "What HTML element is used to create a paragraph?",
                "options": [
                  " A) <paragraph>",
                  " B) <p>",
                  "C) <para>",
                  "D) <pg>"
                ],
                "correctAnswer": 1
              },
              {
                "question": "What is the purpose of the <title> element in an HTML document?",
                "options": [
                  "A) It defines the main heading of the webpage.",
                  "B) It specifies the version of HTML being used.",
                  "C) It provides additional information about an element.",
                  "  D) It sets the title of the webpage displayed in the browser tab."
                ],
                "correctAnswer": 3
              },
              {
                "question": "What is the role of the <body> element in an HTML document?",
                "options": [
                  "A) It contains visible content such as text, images, and links.",
                  "B) It specifies the metadata of the webpage.",
                  "C) It defines the structure of the webpage.",
                  "D) It includes references to external files used in the webpage."
                ],
                "correctAnswer": 0
              }
            ]
          },
          {
            "title": "HTML Text Formatting",
            "content": "##1. Apply inline styling to HTML elements using the style attribute.\n##2. Manipulate the look and feel of elements with CSS properties such as background color, color, font-family, font-size, and text-align.\n\n\n",
            "lesson": "##Styling Syntax Unveiled\nThe magic happens with the syntax: \n`<tagname style=\"property:value;\">`\nHere, tagname could be any HTML element like p, h1, or body. The property is a CSS attribute, and the value is the specific styling you wish to apply.\n\n##Styling in Action\n1. Paint the Background: Set the stage with background-color:\n`<p style=\"background-color: turquoise;\">Imagine a turquoise sea.</p> a turquoise sea.</p>`\n\n2. Text Color Transformation: The color property brings words to life:\n`<h1 style=\"color: coral;\">Coral dreams awaken.</h1>`\n\n\n3. Font Family Fiesta: With font-family, switch up the typography:\n`<p style=\"font-family: 'Georgia', serif;\">Elegance in every word.</p>`\n\n\n4. Size Matters: Adjust font-size to scale the importance:\n`<p style=\"font-size: 120%;\">A bigger, bolder paragraph.</p>`\n\n\n5. Align Your Thoughts: The text-align property lines up your content:\n`<h2 style=\"text-align: right;\">Right-aligned intrigue.</h2>`\n\n\n",
            "quiz": [
              {
                "question": "What is the syntax for applying inline styling to HTML elements using the style attribute?",
                "options": [
                  " A) <tagname style=\"property:value;\">",
                  "B) <tagname style=\"value:property;\">",
                  "C) <tagname property=\"value;\">",
                  "D) <tagname style=\"value\">"
                ],
                "correctAnswer": 0
              },
              {
                "question": "Which CSS property is used to set the background color of an HTML element?",
                "options": [
                  " A) font-family",
                  "   B) text-align",
                  " C) background-color",
                  "  D) color"
                ],
                "correctAnswer": 2
              },
              {
                "question": "How can you center-align text within an HTML element using inline styling?",
                "options": [
                  "A) Using the text-align property with the value \"center\".",
                  " B) Using the align property with the value \"center\".",
                  " C) Using the center property with the value \"text-align\"",
                  "   D) Using the style property with the value \"center\""
                ],
                "correctAnswer": 0
              }
            ]
          },
          {
            "title": "HTML Comments",
            "content": "##1. Adding comments to HTML source code for documentation and organization.\n##2. Utilizing HTML comments to temporarily hide content and debug code.\n\n",
            "lesson": "##Comment Syntax Unveiled:\nComments are encapsulated within <!-- and --> tags in HTML. They provide valuable insights into your code without being displayed in the browser.\n##Comments in Action:\n1. Documenting Code: Add comments to provide context and clarity:\n`<!-- This is a comment -->`\n\n2. Hiding Content: Comments can temporarily hide content from display:\n`<!-- <p>This is another paragraph.</p>--> `\n\n3. Debugging Assistance: Comment out code to troubleshoot issues:\n`<!--\n<p>Commented out paragraph.</p>\n<img src=\"example.jpg\" alt=\"\">-->`\n",
            "quiz": [
              {
                "question": "How are HTML comments encapsulated in HTML code?",
                "options": [
                  "A) [comment] and [/comment]",
                  " B) <!-- and -->",
                  "C) {comment} and {/comment}",
                  "   D) <!-- and //-->"
                ],
                "correctAnswer": 1
              },
              {
                "question": "What is the primary purpose of adding comments to HTML source code?",
                "options": [
                  "   A) To change the appearance of elements.",
                  "B) To provide documentation and organization.",
                  "C) To create hidden elements on the webpage.",
                  "D) To apply styling to specific elements."
                ],
                "correctAnswer": 1
              },
              {
                "question": "In the context of debugging code, how can comments be helpful?",
                "options": [
                  "A) By hiding elements permanently.",
                  "B) By adding visual effects to elements.",
                  "C) By temporarily hiding or commenting out code to troubleshoot issues.",
                  " D) By changing the structure of the HTML document."
                ],
                "correctAnswer": 2
              }
            ]
          },
          {
            "title": "Links, Images in HTML",
            "content": "##How to add links and images to your HTML pages to create interactive and visually appealing content.",
            "lesson": "##Links Unveiled:\nLinks are essential for navigating between web pages. They are represented by the <a> tag and can be text or images.\n\n##Links in Action:\n1. Hyperlinks: Create clickable links with the <a> tag:\n`<a href=\"https://www.example.com/\">Visit Example.com</a>`\n\n\n2. Target Attribute: Specify where the linked document should open:\n`<a href=\"https://www.example.com/\" target=\"_blank\">Visit Example.com</a>`\n\n3. Absolute vs. Relative URLs: Choose between absolute and relative URLs for linking:\n`<a href=\"https://www.example.com/\">Absolute URL</a>`\n`<a href=\"page.html\">Relative URL</a>`\n\n##Images Explored:\nImages enhance the visual appeal of web pages. They are inserted using the <img> tag.\n\n##Images in Action:\n1. Embedding Images: Add images with the <img> tag:\n`<img src=\"image.jpg\" alt=\"Description of image\">`\n\n2. Image Attributes: Define image properties such as width and height:\n`<img src=\"image.jpg\" alt=\"Description of image\" width=\"200\" height=\"150\">`\n",
            "quiz": [
              {
                "question": "What HTML tag is used to create hyperlinks?",
                "options": [
                  "A) <link>",
                  "B) <a>",
                  "C) <href>",
                  "D) <url>"
                ],
                "correctAnswer": 1
              },
              {
                "question": "What attribute is used to define the source (URL) of an image in HTML?",
                "options": [
                  "A) image-src ",
                  "B) link",
                  "C) href",
                  "D) src"
                ],
                "correctAnswer": 3
              },
              {
                "question": "In HTML, what does the alt attribute of the <img> tag specify?",
                "options": [
                  "A) Alignment of the image",
                  "B) Alternate text for the image",
                  "C) Animation duration",
                  "D) Accessible link to the image"
                ],
                "correctAnswer": 1
              },
              {
                "question": "How can you set the width and height of an image in HTML?",
                "options": [
                  "A) Using the <size> tag",
                  "B) By adding a dimension attribute",
                  "C) Using the width and height attributes ",
                  "D) Applying CSS styles directly to the image tag"
                ],
                "correctAnswer": 2
              },
              {
                "question": "Which of the following is an example of a relative URL?",
                "options": [
                  "A) <a href=\"https://www.example.com/\">Absolute URL</a>",
                  "B) <a href=\"page.html\">Relative URL</a> ",
                  "C) <a href=\"https://www.example.com/\">Relative URL</a>",
                  "D) <a href=\"/page.html\">Absolute URL</a>"
                ],
                "correctAnswer": 1
              }
            ]
          },
          {
            "title": "HTML Lists",
            "content": "##1. Different types of lists (unordered, ordered, other)\n##2. How to declare and organize every list",
            "lesson": "##Unordered lists\nAn unordered list starts with the <ul> tag. Each list item starts with the <li> tag.\nThe list items will be marked with bullets by default.\nExample:\n`<ul>\n  <li>Coffee</li>\n  <li>Tea</li>\n  <li>Milk</li>\n</ul> `\nResults\n$\n##Choosing an unordered list item marker\nThe CSS list-style-type property is used to define the style of the list item marker. It can have one of the following values:\n1. disc – Sets the list item marker to a bullet (default) \n2. circle – Sets the list item marker to a circle\n3. square – Sets the list item marker to a square\n4. none – The list items will not be marked\n\n`<ul style=\"list-style-type:square;\">\n  <li>Coffee</li>\n  <li>Tea</li>\n  <li>Milk</li>\n</ul>`\n\nResults:\n$\n\n##Ordered lists\nAn ordered list starts with the <ol> tag. Each list item starts with the <li> tag.\nThe list items will be marked with numbers by default.\n\n\n`<ol>\n  <li>Coffee</li>\n  <li>Tea</li>\n  <li>Milk</li>\n</ol>`\n\n\nResults:\n$\n\n##Choosing an ordered list item marker (the type attribute)\nThe type attribute of the <ol> tag, defines the type of the list item marker:\n1. type=\"1\" – The list items will be numbered with numbers (default)\n2. type=\"A\" – The list items will be numbered with uppercase letters\n3. type=\"a\" – The list items will be numbered with lowercase letters\n4. type=\"I\" – The list items will be numbered with uppercase roman numbers\n5. type=\"i\" – The list items will be numbered with lowercase roman numbers\n\n`<ol type=\"a\">\n  <li>Coffee</li>\n  <li>Tea</li>\n  <li>Milk</li>\n</ol>`\n\nResults:\n$\n\n##Description lists\nA description list is a list of terms, with a description of each term.\nThe <dl> tag defines the description list, the <dt> tag defines the term (name), and the <dd> tag describes each term:\n\n\n`<dl>\n  <dt>Coffee</dt>\n  <dd>- black hot drink</dd>\n  <dt>Milk</dt>\n  <dd>- white cold drink</dd>\n</dl>`\n\n\nResults:\n$\n\n\n\n\n\n",
            "quiz": [
              {
                "question": "Which HTML tag is used to define an unordered list?",
                "options": [
                  "A)  <ol> ",
                  "B) <ul>",
                  "C) <dl>",
                  "D) <li>"
                ],
                "correctAnswer": 1
              },
              {
                "question": "What is the default marker for list items in an unordered list?",
                "options": [
                  "A) Numbers",
                  "B) Uppercase letters",
                  "C) Bullets",
                  "D) Lowercase letters"
                ],
                "correctAnswer": 2
              },
              {
                "question": "Which CSS property is used to define the style of the list item marker in an unordered list?",
                "options": [
                  "A) list-type-style",
                  "B) list-item-marker",
                  "C) list-style-type",
                  "D) marker-style"
                ],
                "correctAnswer": 2
              },
              {
                "question": "How would you declare an unordered list with circle markers?",
                "options": [
                  "A) <ul style=\"list-style-type:square;\">",
                  "B) <ul style=\"list-style-type:disc;\">",
                  "C) <ul style=\"list-style-type:circle;\">",
                  "D) <ul style=\"list-style-type:none;\">"
                ],
                "correctAnswer": 2
              }
            ]
          },
          {
            "title": "HTML Tables",
            "content": "##1. How to declare a table\n##2. Ways to span two columns and rows\n##3. Changing the dimensions of a table\n",
            "lesson": "##HTML Table Tags\n1. <table> – Defines a table\n2. <th> – Defines a header cell in a table\n3. <tr> – Defines a row in a table\n4. <td> – Defines a cell in a table\n5. <caption> –Defines a table caption\n6. <colgroup> – Specifies a group of one or more columns in a table for formatting\n7. <col> – Specifies column properties for each column within a  <colgroup> element\n8. <thead> – Groups the header content in a table\n9. <tbody> – Groups the body content in a table\n10. <tfoot> – Groups the footer content in a table\n\nHTML tables can have different sizes for each column, row or the entire table.\nYou can use the style attribute with the width or height properties to specify the size of a table, row or column.\n\n`<table style=\"width:100%\">\n  <tr>\n    <th style=\"width:70%\">Firstname</th>\n    <th>Lastname</th>\n    <th>Age</th>\n  </tr>\n  <tr>\n    <td>Jill</td>\n    <td>Smith</td>\n    <td>50</td>\n  </tr>\n  <tr>\n    <td>Eve</td>\n    <td>Jackson</td>\n    <td>94</td>\n  </tr>\n</table>`\n\nResults:\n$\n\n\n\nTo make a cell span over multiple columns, use the colspan attribute:\n`<table>\n  <tr>\n    <th colspan=\"2\">Name</th>\n    <th>Age</th>\n  </tr>\n  <tr>\n    <td>Jill</td>\n    <td>Smith</td>\n    <td>43</td>\n  </tr>\n  <tr>\n    <td>Eve</td>\n    <td>Jackson</td>\n    <td>57</td>\n  </tr>\n</table>`\n\nResults:\n$\n\nTo make a cell span over multiple rows, use the rowspan attribute:\n`<table>\n  <tr>\n    <th>Name</th>\n    <td>Jill</td>\n  </tr>\n  <tr>\n    <th rowspan=\"2\">Phone</th>\n    <td>555-1234</td>\n  </tr>\n  <tr>\n    <td>555-8745</td>\n</tr>\n</table>\n`\n\nResults:\n$\n\n",
            "quiz": [
              {
                "question": " Which HTML tag is used to define a table?",
                "options": [
                  "A) <table>",
                  "B) <tr>",
                  "C) <td>",
                  "D) <th>"
                ],
                "correctAnswer": 0
              },
              {
                "question": "How can you specify the size of a table using HTML and CSS?",
                "options": [
                  "A) By using the <size> attribute within the <table> tag",
                  "B) By using the style attribute with width and height properties within the <table> tag",
                  "C) By wrapping the table in a <div> with specific dimensions",
                  "D) By using the size property within the <table> tag"
                ],
                "correctAnswer": 1
              },
              {
                "question": "What attribute is used to make a cell span over multiple columns in an HTML table? ",
                "options": [
                  "A) colspan",
                  "B) rowspan",
                  "C) span",
                  "D) merge"
                ],
                "correctAnswer": 0
              },
              {
                "question": "Which HTML tag is used to define a table caption?",
                "options": [
                  "A) <caption>",
                  "B) <colgroup>",
                  "C) <thead>",
                  "D) <tfoot>"
                ],
                "correctAnswer": 0
              },
              {
                "question": "What HTML tag is used to group the header content in a table?",
                "options": [
                  "A) <thead>",
                  "B)  <tbody>",
                  "C) <tfoot>",
                  "D) <colgroup>"
                ],
                "correctAnswer": 0
              },
              {
                "question": "How can you make a cell span over multiple rows in an HTML table?",
                "options": [
                  "A) By using the rowspan attribute",
                  "B) By using the rowmerge attribute",
                  "C) By wrapping multiple <td> tags within a single <tr> tag",
                  "D) By using the colspan attribute"
                ],
                "correctAnswer": 0
              }
            ]
          },
          {
            "title": "HTML Blocks, Inline and Divs",
            "content": "##1. What is a block-level element\n##2. What are the inline elements\n##3. How do declare a div  \n",
            "lesson": "##Blocks\n\nA block-level element always starts on a new line, and the browsers automatically add some space (a margin) before and after the element.\nA block-level element always takes up the full width available.\n\nTwo commonly used block elements are: <p> and <div>.\nThe <p> element defines a paragraph in an HTML document.\nThe <div> element defines a division or a section in an HTML document.\n\n\n`<p>Hello World</p>\n<div>Hello World</div>\n`\n\nResults:\n$\n\n##Inline Elements\nAn inline element does not start on a new line.\nAn inline element only takes up as much width as necessary.\nThis is a <span> element inside a paragraph.\n\n`<span>Hello World</span>`\n\nResults:\n$\n\n##The <div> Element\nThe <div> element is often used as a container for other HTML elements.\nThe <div> element has no required attributes, but style, class and id are common.\nWhen used together with CSS, the <div> element can be used to style blocks of content.\n\n\n`<div style=\"background-color:black;color:white;padding:20px;\">\n  <h2>London</h2>\n  <p>London is the capital city of England. It is the most populous city in the United Kingdom, with a metropolitan area of over 13 million inhabitants.</p>\n</div>`\n\n\nResults:\n$\n\n\n",
            "quiz": [
              {
                "question": "Which of the following statements about block-level elements is true?",
                "options": [
                  "A) They always start on the same line as the previous element.",
                  "B) They only take up as much width as necessary.",
                  "C) Browsers do not add any space (margin) before or after block-level elements.",
                  "D) They always start on a new line, and browsers automatically add space before and after them."
                ],
                "correctAnswer": 3
              },
              {
                "question": "Which HTML element is commonly used as a container for other HTML elements?",
                "options": [
                  "A)  <p>",
                  "B) <span>",
                  "C)  <div>",
                  "D)  <section>"
                ],
                "correctAnswer": 2
              },
              {
                "question": "What is the purpose of the <span> element?",
                "options": [
                  "A) To define a paragraph in an HTML document.",
                  "B) To style blocks of content.",
                  "C) To start on a new line.",
                  "D) To group inline elements for styling purposes."
                ],
                "correctAnswer": 3
              },
              {
                "question": "What attributes are commonly used with the <div> element?",
                "options": [
                  "A) href and src",
                  "B)  style, class, and id",
                  "C)  type and value",
                  "D)  colspan and rowspan"
                ],
                "correctAnswer": 1
              }
            ]
          }
        ],
        "css": [],
        "js": [
          {
            "title": "LECTIE DEMO",
            "content": "# Stiati ca broastele pot sari?\n$https://i.natgeofe.com/k/8fa25ea4-6409-47fb-b3cc-4af8e0dc9616/red-eyed-tree-frog-on-leaves-3-2_3x4.jpg\n## broastele sunt animale foarte bune pentru ca ele:\n- Pot sari inalt.\n- Pot sari nu foarte inalt.\n- Pot face sunetul quack.\n\n## cum functioneaza creierul broastei:\nBroastele sunt animale cu creier mare foarte inteligente, care pot face multe, iata cum functioneaza creierul lor:\n`while(!flamanzi && !somnoros) {\n  if(energie > 0) {\n    sare();\n    quack();\n  } else {\n    doarme();\n  }\n}`",
            "lesson": "# Stiati ca broastele pot sari?\n$https://i.natgeofe.com/k/8fa25ea4-6409-47fb-b3cc-4af8e0dc9616/red-eyed-tree-frog-on-leaves-3-2_3x4.jpg\n## broastele sunt animale foarte bune pentru ca ele:\n- Pot sari inalt.\n- Pot sari nu foarte inalt.\n- Pot face sunetul quack.\n\n## cum functioneaza creierul broastei:\nBroastele sunt animale cu creier mare foarte inteligente, care pot face multe, iata cum functioneaza creierul lor:\n`while(!flamanzi && !somnoros) {\n  if(energie > 0) {\n    sare();\n    quack();\n  } else {\n    doarme();\n  }\n}`",
            "quiz": []
          }
        ],
        "python": [
          {
            "title": "Gay",
            "content": "#Gay\n##MiniGay\n",
            "lesson": "# Blank lesson",
            "quiz": [
              {
                "question": "GAy",
                "options": [
                  "Me",
                  "You"
                ],
                "correctAnswer": 1
              }
            ]
          },
          {
            "title": "Python Syntax",
            "content": "##Python Syntax\n#Python syntax is designed to be clear and concise, making it easy to write and understand code. Statements are typically written on separate lines, and indentation is used to indicate code blocks.\n'if 5 > 2:\n    print(\"5 is greater than 2\")'\n",
            "lesson": "Application: Pay attention to indentation when writing Python code. Proper indentation is crucial for readability and ensures that your code functions as intended.",
            "quiz": [
              {
                "question": "How do we denote a multi-line block of code in Python?",
                "options": [
                  " Using square brackets []",
                  " Using parentheses ()",
                  "Using curly braces {}",
                  " Using indentation"
                ],
                "correctAnswer": 3
              }
            ]
          },
          {
            "title": "Python Syntax",
            "content": "#Python Syntax\n##Python syntax is designed to be clear and concise, making it easy to write and understand code. Statements are typically written on separate lines, and indentation is used to indicate code blocks.\n",
            "lesson": "##Python Indentation\nIndentation refers to the spaces at the beginning of a code line.\n\nWhere in other programming languages the indentation in code is for readability only, the indentation in Python is very important.\n\nPython uses indentation to indicate a block of code.\nThe number of spaces is up to you as a programmer, the most common use is four, but it has to be at least one.\nYou have to use the same number of spaces in the same block of code, otherwise Python will give you an error\n##Comments\nPython has commenting capability for the purpose of in-code documentation.\n`if 5 > 2:\n print(\"Five is greater than two!\") \nif 5 > 2:\n        print(\"Five is greater than two!\")`\n\nComments start with a #, and Python will render the rest of the line as a comment:\n`#This is a comment.\nprint(\"Hello, World!\")`\n#Python Variables\nIn Python, variables are created when you assign a value to it:\n`x = 5\ny = \"Hello, World!\"`\n#Python has no command for declaring a variable.\n#You will learn more about variables in the Python Variables chapter.",
            "quiz": [
              {
                "question": "How do we denote a multi-line block of code in Python?",
                "options": [
                  " Using square brackets []",
                  " Using parentheses ()",
                  "Using curly braces {}",
                  " Using indentation"
                ],
                "correctAnswer": 3
              },
              {
                "question": "What symbol do we use to indicate comments in Python?",
                "options": [
                  "//",
                  "#",
                  "%%",
                  "/* */",
                  "#"
                ],
                "correctAnswer": 1
              }
            ]
          },
          {
            "title": "Python Variables",
            "content": "#Python Variables\n##Variables are used to store data values in Python. They are assigned using the equals sign (=) and can hold different types of data, such as numbers, strings, or booleans.",
            "lesson": "#Variables are containers for storing data values.\n##Creating Variables\nPython has no command for declaring a variable.\nA variable is created the moment you first assign a value to it.\n`x = 5\ny = \"John\"\nprint(x)\nprint(y)`\nVariables do not need to be declared with any particular type, and can even change type after they have been set.\n##If you want to specify the data type of a variable, this can be done with casting.\n`x = str(3)    # x will be '3'\ny = int(3)    # y will be 3\nz = float(3)  # z will be 3.0`\n##Get the Type\nYou can get the data type of a variable with the type() function.\n`x = 5\ny = \"John\"\nprint(type(x))\nprint(type(y))`\n##Single or Double Quotes?\nString variables can be declared either by using single or double quotes:\n`x = \"John\"\n# is the same as\nx = 'John'`",
            "quiz": [
              {
                "question": "What data type is used for storing whole numbers in Python?",
                "options": [
                  "str",
                  "int",
                  "float",
                  " bool"
                ],
                "correctAnswer": 1
              },
              {
                "question": "What is the result of the following code snippet?(x = 5 y = \"Hello\" print(x + y))",
                "options": [
                  "5Hello",
                  "Hello5",
                  "TypeError",
                  "10"
                ],
                "correctAnswer": 2
              }
            ]
          },
          {
            "title": "Python Operators",
            "content": "#Python Operators\n##Operators are symbols used to perform operations on variables and values. Python supports various types of operators, including arithmetic, comparison, logical, and assignment operators.",
            "lesson": "##Operators are used to perform operations on variables and values.\n\nIn the example below, we use the + operator to add together two values:\n`print(10 + 5)`\n\nPython divides the operators in the following groups:\n\n-Arithmetic operators\n-Assignment operators\n-Comparison operators\n-Logical operators\n-Identity operators\n-Membership operators\n-Bitwise operators\n`# Arithmetic operators\nx = 5 + 3\ny = 5 * 3\nz = 5 / 2\n# Comparison operators\na = 5 > 2\nb = 5 == 2\nc = 5 != 2\n# Logical operators\np = True and False\nq = True or False\n# Assignment operators\nx += 1  # Equivalent to x = x + 1`\n##Python Comparison Operators\n==\tEqual\tx == y\t\n!=\tNot equal\tx != y\t\n>\tGreater than\tx > y\t\n<\tLess than\tx < y\t\n>=\tGreater than or equal to\tx >= y\t\n<=\tLess than or equal to\tx <= y\n##Python Arithmetic Operators\n+\tAddition\tx + y\t\n-\tSubtraction\tx - y\t\n*\tMultiplication\tx * y\t\n/\tDivision\tx / y\t\n%\tModulus\tx % y\t\n**\tExponentiation\tx ** y\t\n//\tFloor division\tx // y\n##Python Bitwise Operators\n& \tAND\tSets each bit to 1 if both bits are 1\tx & y\t\n|\tOR\tSets each bit to 1 if one of two bits is 1\tx | y\t\n^\tXOR\tSets each bit to 1 if only one of two bits is 1\tx ^ y\t\n~\tNOT\tInverts all the bits\t~x\t\n<<\tZero fill left shift\tShift left by pushing zeros in from the right and let the leftmost bits fall off\tx << 2\t\n>>\tSigned right shift\tShift right by pushing copies of the leftmost bit in from the left, and let the rightmost bits fall off\tx >> 2\n##Operator Precedence\n`print((6 + 3) - (6 + 3))`\nParentheses has the highest precedence, meaning that expressions inside parentheses must be evaluated first:\nMultiplication * has higher precedence than addition +, and therefor multiplications are evaluated before additions:\n`print(100 + 5 * 3)`\n#The precedence order is described in the table below, starting with the highest precedence at the top:\n\n()\tParentheses\t\n**\tExponentiation\t\n+x  -x  ~x\tUnary plus, unary minus, and bitwise NOT\t\n*  /  //  %\tMultiplication, division, floor division, and modulus\t\n+  -\tAddition and subtraction\t\n<<  >>\tBitwise left and right shifts\t\n&\tBitwise AND\t\n^\tBitwise XOR\t\n|\tBitwise OR\t\n==  !=  >  >=  <  <=  is  is not  in  not in \tComparisons, identity, and membership operators\t\nnot\tLogical NOT\t\nand\tAND\t\nor\tOR",
            "quiz": [
              {
                "question": "What is the result of 5 + 2?",
                "options": [
                  "7",
                  "52",
                  "TypeError",
                  "None"
                ],
                "correctAnswer": 0
              },
              {
                "question": "What operator is used for exponentiation in Python?",
                "options": [
                  "^",
                  " **",
                  "//",
                  "%"
                ],
                "correctAnswer": 1
              }
            ]
          },
          {
            "title": "Python Lists, Tuples, Sets",
            "content": "#Python Lists, Tuples, Sets\n##Lists, tuples, and sets are data structures used to store collections of items in Python. Lists are mutable, ordered collections, while tuples are immutable. Sets are unordered collections with no duplicate elements.\n",
            "lesson": "`# List\nfruits = [\"apple\", \"banana\", \"cherry\"]\n# Tuple\ncolors = (\"red\", \"green\", \"blue\")\n# Set\nnumbers = {1, 2, 3, 4, 5}`\n##List\nLists are used to store multiple items in a single variable.\n\nLists are one of 4 built-in data types in Python used to store collections of data, the other 3 are Tuple, Set, and Dictionary, all with different qualities and usage.\n\nLists are created using square brackets:\n`thislist = [\"apple\", \"banana\", \"cherry\"]\nprint(thislist)`\n##List Items\nList items are ordered, changeable, and allow duplicate values.\n\nList items are indexed, the first item has index [0], the second item has index [1] etc.\n##Ordered\nWhen we say that lists are ordered, it means that the items have a defined order, and that order will not change.\n\nIf you add new items to a list, the new items will be placed at the end of the list.\n##Allow Duplicates\nSince lists are indexed, lists can have items with the same value:\n`thislist = [\"apple\", \"banana\", \"cherry\", \"apple\", \"cherry\"]\nprint(thislist)`\n##List Length\n`thislist = [\"apple\", \"banana\", \"cherry\"]\nprint(len(thislist))`\n",
            "quiz": [
              {
                "question": "Which data type in Python is ordered and mutable?",
                "options": [
                  "list",
                  "tuple",
                  "set",
                  "dictionary"
                ],
                "correctAnswer": 0
              },
              {
                "question": "What is the correct syntax for creating a tuple?",
                "options": [
                  "[1, 2, 3]",
                  "(1, 2, 3)",
                  "{1, 2, 3}",
                  "{1: 'a', 2: 'b', 3: 'c'}"
                ],
                "correctAnswer": 1
              }
            ]
          },
          {
            "title": "Python Dictionaries",
            "content": "\n#Python Dictionaries\n##Dictionaries are data structures used to store key-value pairs in Python. Each key is associated with a value, allowing for efficient lookup and retrieval of data.\n##Use dictionaries to store and retrieve data in key-value pairs. Dictionaries are useful for representing structured data and organizing information in your programs.",
            "lesson": "##Dictionaries are used to store data values in key:value pairs.\n\nA dictionary is a collection which is ordered*, changeable and do not allow duplicates.\n`thisdict = {\n  \"brand\": \"Ford\",\n  \"model\": \"Mustang\",\n  \"year\": 1964\n}\nprint(thisdict)`\n##Dictionary Items\nDictionary items are ordered, changeable, and do not allow duplicates.\n\nDictionary items are presented in key:value pairs, and can be referred to by using the key name.\n`thisdict = {\n  \"brand\": \"Ford\",\n  \"model\": \"Mustang\",\n  \"year\": 1964\n}\nprint(thisdict[\"brand\"])`\n##Ordered or Unordered?\nWhen we say that dictionaries are ordered, it means that the items have a defined order, and that order will not change.\n\nUnordered means that the items do not have a defined order, you cannot refer to an item by using an index.\n##Changeable\nDictionaries are changeable, meaning that we can change, add or remove items after the dictionary has been created.\n##Duplicates Not Allowed\nDictionaries cannot have two items with the same key:\n\n`thisdict = {\n  \"brand\": \"Ford\",\n  \"model\": \"Mustang\",\n  \"year\": 1964,\n  \"year\": 2020\n}\nprint(thisdict)`\n\n",
            "quiz": [
              {
                "question": "How are items stored in a dictionary?",
                "options": [
                  "Ordered sequence",
                  "Random sequence",
                  "Key-value pairs",
                  "Index-value pairs"
                ],
                "correctAnswer": 2
              },
              {
                "question": "What happens if you try to access a key that does not exist in a dictionary?",
                "options": [
                  "It returns None",
                  " It returns an empty string",
                  " It raises a KeyError",
                  " It returns False"
                ],
                "correctAnswer": 2
              }
            ]
          },
          {
            "title": "Python If…Else",
            "content": "#Python If…Else\n## If...else statements are used to make decisions in Python based on certain conditions. They allow your program to execute different code blocks depending on whether a condition is true or false.\n##Use if...else statements to control the flow of your program and perform different actions based on specific conditions. They are essential for implementing logic and making your programs more dynamic.\n",
            "lesson": "#Python Conditions and If statements\nPython supports the usual logical conditions from mathematics:\nEquals: a == b\nNot Equals: a != b\nLess than: a < b\nLess than or equal to: a <= b\nGreater than: a > b\nGreater than or equal to: a >= b\n`Example:\nx = 5\nif x > 3:\n    print(\"x is greater than 3\")\nelse:\n    print(\"x is less than or equal to 3\")`\n#Indentation\nPython relies on indentation (whitespace at the beginning of a line) to define scope in the code. Other programming languages often use curly-brackets for this purpose.\n\n##Elif\nThe elif keyword is Python's way of saying \"if the previous conditions were not true, then try this condition\".\n`a = 33\nb = 33\nif b > a:\n  print(\"b is greater than a\")\nelif a == b:\n  print(\"a and b are equal\")`\n\n##Else\nThe else keyword catches anything which isn't caught by the preceding conditions.\n`a = 200\nb = 33\nif b > a:\n  print(\"b is greater than a\")\nelif a == b:\n  print(\"a and b are equal\")\nelse:\n  print(\"a is greater than b\")`\n\nIn this example a is greater than b, so the first condition is not true, also the elif condition is not true, so we go to the else condition and print to screen that \"a is greater than b\".\n\nYou can also have an else without the elif:\n\n`a = 200\nb = 33\nif b > a:\n  print(\"b is greater than a\")\nelse:\n  print(\"b is not greater than a\")`\n\n\n##Short Hand If\nIf you have only one statement to execute, you can put it on the same line as the if statement.\n`if a > b: print(\"a is greater than b\")`\n\n##And\nThe and keyword is a logical operator, and is used to combine conditional statements:\n`a = 200\nb = 33\nc = 500\nif a > b and c > a:\n  print(\"Both conditions are True\")`\n##Or\nThe or keyword is a logical operator, and is used to combine conditional statements:\n`a = 200\nb = 33\nc = 500\nif a > b or a > c:\n  print(\"At least one of the conditions is True\")`\n\n##Not\nThe not keyword is a logical operator, and is used to reverse the result of the conditional statement:\n`a = 33\nb = 200\nif not a > b:\n  print(\"a is NOT greater than b\")`\n\n#Nested If\nYou can have if statements inside if statements, this is called nested if statements.\n`x = 41\n\nif x > 10:\n  print(\"Above ten,\")\n  if x > 20:\n    print(\"and also above 20!\")\n  else:\n    print(\"but not above 20.\")`\n",
            "quiz": [
              {
                "question": "What keyword is used to start an if statement in Python?",
                "options": [
                  "then",
                  "elif",
                  " else",
                  "if"
                ],
                "correctAnswer": 3
              },
              {
                "question": "What happens if no conditions in an if...elif...else statement are True?",
                "options": [
                  "The program crashes",
                  "The else block is executed",
                  "The program exits",
                  "None of the above"
                ],
                "correctAnswer": 1
              }
            ]
          },
          {
            "title": "Python While Loops",
            "content": "#Python While Loops\n## While loops are used to execute a block of code repeatedly as long as a specified condition is true. They continue iterating until the condition becomes false.\n##Use while loops when you need to repeatedly execute a block of code until a certain condition is met. Be cautious to avoid infinite loops by ensuring that the condition eventually becomes false.",
            "lesson": "`Example:\ni = 0\nwhile i < 5:\n    print(i)\n    i += 1`\n\n##Python Loops\nPython has two primitive loop commands:\n\nwhile loops\nfor loops\n\n##The break Statement\nWith the break statement we can stop the loop even if the while condition is true:\n`i = 1\nwhile i < 6:\n  print(i)\n  if i == 3:\n    break\n  i += 1`\n\n##The continue Statement\n`i = 0\nwhile i < 6:\n  i += 1\n  if i == 3:\n    continue\n  print(i)`\n\n\n##The else Statement\nWith the else statement we can run a block of code once when the condition no longer is true:\n`i = 1\nwhile i < 6:\n  print(i)\n  i += 1\nelse:\n  print(\"i is no longer less than 6\")`\n\n",
            "quiz": [
              {
                "question": "What keyword is used to start a while loop in Python?",
                "options": [
                  "for",
                  "while",
                  "loop",
                  "until"
                ],
                "correctAnswer": 1
              },
              {
                "question": "How do you exit a while loop prematurely?",
                "options": [
                  " Using the break keyword",
                  "Using the continue keyword",
                  "Using the return keyword",
                  "None of the above"
                ],
                "correctAnswer": 0
              }
            ]
          }
        ],
        "c": [],
        "cpp": []
      }
    }
  }