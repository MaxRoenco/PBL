{
  "en": {
    "elements": {
      "langRegisterForm": "Register Form",
      "langUsername": "Username",
      "langMandatory": "(mandatory)",
      "langPassword": "Password",
      "langMandatory2": "(mandatory)",
      "langRegister": "Register",
      "buttonStart": "start",
      "langSFX": "Sound Effects",
      "titleSettings": "Languages",
      "langLogOut": "Logout",
      "langHome": "Home",
      "swipe": "Swipe",
      "langStats": "Statistics",
      "langAchievements": "Achievements",
      "langGiga": "GigaChad",
      "langTask1": "You need to get 100 exp",
      "langCrazy": "You are crazy",
      "langTask2": "You need to spend 100 diamands",
      "langDesigner": "Mr/Mrs designer",
      "langTask3": "You need to finish 5 CSS lessons",
      "langDoom": "Doom...",
      "langTaxt4": "You need to finish all courses",
      "langHomeProfile": "Home",
      "title": "What you'll discover",
      "langLessons": "Lessons",
      "langStartLesson": "Start lesson >",
      "langIntro": "<  Introduction",
      "langQuizBtn": "Quiz >",
      "title2": "Do you want to start the quiz?",
      "langBackBtn2": "< Back",
      "langStartIdk": "Start >",
      "langAnswers": "Answers:",
      "langConnection": "Check your internet connection..."
    },
    "categories": {
      "html": [
        {
          "title": "HTML Basics",
          "content": "##Welcome to the HTML Basics lesson! In this lesson, we'll cover the essential elements of HTML to get you started on your web development journey.\n\nHTML, which stands for HyperText Markup Language, is the standard language used to create and design web pages.\nIn this lesson, you'll discover:\n\n1. The purpose and usage of the DOCTYPE declaration.\n2. Basic HTML structure and elements.\n3. How to view the HTML source code of a web page.\n",
          "lesson": "##Understanding the DOCTYPE Declaration\n\nThe DOCTYPE declaration is an essential part of an HTML document. It specifies the version of HTML being used and helps web browsers render the page correctly. Here's an example of the DOCTYPE declaration for HTML5:\n\n`<!DOCTYPE html>`\n\nThis declaration should be placed at the beginning of every HTML document to ensure compatibility and proper rendering.\n\n##Basic HTML Structure\n\nAn HTML document consists of several basic elements, including:\n\n1. <html>: This tag marks the beginning and end of your webpage. All other elements are placed inside it. It should always be closed at the end of the document, like this <\\html>.\n\n2. <head>: Within this tag, you include important information about your webpage, like its title, keywords, and references to other files.  It should be closed -<\\head>- before the <body> tag starts.\n\n3. <body>: Inside this tag, you put all the content that users see when they visit your webpage, like text, images, and links. It should be closed at the end of the document - <\\body>.\n\n4. <title>: This tag sets the title of your webpage, which appears at the top of the browser window or tab. It's self-contained within the <head> section.\n\n5. <meta>: These tags provide additional information about your webpage, such as its character encoding and viewport settings. They are self-closing tags and do not require a separate closing tag.\n\n##Viewing HTML Source Code\n\nEver stumbled upon a webpage that made you go, \"Wow, how did they do that?\" Let's unlock the mystery!\nView HTML Source Code:\nClick CTRL + U in an HTML page, or right-click on the page and select \"View Page Source\". This will open a new tab containing the HTML source code of the page.\n\n\n\n",
          "quiz": [
            {
              "question": "What is the purpose of the DOCTYPE declaration in an HTML document?",
              "options": [
                "A) It specifies the version of JavaScript used.",
                "B) It helps web browsers render the page correctly.",
                "C) It defines the layout and design of the webpage.",
                "D) It determines the character encoding of the webpage."
              ],
              "correctAnswer": 1
            },
            {
              "question": "Which tag marks the beginning and end of an HTML webpage and should always be closed at the end of the document?",
              "options": [
                "A) <head>",
                "B) <body>",
                "C) <title>",
                "D) <html>"
              ],
              "correctAnswer": 3
            },
            {
              "question": "How can you view the HTML source code of a webpage?",
              "options": [
                "A) Press CTRL + U",
                "B) Right-click and select \"View Page Source\"",
                "C) Both A and B",
                "D) None of the above"
              ],
              "correctAnswer": 2
            }
          ]
        },
        {
          "title": "HTML Elements and Attributes",
          "content": "##1. The essence of HTML elements and their significance in web design.\n##2. Understanding the syntax of HTML elements and the role of attributes in providing additional information about elements.\n##3. Exploring various attributes and HTML elements in action.\n\n",
          "lesson": "##Elements syntax unveiled:\nHTML utilizes elements as its core components. An HTML element is comprised of three main parts:\n\n\n1. Start tag: It marks the beginning of an element and is enclosed within angle brackets (< and >). For instance, <tagname>.\n2. Element content: This is the actual content encapsulated by the element. It could be text, images, or other elements.\n3. End tag: It denotes the conclusion of an element and is similar to the start tag, except it includes a forward slash before the tag name. For example, </tagname>.\nAdditionally, some elements may be empty, meaning they don't contain any content and thus don't require an end tag. These are known as empty elements.\n\n##Elements in Action:\nLet's explore some examples to better grasp how HTML elements function:\n\n`<!DOCTYPE html>\n<html>\n<body>\n\n<h1>My First Heading</h1>\n<p>This is a <br> paragraph with a line break.</p>\n\n</body>\n</html>`\n\nIn this example, you can see already familiar elements such as <!DOCTYPE html>, <html>, and <body>. You'll also encounter an empty element, <br>, which represents a line break and is an empty element. Empty elements like <br> don't have a closing tag because they don't contain any content.\n \n##Attributes\nHTML attributes provide additional information about elements and are always specified within the start tag of an element. \n1. The href attribute is commonly used with the <a> tag to define hyperlinks. It specifies the URL of the page the link goes to. For example:\n\n`<a href=\"https://www.example.com\">Visit Example</a>`\n\n2. The src attribute is utilized with the <img> tag to embed images in HTML pages. It specifies the path to the image to be displayed. \n\n`<img src=\"image.jpg\">\n<img src=\"https://www.example.com/image.jpg\">`\n\n3. The width and height attributes define the width and height of an image in pixels, ensuring proper display. \n`<img src=\"image.jpg\" width=\"500\" height=\"300\">`\n\n4. The alt attribute provides alternate text for images, which is displayed if the image cannot be loaded. \n`<img src=\"image.jpg\" alt=\"Description of the image\">`\n\n5. The style attribute adds inline styles to elements, allowing customization of appearance. \n`<p style=\"color: blue;\">Styled paragraph</p>`\n\n6. The lang attribute specifies the language of the HTML document, assisting search engines and browsers. \n\n`<html lang=\"en\">`\n\n 7. The title attribute provides additional information about an element, displayed as a tooltip when hovered over.\n\n`<p title=\"Extra information\">Hello</p>`\n\n##Single or Double Quotes?\nDouble quotes around attribute values are the most common in HTML, but single quotes can also be used.\nIn some situations, when the attribute value itself contains double quotes, it is necessary to use single quotes:\n`<p title='John \"ShotGun\" Nelson'>Hello</p>`\n\n\n",
          "quiz": [
            {
              "question": "What are the three main parts of an HTML element?",
              "options": [
                "  A) Start tag, Element attributes, End tag.",
                "B) Start tag, Element content, End tag.",
                "C) Opening tag, Element content, Closing tag.",
                "D) Tag name, Element content, Attribute name."
              ],
              "correctAnswer": 1
            },
            {
              "question": "Which attribute is commonly used with the <a> tag to define hyperlinks?",
              "options": [
                "   A) alt",
                " B) src",
                " C) href",
                " D) style"
              ],
              "correctAnswer": 2
            },
            {
              "question": "When should single quotes be used for attribute values in HTML?",
              "options": [
                "A) Single quotes are always preferred.",
                "B) Single quotes are used when the attribute value contains double quotes.",
                "C) Single quotes are used for all attribute values.",
                "D) Single quotes are never used in HTML."
              ],
              "correctAnswer": 1
            }
          ]
        },
        {
          "title": "Your First HTML Paragraph",
          "content": "##By now, you've gained a solid understanding of HTML basics and elements, including attributes. In this lesson, we'll put that knowledge into practice by creating your first paragraph in HTML.\n##Recap of What You've Learned:\n\n1. You've learned about the essential elements of HTML, such as <html>, <head>, <body>, <title>, and <meta>.\n2. You've discovered the significance of the DOCTYPE declaration in specifying the HTML version and ensuring proper rendering.\n3. You've explored HTML elements and their syntax, including start tags, element content, and end tags.\n4. You've delved into the role of attributes in providing additional information about elements, and you've seen various attributes commonly used in HTML elements.\n##Now, let's apply this knowledge to create your first paragraph in HTML!\n\n",
          "lesson": "##Creating Your First Paragraph:\n\nTo create a paragraph in HTML, we use the <p> element. This element allows us to structure text content into paragraphs on our web page.\n\nHere's a simple example of how to create your first paragraph in HTML:\n\n`<!DOCTYPE html>\n<html>\n<head>\n    <title>My First Web Page</title>\n</head>\n<body>\n    <h1>Welcome to My Web Page!</h1>\n    <p>This is my first paragraph in HTML. I'm learning how to create web pages, and it's exciting!</p>\n</body>\n</html>`\n\nIn this example:\n1. We've started with the DOCTYPE declaration (<!DOCTYPE html>) to specify the HTML version.\n2. Inside the <html> element, we've included the <head> section, where we've set the title of our web page using the <title> element.\n3. The <body> element contains the visible content of our web page. We've added an <h1> element for the main heading (don’t panic! you will learn about headings in the subsequent lessons) and a <p> element for our paragraph.\nFeel free to customize the content of the paragraph to reflect your own thoughts, ideas, or any information you'd like to share on your web page.\n\n##Congratulations! You've successfully created your first paragraph in HTML. Keep practicing and exploring new elements and attributes to enhance your web development skills.\n",
          "quiz": [
            {
              "question": "What HTML element is used to create a paragraph?",
              "options": [
                " A) <paragraph>",
                " B) <p>",
                "C) <para>",
                "D) <pg>"
              ],
              "correctAnswer": 1
            },
            {
              "question": "What is the purpose of the <title> element in an HTML document?",
              "options": [
                "A) It defines the main heading of the webpage.",
                "B) It specifies the version of HTML being used.",
                "C) It provides additional information about an element.",
                "  D) It sets the title of the webpage displayed in the browser tab."
              ],
              "correctAnswer": 3
            },
            {
              "question": "What is the role of the <body> element in an HTML document?",
              "options": [
                "A) It contains visible content such as text, images, and links.",
                "B) It specifies the metadata of the webpage.",
                "C) It defines the structure of the webpage.",
                "D) It includes references to external files used in the webpage."
              ],
              "correctAnswer": 0
            }
          ]
        },
        {
          "title": "HTML Text Formatting",
          "content": "##1. Apply inline styling to HTML elements using the style attribute.\n##2. Manipulate the look and feel of elements with CSS properties such as background color, color, font-family, font-size, and text-align.\n\n\n",
          "lesson": "##Styling Syntax Unveiled\nThe magic happens with the syntax: \n`<tagname style=\"property:value;\">`\nHere, tagname could be any HTML element like p, h1, or body. The property is a CSS attribute, and the value is the specific styling you wish to apply.\n\n##Styling in Action\n1. Paint the Background: Set the stage with background-color:\n`<p style=\"background-color: turquoise;\">Imagine a turquoise sea.</p> a turquoise sea.</p>`\n\n2. Text Color Transformation: The color property brings words to life:\n`<h1 style=\"color: coral;\">Coral dreams awaken.</h1>`\n\n\n3. Font Family Fiesta: With font-family, switch up the typography:\n`<p style=\"font-family: 'Georgia', serif;\">Elegance in every word.</p>`\n\n\n4. Size Matters: Adjust font-size to scale the importance:\n`<p style=\"font-size: 120%;\">A bigger, bolder paragraph.</p>`\n\n\n5. Align Your Thoughts: The text-align property lines up your content:\n`<h2 style=\"text-align: right;\">Right-aligned intrigue.</h2>`\n\n\n",
          "quiz": [
            {
              "question": "What is the syntax for applying inline styling to HTML elements using the style attribute?",
              "options": [
                " A) <tagname style=\"property:value;\">",
                "B) <tagname style=\"value:property;\">",
                "C) <tagname property=\"value;\">",
                "D) <tagname style=\"value\">"
              ],
              "correctAnswer": 0
            },
            {
              "question": "Which CSS property is used to set the background color of an HTML element?",
              "options": [
                " A) font-family",
                "   B) text-align",
                " C) background-color",
                "  D) color"
              ],
              "correctAnswer": 2
            },
            {
              "question": "How can you center-align text within an HTML element using inline styling?",
              "options": [
                "A) Using the text-align property with the value \"center\".",
                " B) Using the align property with the value \"center\".",
                " C) Using the center property with the value \"text-align\"",
                "   D) Using the style property with the value \"center\""
              ],
              "correctAnswer": 0
            }
          ]
        },
        {
          "title": "HTML Comments",
          "content": "##1. Adding comments to HTML source code for documentation and organization.\n##2. Utilizing HTML comments to temporarily hide content and debug code.\n\n",
          "lesson": "##Comment Syntax Unveiled:\nComments are encapsulated within <!-- and --> tags in HTML. They provide valuable insights into your code without being displayed in the browser.\n##Comments in Action:\n1. Documenting Code: Add comments to provide context and clarity:\n`<!-- This is a comment -->`\n\n2. Hiding Content: Comments can temporarily hide content from display:\n`<!-- <p>This is another paragraph.</p>--> `\n\n3. Debugging Assistance: Comment out code to troubleshoot issues:\n`<!--\n<p>Commented out paragraph.</p>\n<img src=\"example.jpg\" alt=\"\">-->`\n",
          "quiz": [
            {
              "question": "How are HTML comments encapsulated in HTML code?",
              "options": [
                "A) [comment] and [/comment]",
                " B) <!-- and -->",
                "C) {comment} and {/comment}",
                "   D) <!-- and //-->"
              ],
              "correctAnswer": 1
            },
            {
              "question": "What is the primary purpose of adding comments to HTML source code?",
              "options": [
                "   A) To change the appearance of elements.",
                "B) To provide documentation and organization.",
                "C) To create hidden elements on the webpage.",
                "D) To apply styling to specific elements."
              ],
              "correctAnswer": 1
            },
            {
              "question": "In the context of debugging code, how can comments be helpful?",
              "options": [
                "A) By hiding elements permanently.",
                "B) By adding visual effects to elements.",
                "C) By temporarily hiding or commenting out code to troubleshoot issues.",
                " D) By changing the structure of the HTML document."
              ],
              "correctAnswer": 2
            }
          ]
        },
        {
          "title": "Links, Images in HTML",
          "content": "##How to add links and images to your HTML pages to create interactive and visually appealing content.",
          "lesson": "##Links Unveiled:\nLinks are essential for navigating between web pages. They are represented by the <a> tag and can be text or images.\n\n##Links in Action:\n1. Hyperlinks: Create clickable links with the <a> tag:\n`<a href=\"https://www.example.com/\">Visit Example.com</a>`\n\n\n2. Target Attribute: Specify where the linked document should open:\n`<a href=\"https://www.example.com/\" target=\"_blank\">Visit Example.com</a>`\n\n3. Absolute vs. Relative URLs: Choose between absolute and relative URLs for linking:\n`<a href=\"https://www.example.com/\">Absolute URL</a>`\n`<a href=\"page.html\">Relative URL</a>`\n\n##Images Explored:\nImages enhance the visual appeal of web pages. They are inserted using the <img> tag.\n\n##Images in Action:\n1. Embedding Images: Add images with the <img> tag:\n`<img src=\"image.jpg\" alt=\"Description of image\">`\n\n2. Image Attributes: Define image properties such as width and height:\n`<img src=\"image.jpg\" alt=\"Description of image\" width=\"200\" height=\"150\">`\n",
          "quiz": [
            {
              "question": "What HTML tag is used to create hyperlinks?",
              "options": [
                "A) <link>",
                "B) <a>",
                "C) <href>",
                "D) <url>"
              ],
              "correctAnswer": 1
            },
            {
              "question": "What attribute is used to define the source (URL) of an image in HTML?",
              "options": [
                "A) image-src ",
                "B) link",
                "C) href",
                "D) src"
              ],
              "correctAnswer": 3
            },
            {
              "question": "In HTML, what does the alt attribute of the <img> tag specify?",
              "options": [
                "A) Alignment of the image",
                "B) Alternate text for the image",
                "C) Animation duration",
                "D) Accessible link to the image"
              ],
              "correctAnswer": 1
            },
            {
              "question": "How can you set the width and height of an image in HTML?",
              "options": [
                "A) Using the <size> tag",
                "B) By adding a dimension attribute",
                "C) Using the width and height attributes ",
                "D) Applying CSS styles directly to the image tag"
              ],
              "correctAnswer": 2
            },
            {
              "question": "Which of the following is an example of a relative URL?",
              "options": [
                "A) <a href=\"https://www.example.com/\">Absolute URL</a>",
                "B) <a href=\"page.html\">Relative URL</a> ",
                "C) <a href=\"https://www.example.com/\">Relative URL</a>",
                "D) <a href=\"/page.html\">Absolute URL</a>"
              ],
              "correctAnswer": 1
            }
          ]
        },
        {
          "title": "HTML Lists",
          "content": "##1. Different types of lists (unordered, ordered, other)\n##2. How to declare and organize every list",
          "lesson": "##Unordered lists\nAn unordered list starts with the <ul> tag. Each list item starts with the <li> tag.\nThe list items will be marked with bullets by default.\nExample:\n`<ul>\n  <li>Coffee</li>\n  <li>Tea</li>\n  <li>Milk</li>\n</ul> `\nResults\n$.\\assets\\images\\listsphoto1.jpg\n##Choosing an unordered list item marker\nThe CSS list-style-type property is used to define the style of the list item marker. It can have one of the following values:\n1. disc – Sets the list item marker to a bullet (default) \n2. circle – Sets the list item marker to a circle\n3. square – Sets the list item marker to a square\n4. none – The list items will not be marked\n\n`<ul style=\"list-style-type:square;\">\n  <li>Coffee</li>\n  <li>Tea</li>\n  <li>Milk</li>\n</ul>`\n\nResults:\n$.\\assets\\images\\listsphoto2.png\n\n\n##Ordered lists\nAn ordered list starts with the <ol> tag. Each list item starts with the <li> tag.\nThe list items will be marked with numbers by default.\n\n\n`<ol>\n  <li>Coffee</li>\n  <li>Tea</li>\n  <li>Milk</li>\n</ol>`\n\n\nResults:\n$.\\assets\\images\\listsphoto3.png\n\n##Choosing an ordered list item marker (the type attribute)\nThe type attribute of the <ol> tag, defines the type of the list item marker:\n1. type=\"1\" – The list items will be numbered with numbers (default)\n2. type=\"A\" – The list items will be numbered with uppercase letters\n3. type=\"a\" – The list items will be numbered with lowercase letters\n4. type=\"I\" – The list items will be numbered with uppercase roman numbers\n5. type=\"i\" – The list items will be numbered with lowercase roman numbers\n\n`<ol type=\"a\">\n  <li>Coffee</li>\n  <li>Tea</li>\n  <li>Milk</li>\n</ol>`\n\nResults:\n$.\\assets\\images\\listsphoto4.png\n\n##Description lists\nA description list is a list of terms, with a description of each term.\nThe <dl> tag defines the description list, the <dt> tag defines the term (name), and the <dd> tag describes each term:\n\n\n`<dl>\n  <dt>Coffee</dt>\n  <dd>- black hot drink</dd>\n  <dt>Milk</dt>\n  <dd>- white cold drink</dd>\n</dl>`\n\n\nResults:\n$.\\assets\\images\\listsphoto5.png\n\n\n\n\n\n\n",
          "quiz": [
            {
              "question": "Which HTML tag is used to define an unordered list?",
              "options": [
                "A)  <ol> ",
                "B) <ul>",
                "C) <dl>",
                "D) <li>"
              ],
              "correctAnswer": 1
            },
            {
              "question": "What is the default marker for list items in an unordered list?",
              "options": [
                "A) Numbers",
                "B) Uppercase letters",
                "C) Bullets",
                "D) Lowercase letters"
              ],
              "correctAnswer": 2
            },
            {
              "question": "Which CSS property is used to define the style of the list item marker in an unordered list?",
              "options": [
                "A) list-type-style",
                "B) list-item-marker",
                "C) list-style-type",
                "D) marker-style"
              ],
              "correctAnswer": 2
            },
            {
              "question": "How would you declare an unordered list with circle markers?",
              "options": [
                "A) <ul style=\"list-style-type:square;\">",
                "B) <ul style=\"list-style-type:disc;\">",
                "C) <ul style=\"list-style-type:circle;\">",
                "D) <ul style=\"list-style-type:none;\">"
              ],
              "correctAnswer": 2
            }
          ]
        },
        {
          "title": "HTML Tables",
          "content": "##1. How to declare a table\n##2. Ways to span two columns and rows\n##3. Changing the dimensions of a table\n",
          "lesson": "##HTML Table Tags\n1. <table> – Defines a table\n2. <th> – Defines a header cell in a table\n3. <tr> – Defines a row in a table\n4. <td> – Defines a cell in a table\n5. <caption> –Defines a table caption\n6. <colgroup> – Specifies a group of one or more columns in a table for formatting\n7. <col> – Specifies column properties for each column within a  <colgroup> element\n8. <thead> – Groups the header content in a table\n9. <tbody> – Groups the body content in a table\n10. <tfoot> – Groups the footer content in a table\n\nHTML tables can have different sizes for each column, row or the entire table.\nYou can use the style attribute with the width or height properties to specify the size of a table, row or column.\n\n`<table style=\"width:100%\">\n  <tr>\n    <th style=\"width:70%\">Firstname</th>\n    <th>Lastname</th>\n    <th>Age</th>\n  </tr>\n  <tr>\n    <td>Jill</td>\n    <td>Smith</td>\n    <td>50</td>\n  </tr>\n  <tr>\n    <td>Eve</td>\n    <td>Jackson</td>\n    <td>94</td>\n  </tr>\n</table>`\n\nResults:\n$\n\n\n\nTo make a cell span over multiple columns, use the colspan attribute:\n`<table>\n  <tr>\n    <th colspan=\"2\">Name</th>\n    <th>Age</th>\n  </tr>\n  <tr>\n    <td>Jill</td>\n    <td>Smith</td>\n    <td>43</td>\n  </tr>\n  <tr>\n    <td>Eve</td>\n    <td>Jackson</td>\n    <td>57</td>\n  </tr>\n</table>`\n\nResults:\n$\n\nTo make a cell span over multiple rows, use the rowspan attribute:\n`<table>\n  <tr>\n    <th>Name</th>\n    <td>Jill</td>\n  </tr>\n  <tr>\n    <th rowspan=\"2\">Phone</th>\n    <td>555-1234</td>\n  </tr>\n  <tr>\n    <td>555-8745</td>\n</tr>\n</table>\n`\n\nResults:\n$\n\n",
          "quiz": [
            {
              "question": " Which HTML tag is used to define a table?",
              "options": [
                "A) <table>",
                "B) <tr>",
                "C) <td>",
                "D) <th>"
              ],
              "correctAnswer": 0
            },
            {
              "question": "How can you specify the size of a table using HTML and CSS?",
              "options": [
                "A) By using the <size> attribute within the <table> tag",
                "B) By using the style attribute with width and height properties within the <table> tag",
                "C) By wrapping the table in a <div> with specific dimensions",
                "D) By using the size property within the <table> tag"
              ],
              "correctAnswer": 1
            },
            {
              "question": "What attribute is used to make a cell span over multiple columns in an HTML table? ",
              "options": [
                "A) colspan",
                "B) rowspan",
                "C) span",
                "D) merge"
              ],
              "correctAnswer": 0
            },
            {
              "question": "Which HTML tag is used to define a table caption?",
              "options": [
                "A) <caption>",
                "B) <colgroup>",
                "C) <thead>",
                "D) <tfoot>"
              ],
              "correctAnswer": 0
            },
            {
              "question": "What HTML tag is used to group the header content in a table?",
              "options": [
                "A) <thead>",
                "B)  <tbody>",
                "C) <tfoot>",
                "D) <colgroup>"
              ],
              "correctAnswer": 0
            },
            {
              "question": "How can you make a cell span over multiple rows in an HTML table?",
              "options": [
                "A) By using the rowspan attribute",
                "B) By using the rowmerge attribute",
                "C) By wrapping multiple <td> tags within a single <tr> tag",
                "D) By using the colspan attribute"
              ],
              "correctAnswer": 0
            }
          ]
        },
        {
          "title": "HTML Blocks, Inline and Divs",
          "content": "##1. What is a block-level element\n##2. What are the inline elements\n##3. How do declare a div  \n",
          "lesson": "##Blocks\n\nA block-level element always starts on a new line, and the browsers automatically add some space (a margin) before and after the element.\nA block-level element always takes up the full width available.\n\nTwo commonly used block elements are: <p> and <div>.\nThe <p> element defines a paragraph in an HTML document.\nThe <div> element defines a division or a section in an HTML document.\n\n\n`<p>Hello World</p>\n<div>Hello World</div>\n`\n\nResults:\n$\n\n##Inline Elements\nAn inline element does not start on a new line.\nAn inline element only takes up as much width as necessary.\nThis is a <span> element inside a paragraph.\n\n`<span>Hello World</span>`\n\nResults:\n$\n\n##The <div> Element\nThe <div> element is often used as a container for other HTML elements.\nThe <div> element has no required attributes, but style, class and id are common.\nWhen used together with CSS, the <div> element can be used to style blocks of content.\n\n\n`<div style=\"background-color:black;color:white;padding:20px;\">\n  <h2>London</h2>\n  <p>London is the capital city of England. It is the most populous city in the United Kingdom, with a metropolitan area of over 13 million inhabitants.</p>\n</div>`\n\n\nResults:\n$\n\n\n",
          "quiz": [
            {
              "question": "Which of the following statements about block-level elements is true?",
              "options": [
                "A) They always start on the same line as the previous element.",
                "B) They only take up as much width as necessary.",
                "C) Browsers do not add any space (margin) before or after block-level elements.",
                "D) They always start on a new line, and browsers automatically add space before and after them."
              ],
              "correctAnswer": 3
            },
            {
              "question": "Which HTML element is commonly used as a container for other HTML elements?",
              "options": [
                "A)  <p>",
                "B) <span>",
                "C)  <div>",
                "D)  <section>"
              ],
              "correctAnswer": 2
            },
            {
              "question": "What is the purpose of the <span> element?",
              "options": [
                "A) To define a paragraph in an HTML document.",
                "B) To style blocks of content.",
                "C) To start on a new line.",
                "D) To group inline elements for styling purposes."
              ],
              "correctAnswer": 3
            },
            {
              "question": "What attributes are commonly used with the <div> element?",
              "options": [
                "A) href and src",
                "B)  style, class, and id",
                "C)  type and value",
                "D)  colspan and rowspan"
              ],
              "correctAnswer": 1
            }
          ]
        }
      ],
      "css": [
        {
          "title": "What is CSS?",
          "content": "Here you'll learn what CSS stands for.",
          "lesson": "-> CSS stands for Cascading Style Sheets.\n\n-> CSS describes how HTML elements are to be described on screen, paper, or in other media.\n\n-> CSS saves a lot of work. It can control the layout of multiple web pages all at once.\n",
          "quiz": []
        },
        {
          "title": "CSS Selectors",
          "content": "In this lesson you will learn about selectors and how to operate with them.",
          "lesson": "CSS selectors are used to \"find\" (or select) the HTML elements you want to style.\n\nWe can divide CSS selectors into five categories:\n1. Simple selectors (select elements based on name, id, class)\n2. Combinator selectors (select elements based on a specific relationship between them)\n3. Pseudo-class selectors (select elements based on a certain state)\n4. Pseudo-elements selectors (select and style a part of an element)\n5. Attribute selectors (select elements based on an attribute or attribute value)\n\n#The CSS id Selector\nTo select an element with a specific id, write a hash (#) character, followed by the id of the element.\n##Example:\n`#para1 {\n  text-align: center;\n  color: red;\n}`\n##Result:\n$ .\\assets\\images\\css1.png\n\n#The CSS class Selector\nTo select elements with a specific class, write a period (.) character, followed by the class name.\n##Example:\n`.center {\n  text-align: center;\n  color: red;\n}`\n\n#The CSS Universal Selector\nThe universal selector (*) selects all HTML elements on the page.\n##Example:\n`* {\n  text-align: center;\n  color: blue;\n}`\n\n##The CSS Grouping Selector\nThe grouping selector selects all the HTML elements with the same style definitions.\n##Example:\n`h1, h2, p {\n  text-align: center;\n  color: red;\n}`\n\n#Cheatsheet\n$ .\\assets\\images\\css2.png\n\n",
          "quiz": [
            {
              "question": "How can you select an HTML element with a specific id in CSS?",
              "options": [
                "Using a period (.) followed by the id name",
                "Using a hash (#) followed by the id name",
                "Using an asterisk (*) followed by the id name",
                "Using the id keyword followed by the id name"
              ],
              "correctAnswer": 1
            },
            {
              "question": "Which selector selects all HTML elements on the page?",
              "options": [
                "The class selector",
                "The id selector",
                "The universal selector (*)",
                "The grouping selector"
              ],
              "correctAnswer": 2
            },
            {
              "question": "What type of selector is used to select elements based on a certain state, such as hovering over them?",
              "options": [
                "Simple selectors",
                "Combinator selectors",
                "Pseudo-class selectors",
                "Attribute selectors"
              ],
              "correctAnswer": 2
            },
            {
              "question": "How can you select and style multiple HTML elements with the same style definitions in CSS?",
              "options": [
                "Using a comma (,) followed by the elements' names",
                "Using a period (.) followed by the elements' names",
                " Using a colon (:) followed by the elements' names",
                " Using a semicolon (;) followed by the elements' names"
              ],
              "correctAnswer": 0
            }
          ]
        },
        {
          "title": "CSS Backgrounds",
          "content": "In this lesson, you will learn about the following CSS background properties:\n-> background-color\n-> background-image\n",
          "lesson": "#CSS background-color\n\nThe background-color property specifies the background color of an element.\n\n##Example:\n`h1 {\n  background-color: green;\n}\n\ndiv {\n  background-color: #ff0000;\n}\n\np {\n  background-color: rgb(255,0,0);\n}`\n\n\n#CSS background-image\n\nThe background-image property specifies an image to use as the background of an element.\n\n##Example:\n`body {\n  background-image: url(\"paper.gif\");\n}`\n",
          "quiz": [
            {
              "question": "How does the CSS background-color property work?",
              "options": [
                "It specifies the text color of an element",
                "It specifies the border color of an element",
                "It specifies the background color of an element",
                "It specifies the font color of an element"
              ],
              "correctAnswer": 2
            },
            {
              "question": "What does the CSS background-image property do?",
              "options": [
                "It specifies an image to use as the border of an element",
                "It specifies an image to use as the text color of an element",
                "It specifies an image to use as the background of an element",
                "It specifies an image to use as the font of an element"
              ],
              "correctAnswer": 2
            },
            {
              "question": "Which CSS property is used to set the background color of <h1> elements to green?",
              "options": [
                "color: green;",
                "background-color: green;",
                "border-color: green;",
                "text-color: green;"
              ],
              "correctAnswer": 1
            },
            {
              "question": "How is the background color of <div> elements specified in hexadecimal format?",
              "options": [
                "background-color: green;",
                "background-color: #ff0000;",
                "background-color: rgb(255,0,0);",
                "background-color: red;"
              ],
              "correctAnswer": 1
            }
          ]
        },
        {
          "title": "CSS Borders",
          "content": "In this lesson, you'll learn about the CSS border properties, which allow you to specify the style, width, and color of an element's border.",
          "lesson": "The CSS border properties allow you to specify the style, width, and color of an element's border.\n\nThe border-style property specifies what kind of border to display.\n\nThe following values are allowed:\n-> dotted - Defines a dotted border\n-> dashed - Defines a dashed border\n-> solid - Defines a solid border\n-> double - Defines a double border\n-> groove - Defines a 3D grooved border. The effect depends on the border-color value\n-> ridge - Defines a 3D ridged border. The effect depends on the border-color value\n-> inset - Defines a 3D inset border. The effect depends on the border-color value\n-> outset - Defines a 3D outset border. The effect depends on the border-color value\n-> none - Defines no border\n-> hidden - Defines a hidden border\n\nThe border-style property can have from one to four values (for the top border, right border, bottom border, and the left border).\n\n##Example:\n`p.dotted {border-style: dotted;}\np.dashed {border-style: dashed;}\np.solid {border-style: solid;}\np.double {border-style: double;}\np.groove {border-style: groove;}\np.ridge {border-style: ridge;}\np.inset {border-style: inset;}\np.outset {border-style: outset;}\np.none {border-style: none;}\np.hidden {border-style: hidden;}\np.mix {border-style: dotted dashed solid double;}`\n\n##Result:\n$.\\assets\\images\\css3.png\n\n\n#CSS Border Width\n\nThe border-width property specifies the width of the four borders.\nThe width can be set as a specific size (in px, pt, cm, em, etc) or by using one of the three pre-defined values: thin, medium, or thick:\n\n##Example:\n`p.one {\n  border-style: solid;\n  border-width: 5px;\n}\n\np.two {\n  border-style: solid;\n  border-width: medium;\n}`\n\n##Result:\n$.\\assets\\images\\css4.png\n\n\n##CSS Border Color\n\nThe border-color property is used to set the color of the four borders.\nThe color can be set by:\n1. name - specify a color name, like \"red\"\n2. HEX - specify a HEX value, like \"#ff0000\"\n3. RGB - specify a RGB value, like \"rgb(255,0,0)\"\n4. HSL - specify a HSL value, like \"hsl(0, 100%, 50%)\"\n5. transparent\n\n##Example:\n`p.one {\n  border-style: solid;\n  border-color: red;\n}\n\np.two {\n  border-style: solid;\n  border-color: green;\n}\n\np.three {\n  border-style: dotted;\n  border-color: blue;\n}`\n\n##Result:\n$.\\assets\\images\\css5.png\n\n\n",
          "quiz": [
            {
              "question": "What does the CSS border-style property specify?",
              "options": [
                "The width of an element's border",
                "The color of an element's border",
                "The kind of border to display",
                "The position of an element's border"
              ],
              "correctAnswer": 2
            },
            {
              "question": "How many values can the border-style property have?",
              "options": [
                "1",
                "2",
                "3",
                "4"
              ],
              "correctAnswer": 3
            },
            {
              "question": "How can you specify the width of a border using CSS?",
              "options": [
                "Using the border-color property",
                "Using the border-image property",
                "Using the border-width property",
                "Using the border-style property"
              ],
              "correctAnswer": 2
            },
            {
              "question": "Which value is used to specify a border color using a color name in CSS?",
              "options": [
                "HEX",
                "RGB",
                "Name",
                "HSL"
              ],
              "correctAnswer": 2
            }
          ]
        },
        {
          "title": "CSS Margins",
          "content": "In this lesson, you'll learn how to use CSS margin properties to create space around elements. ",
          "lesson": "Margins are used to create space around elements, outside of any defined borders.\n\nCSS has properties for specifying the margin for each side of an element:\n1. margin-top\n2. margin-right\n3. margin-bottom\n5. margin-left\nAll the margin properties can have the following values:\n1. auto - the browser calculates the margin\n2. length - specifies a margin in px, pt, cm, etc.\n3. % - specifies a margin in % of the width of the containing element\n4. inherit - specifies that the margin should be inherited from the parent element\n##Example:\n`p {\n  margin-top: 100px;\n  margin-bottom: 100px;\n  margin-right: 150px;\n  margin-left: 80px;\n}`\n\nIf the margin property has four values:\n##Example:\n`margin: 25px 50px 75px 100px;`\n    ->top margin is 25px\n    ->right margin is 50px\n    ->bottom margin is 75px\n    ->left margin is 100px\n\n##Result:\n$.\\assets\\images\\css6.png",
          "quiz": [
            {
              "question": "What are margins used for in CSS?",
              "options": [
                "To change the color of elements",
                "To create space around elements",
                "To set the font size of elements",
                "To apply animations to elements"
              ],
              "correctAnswer": 1
            },
            {
              "question": "Which CSS properties are used to specify margins for each side of an element individually?",
              "options": [
                "padding",
                "spacing",
                "margin-top, margin-right, margin-bottom, margin-left",
                "margin-all"
              ],
              "correctAnswer": 2
            },
            {
              "question": "If the margin property has four values like \"margin: 25px 50px 75px 100px;\" which side does the second value (50px) represent?",
              "options": [
                "Top margin",
                "Bottom margin",
                "Left margin",
                "Right margin"
              ],
              "correctAnswer": 3
            },
            {
              "question": "What does the inherit value for margin properties do?",
              "options": [
                "It calculates the margin automatically",
                "It sets the margin to a fixed length",
                "It specifies that the margin should be inherited from the parent element",
                "It sets the margin to a percentage value"
              ],
              "correctAnswer": 2
            }
          ]
        },
        {
          "title": "CSS Padding",
          "content": "In this lesson, you'll learn about CSS padding, which is used to create space around an element's content, inside of any defined borders.",
          "lesson": "Padding is used to create space around an element's content, inside of any defined borders.\nTo shorten the code, it is possible to specify all the padding properties in one property.\nThe padding property is a shorthand property for the following individual padding properties:\n1. padding-top\n2. padding-right\n3. padding-bottom\n4. padding-left\n\nSo, here is how it works:\nIf the padding property has four values,\npadding: 25px 50px 75px 100px;\n      -> top padding is 25px\n      -> right padding is 50px\n      -> bottom padding is 75px\n      -> left padding is 100px\n##Example:\n`div {\n  padding: 25px 50px 75px 100px;\n}`\n##Result:\n$.\\assets\\images\\css7.png",
          "quiz": [
            {
              "question": "What is padding used for in CSS?",
              "options": [
                "To change the color of elements",
                "To create space around an element's content, inside of any defined borders",
                "To specify the font size of elements",
                "To apply animations to elements"
              ],
              "correctAnswer": 1
            },
            {
              "question": "What does the padding shorthand property allow you to do?",
              "options": [
                "It sets the padding to a fixed length",
                "It calculates the padding automatically",
                "It specifies all padding properties in one line",
                "It sets the padding to a percentage value"
              ],
              "correctAnswer": 2
            },
            {
              "question": "How can you specify padding for all sides of an element using the padding shorthand property?",
              "options": [
                "By providing one value for all sides",
                "By providing two values for top and bottom, and two values for left and right",
                "By using the auto keyword",
                "By providing four values for top, right, bottom, and left"
              ],
              "correctAnswer": 3
            },
            {
              "question": "What does it mean if you specify only one value for the padding property?",
              "options": [
                "It applies the same padding to all sides",
                "It sets the padding to a fixed length",
                "It sets the padding to a percentage value",
                "It calculates the padding automatically"
              ],
              "correctAnswer": 0
            }
          ]
        },
        {
          "title": "CSS Height/Width",
          "content": "By the end of this lesson, you will understand how to use CSS properties to control the dimensions of HTML elements.",
          "lesson": " #CSS Height and Width:\nThe height and width properties in CSS are used to set the height and width of an element.\nThese properties determine the size of the content area inside the padding, border, and margin of an element.\nThey can be set using different units like pixels (px), percentages (%), or other length units (e.g., cm).\n##Example:\n`div {\n  height: 200px;\n  width: 50%;\n}`\nIn this example, a <div> element is styled with a height of 200 pixels and a width of 50% of its containing block.\n\n#CSS Max-Width:\nThe max-width property is used to set the maximum width that an element can have.\nIt prevents an element from exceeding a certain width, even if the content inside it requires more space.\nMax-width can be specified in length units (like pixels) or as a percentage of its containing block.\n##Example:\n`div {\n  max-width: 500px;\n  height: 100px;\n}`\nHere, a <div> element is styled with a maximum width of 500 pixels and a height of 100 pixels.\n\n#Differences Between Width and Max-Width:\nIf both width and max-width are applied to the same element and the width value exceeds the max-width value, the max-width property will be used, and the width property will be ignored.\nMax-width is particularly useful for ensuring that elements don't overflow their containers, especially on smaller screens or when the content dynamically changes size.\n\n#Summary:\n-> CSS offers properties like height, width, and max-width to control the dimensions of HTML elements.\n-> Height and width determine the size of the content area inside an element.\n-> Max-width sets the maximum width an element can have, preventing it from exceeding a certain size.\n",
          "quiz": [
            {
              "question": "What do the height and width properties in CSS determine?",
              "options": [
                "The size of the padding, border, and margin of an element",
                "The size of the content area inside the padding, border, and margin of an element",
                "The size of the entire element, including padding, border, and margin",
                "The size of the element's container"
              ],
              "correctAnswer": 1
            },
            {
              "question": "How can you specify the height and width of an element in CSS?",
              "options": [
                "Only in pixels (px)",
                "Only in percentages (%)",
                "In pixels, percentages, or other length units (e.g., cm)",
                "Only in centimeters"
              ],
              "correctAnswer": 2
            },
            {
              "question": "What does the max-width property in CSS do?",
              "options": [
                "Sets the maximum width that an element can have",
                "Sets the minimum width that an element can have",
                "Sets the maximum height that an element can have",
                "Sets the width of an element to a fixed value"
              ],
              "correctAnswer": 0
            },
            {
              "question": "If both width and max-width are applied to the same element and the width value exceeds the max-width value, which property takes precedence?",
              "options": [
                "Width",
                "Both properties are ignored",
                "Max-width",
                "It depends on the browser"
              ],
              "correctAnswer": 2
            },
            {
              "question": "When is the max-width property particularly useful?",
              "options": [
                "For setting a fixed width for an element",
                "For increasing the width of an element dynamically",
                "For setting the width of an element to a percentage value",
                "For ensuring that elements don't overflow their containers"
              ],
              "correctAnswer": 3
            }
          ]
        },
        {
          "title": "CSS Position",
          "content": "# You will understand how to use the CSS position property to control the positioning of HTML elements on a webpage.\n",
          "lesson": "The position property specifies the type of positioning method used for an element.\nThere are five different position values: static, relative, fixed, absolute, and sticky.\n\n##1. Static Positioning\nStatic positioned elements are not affected by the top, bottom, left, and right properties.\nThey are positioned according to the normal flow of the page.\n\nExample:\n`div.static {\n  position: static;\n  border: 3px solid #73AD21;\n}`\n\n##2.Relative Positioning\nElements with position: relative; are positioned relative to their normal position.\nAdjusting the top, bottom, left, and right properties of a relatively-positioned element moves it away from its normal position.\n\nExample:\n`div.relative {\n  position: relative;\n  left: 30px;\n  border: 3px solid #73AD21;\n}`\n\n##3.Fixed Positioning:\nElements with position: fixed; are positioned relative to the viewport.\nThey remain in the same place even when the page is scrolled.\nUseful for creating elements like fixed headers or footers.\n\nExample:\n`div.fixed {\n  position: fixed;\n  bottom: 0;\n  right: 0;\n  width: 300px;\n  border: 3px solid #73AD21;\n}`\n\n##4.Absolute Positioning:\nElements with position: absolute; are positioned relative to the nearest positioned ancestor.\nAbsolute positioned elements are removed from the normal flow and can overlap other elements.\n\nExample:\n`div.relative {\n  position: relative;\n  width: 400px;\n  height: 200px;\n  border: 3px solid #73AD21;\n}\ndiv.absolute {\n  position: absolute;\n  top: 80px;\n  right: 0;\n  width: 200px;\n  height: 100px;\n  border: 3px solid #73AD21;\n}`\n\n$./assets/images/css8.png",
          "quiz": [
            {
              "question": "What does the CSS position property specify?",
              "options": [
                "Element's color",
                "Element's positioning method",
                "Element's font size",
                "Element's visibility"
              ],
              "correctAnswer": 1
            },
            {
              "question": "Which of the following is a valid value for the CSS position property?",
              "options": [
                "Inline",
                "Center",
                "Relative",
                "Bold"
              ],
              "correctAnswer": 2
            },
            {
              "question": "How are static positioned elements affected by top, bottom, left, and right properties?",
              "options": [
                "They are not affected",
                " They move based on these properties",
                " They become invisible",
                "They change color"
              ],
              "correctAnswer": 0
            },
            {
              "question": "Which positioning method is used for elements that should remain in the same place even when the page is scrolled?",
              "options": [
                "Absolute",
                "Fixed",
                "Relative"
              ],
              "correctAnswer": 1
            },
            {
              "question": "In absolute positioning, elements are positioned relative to:",
              "options": [
                "The viewport",
                "Their parent element",
                "The nearest positioned ancestor",
                "The document body"
              ],
              "correctAnswer": 2
            }
          ]
        },
        {
          "title": "CSS Z-index",
          "content": "#You will understand how to use the CSS z-index property to control the stacking order of elements on a webpage.\n",
          "lesson": "The z-index property specifies the stack order of an element, determining which element should be placed in front of or behind others.\nAn element with a higher z-index value will be placed in front of elements with lower z-index values.\n\n##1.Positive and Negative Stack Order\nPositive values bring elements forward, while negative values push elements backward.\n\nExample:\n`img {\n  position: absolute;\n  left: 0px;\n  top: 0px;\n  z-index: -1;\n}`\n\n$./assets/images/css8.png\n\n##Note:\nZ-index only works on positioned elements (position: absolute, position: relative, position: fixed, or position: sticky) and flex items.\n",
          "quiz": [
            {
              "question": "What does the CSS z-index property control?",
              "options": [
                "Element's color",
                "Element's font size",
                "Element's stacking order",
                " Element's visibility"
              ],
              "correctAnswer": 2
            },
            {
              "question": "What does a higher z-index value indicate for an element?",
              "options": [
                " It should be pushed backward",
                "It should be placed behind other elements",
                "It should be brought forward",
                " It should be hidden"
              ],
              "correctAnswer": 2
            },
            {
              "question": "Which types of elements does the z-index property work on?",
              "options": [
                " All HTML elements",
                "Only text elements",
                " Positioned elements and flex items",
                "Inline elements"
              ],
              "correctAnswer": 2
            },
            {
              "question": "What does a negative z-index value do to an element?",
              "options": [
                "Brings it forward",
                "Pushes it backward",
                " Makes it invisible",
                " Increases its size"
              ],
              "correctAnswer": 1
            },
            {
              "question": "In the example provided, what positioning method is used for the element with z-index: -1?",
              "options": [
                "Relative",
                "Fixed",
                "Absolute",
                "Sticky"
              ],
              "correctAnswer": 2
            }
          ]
        },
        {
          "title": "CSS Align",
          "content": "# You will understand how to use CSS properties to horizontally and vertically align elements on a webpage.\n",
          "lesson": "##1.Horizontal Alignment\nTo horizontally center a block element (e.g., <div>), use margin: auto;.\nSet the width of the element to prevent it from stretching out to the edges of its container.\nNote: Center aligning has no effect if the width property is not set (or set to 100%).\n\n`.center {\n  margin: auto;\n  width: 50%;\n  border: 3px solid green;\n  padding: 10px;\n}`\n\n$./assets/images/css10.png\n\nTo center text inside an element, use text-align: center;.\n`.center {\n  text-align: center;\n  border: 3px solid green;\n}`\n\n$./assets/images/css11.png\n\nTo center an image, set left and right margins to auto and make it a block element.\n`img {\n  display: block;\n  margin-left: auto;\n  margin-right: auto;\n  width: 40%;\n}`\n\n$./assets/images/css12.png\n\n##Vertical Alignment:\nCentering Elements Vertically:\nUsing Padding:\nAdd top and bottom padding to center vertically.\n`.center {\n  padding: 70px 0;\n  border: 3px solid green;\n}`\n\n$./assets/images/css13.png\n\nUsing Line-Height:\nSet line-height equal to the height of the element.\n`.center {\n  line-height: 200px;\n  height: 200px;\n  border: 3px solid green;\n  text-align: center;\n}`\n- For multiple lines of text, use `display: inline-block;` and `vertical-align: middle;`.\n`.center p {\n  line-height: 1.5;\n  display: inline-block;\n  vertical-align: middle;\n}`\n\n$./assets/images/css14.png",
          "quiz": [
            {
              "question": "How can you horizontally center a block element like <div>?",
              "options": [
                "Use margin-left: auto;",
                "Use text-align: center;",
                "Use margin: auto; and set a width",
                "Use padding: auto;"
              ],
              "correctAnswer": 2
            },
            {
              "question": "What effect does setting text-align: center; have?",
              "options": [
                "Centers the element horizontally",
                " Centers the text vertically",
                " Centers the element vertically",
                "Centers the text horizontally"
              ],
              "correctAnswer": 0
            },
            {
              "question": "How can you center an image horizontally?",
              "options": [
                "Use margin: auto;",
                "Use text-align: center;",
                " Set left and right margins to auto and display: block;",
                "Set line-height equal to the height of the image"
              ],
              "correctAnswer": 2
            },
            {
              "question": "Which property can you use to center an element vertically by adding padding?",
              "options": [
                "Margin",
                "Padding",
                "Line-height",
                "Vertical-align"
              ],
              "correctAnswer": 1
            },
            {
              "question": "For multiple lines of text, what combination of CSS properties can you use to vertically center the text?",
              "options": [
                "Padding and line-height",
                "Display: inline-block; and vertical-align: middle;",
                "Text-align: center; and line-height",
                "Margin: auto; and width"
              ],
              "correctAnswer": 1
            },
            {
              "question": "What property can you use to vertically center an element by setting its line-height equal to its height?",
              "options": [
                "Margin",
                "Padding",
                "Line-height",
                "Vertical-align"
              ],
              "correctAnswer": 2
            },
            {
              "question": "How can you center multiple lines of text vertically within a container?",
              "options": [
                "Use margin: auto; and set a height",
                " Use text-align: center; and line-height",
                "Use display: inline-block; and vertical-align: middle;",
                " Use padding: auto; and line-height"
              ],
              "correctAnswer": 2
            }
          ]
        }
      ],
      "js": [
        {
          "title": "Introduction to JS",
          "content": "##Welcome to the Introduction to JavaScript lesson! In this lesson, we'll discover the essential elements of JavaScript to get you started on your web development journey:\n\n1. The purpose and significance of JavaScript in web development.\n2. Basic syntax and structure of JavaScript.\n3. How to include JavaScript in an HTML document.\n",
          "lesson": "# The Role of JavaScript\nJavaScript is a versatile programming language that enables interactive web pages. It runs on the client-side, meaning it executes in the user's browser, providing a dynamic and engaging experience.\n\n#Basic Syntax and Structure\nJavaScript code is written in script tags and can be included directly within an HTML document or linked as an external file.\n\nExample:\n`html\n<!DOCTYPE html>\n<html>\n<head>\n    <title>JavaScript Introduction</title>\n</head>\n<body>\n    <h1>Welcome to JavaScript!</h1>\n    <script>\n        alert('Hello, World!');\n    </script>\n</body>\n</html>\n`\n\n#Including JavaScript\n1. Inline Script: Placed within the `<script>` tags inside an HTML document.\n2. External Script: Stored in a separate file with a `.js` extension and linked using the `<script src=\"path/to/script.js\"></script>` tag.\n\n",
          "quiz": [
            {
              "question": "What is JavaScript primarily used for in web development?",
              "options": [
                "A) Styling web pages",
                "B) Creating interactive and dynamic web pages",
                "C) Structuring web content",
                "D) Managing databases"
              ],
              "correctAnswer": 1
            },
            {
              "question": "How can JavaScript be included in an HTML document?",
              "options": [
                "A) Using `<link>` tags",
                "B) Using `<script>` tags",
                "C) Using `<style>` tags",
                "D) Using `<meta>` tags"
              ],
              "correctAnswer": 1
            },
            {
              "question": "Where does JavaScript code execute?",
              "options": [
                "A) On the server",
                "B) In the database",
                "C) In the user's browser",
                "D) In the HTML file"
              ],
              "correctAnswer": 2
            }
          ]
        },
        {
          "title": "Variable and Data Types",
          "content": "1. How to declare and use variables in JavaScript.\n2. Understanding different data types.\n3. Basic operations on variables.\n",
          "lesson": "#Variables in JavaScript\nVariables are containers for storing data values. You can declare a variable using `var`, `let`, or `const`.\n\nExample:\n`javascript\nlet name = 'John';\nconst age = 25;\nvar isStudent = true;\n`\n\n#Data Types\n1. String: Text, enclosed in quotes (`'Hello'`, `\"World\"`).\n2. Number: Numeric values (`25`, `3.14`).\n3. Boolean: True or false values (`true`, `false`).\n4. Undefined: A variable without a value.\n5. Null: Represents the intentional absence of any object value.\n\n#Basic Operations\n`javascript\nlet x = 10;\nlet y = 20;\nlet sum = x + y; // 30\nlet message = 'Hello, ' + 'World!'; // \"Hello, World!\"\n`\n",
          "quiz": [
            {
              "question": "Which keyword is used to declare a variable that cannot be reassigned?",
              "options": [
                "A) var",
                " B) let",
                " C) const",
                "D) int"
              ],
              "correctAnswer": 2
            },
            {
              "question": "What is the data type of `true` in JavaScript?",
              "options": [
                "A) String",
                "B) Number",
                "C) Boolean",
                "D) Undefined"
              ],
              "correctAnswer": 2
            },
            {
              "question": "What will the following code output? `javascript    let a = 5;    let b = '5';    console.log(a + b);    `",
              "options": [
                "A) 10",
                "B) '55'",
                "C) '10'",
                "D) '5'"
              ],
              "correctAnswer": 1
            }
          ]
        },
        {
          "title": "Functions and Scope",
          "content": "1. How to define and call functions in JavaScript.\n2. Understanding function scope and variable scope.\n",
          "lesson": "#Functions\nFunctions are blocks of code designed to perform a particular task. They are executed when called.\n\nExample:\n`javascript\nfunction greet(name) {\n    return 'Hello, ' + name + '!';\n}\nlet message = greet('Alice'); // \"Hello, Alice!\"\n`\n\n#Scope\n1. Global Scope: Variables declared outside any function, accessible anywhere in the code.\n2. Local Scope: Variables declared within a function, accessible only within that function.\n\nExample:\n`javascript\nlet globalVar = 'I am global';\n\nfunction checkScope() {\n    let localVar = 'I am local';\n    console.log(globalVar); // Accessible\n    console.log(localVar);  // Accessible\n}\nconsole.log(globalVar); // Accessible\nconsole.log(localVar);  // Uncaught ReferenceError\n`\n\n\n",
          "quiz": [
            {
              "question": "What is the correct way to define a function in JavaScript?",
              "options": [
                " A) `function myFunction() {}`",
                "B) `myFunction function() {}`",
                "C) `define myFunction() {}`",
                " D) `function: myFunction() {}`"
              ],
              "correctAnswer": 0
            },
            {
              "question": "What will the following code output? `javascript    function test() {        let x = 1;        if (true) {            let x = 2;            console.log(x);        }        console.log(x);    }    test();    `",
              "options": [
                " A) 1, 1",
                "B) 2, 1",
                "C) 1, 2",
                "D) 2, 2"
              ],
              "correctAnswer": 1
            },
            {
              "question": "Which scope is a variable in when declared within a function?",
              "options": [
                "A) Global",
                " B) Local",
                "C) Block",
                "D) Module"
              ],
              "correctAnswer": 1
            }
          ]
        },
        {
          "title": "Conditionals and Loops",
          "content": "1. Using conditional statements to control the flow of your program.\n2. Different types of loops for repetitive tasks.\n",
          "lesson": "#Conditionals\nConditional statements execute code based on a condition (`if`, `else`, `else if`).\n\nExample:\n`javascript\nlet age = 18;\nif (age >= 18) {\n    console.log('You are an adult.');\n} else {\n    console.log('You are a minor.');\n}\n`\n\n#Loops\nLoops repeat a block of code as long as a condition is met (`for`, `while`, `do...while`).\n\nExample:\n`javascript\nfor (let i = 0; i < 5; i++) {\n    console.log(i); // 0, 1, 2, 3, 4\n}\n\nlet count = 0;\nwhile (count < 5) {\n    console.log(count);\n    count++;\n}\n`\n\n",
          "quiz": [
            {
              "question": "Which of the following is a conditional statement in JavaScript?",
              "options": [
                "A) `loop`",
                "B) `switch`",
                "C) `if`",
                "D) `function`"
              ],
              "correctAnswer": 2
            },
            {
              "question": "What will the following code output? `javascript    let i = 0;    while (i < 3) {        console.log(i);        i++;    }    `",
              "options": [
                "A) 0, 1",
                "B) 1, 2, 3",
                "C) 0, 1, 2",
                "D) 0, 1, 2, 3"
              ],
              "correctAnswer": 2
            },
            {
              "question": "How do you create a loop that executes at least once regardless of the condition?",
              "options": [
                "A) `for` loop",
                "B) `while` loop",
                "C) `do...while` loop",
                "D) `foreach` loop"
              ],
              "correctAnswer": 2
            }
          ]
        },
        {
          "title": "Arrays and Objects",
          "content": "1. How to work with arrays and objects.\n2. Basic operations on arrays and objects.\n",
          "lesson": "#Arrays\nArrays are used to store multiple values in a single variable.\n\nExample:\n`javascript\nlet fruits = ['Apple', 'Banana', 'Cherry'];\nconsole.log(fruits[0]); // \"Apple\"\nconsole.log(fruits.length); // 3\n`\n\n#Objects\nObjects are collections of key-value pairs.\n\nExample:\n`javascript\nlet person = {\n    firstName: 'John',\n    lastName: 'Doe',\n    age: 30\n};\nconsole.log(person.firstName); // \"John\"\nconsole.log(person['lastName']); // \"Doe\"\n`\n",
          "quiz": [
            {
              "question": "What is the correct way to declare an array in JavaScript?",
              "options": [
                "A) `let arr = 'Apple', 'Banana', 'Cherry';`",
                "B) `let arr = ['Apple', 'Banana', 'Cherry'];`",
                "C) `let arr = (Apple, Banana, Cherry);`",
                "D) `let arr = {Apple, Banana, Cherry};`"
              ],
              "correctAnswer": 1
            },
            {
              "question": "How do you access the value \"Doe\" from the following object? `javascript    let person = { firstName: 'John', lastName: 'Doe', age: 30 };    `",
              "options": [
                "A) `person.name`",
                "B) `person.lastName`",
                "C) `person['age']`",
                "D) `person[1]`"
              ],
              "correctAnswer": 1
            },
            {
              "question": "What will the following code output? `javascript    let colors = ['Red', 'Green', 'Blue'];    console.log(colors.length);    `",
              "options": [
                " A) 2",
                "B) 3",
                "C) 4",
                "D) 5"
              ],
              "correctAnswer": 1
            }
          ]
        },
        {
          "title": "DOM Manipulation",
          "content": "1. How to access and modify the DOM (Document Object Model).\n2. Using JavaScript to change HTML content and styles.\n",
          "lesson": "#Accessing the DOM\nYou can use methods like `getElementById`, `getElements\n\nByClassName`, and `querySelector` to access HTML elements.\n\nExample:\n`javascript\nlet element = document.getElementById('myElement');\n`\n\n#Modifying HTML Content\n`javascript\nlet header = document.getElementById('header');\nheader.innerHTML = 'New Header Text';\n`\n\n#Changing Styles\n`javascript\nheader.style.color = 'blue';\n`\n",
          "quiz": [
            {
              "question": " Which method is used to access an element by its ID?",
              "options": [
                "A) `document.getElementById`",
                "B) `document.querySelectorAll`",
                "C) `document.getElementByClassName`",
                "D) `document.querySelector`"
              ],
              "correctAnswer": 0
            },
            {
              "question": "What will the following code do? `javascript    let paragraph = document.querySelector('p');    paragraph.style.fontSize = '20px';    `",
              "options": [
                "A) Change the font size of the first paragraph to 20px",
                "B) Change the font size of all paragraphs to 20px",
                "C) Change the font size of the paragraph with ID 'p' to 20px",
                "D) Change the font size of the last paragraph to 20px"
              ],
              "correctAnswer": 0
            },
            {
              "question": " How do you change the inner HTML of an element with the ID 'content'?",
              "options": [
                "A)`document.getElementById('content').innerHTML = 'New Content';`",
                "B) `document.querySelector('content').innerHTML = 'New Content';`",
                "C)`document.getElementByClassName('content').innerHTML = 'New Content';`",
                "D)`document.getElementByTagName('content').innerHTML = 'New Content';`"
              ],
              "correctAnswer": 0
            }
          ]
        },
        {
          "title": "Event Handling",
          "content": "1. How to handle events in JavaScript.\n2. Common events like click, mouseover, and keypress.\n",
          "lesson": "#Adding Event Listeners\nUse `addEventListener` to attach events to elements.\n\nExample:\n`javascript\nlet button = document.getElementById('myButton');\nbutton.addEventListener('click', function() {\n    alert('Button clicked!');\n});\n`\n\n#Common Events:\n1. click: Triggered when an element is clicked.\n2. mouseover: Triggered when the mouse hovers over an element.\n3. keypress: Triggered when a key is pressed.\n\n",
          "quiz": [
            {
              "question": "What is the correct way to attach a click event to a button with the ID 'submitBtn'?",
              "options": [
                "A) `submitBtn.on('click', function() {});`",
                "B) `submitBtn.addEventListener('click', function() {});`",
                "C) `submitBtn.click(function() {});`",
                "D) `submitBtn.attachEvent('click', function() {});`"
              ],
              "correctAnswer": 1
            },
            {
              "question": "What event is triggered when a user hovers over an element?",
              "options": [
                "A) `hover`",
                "B) `mouseover`",
                "C) `mouseenter`",
                "D) `mouseleave`"
              ],
              "correctAnswer": 1
            },
            {
              "question": "How do you remove an event listener?",
              "options": [
                "A) `element.removeEventListener('event', function);`",
                "B) `element.detachEvent('event', function);`",
                "C) `element.off('event', function);`",
                "D) `element.deleteEventListener('event', function);`"
              ],
              "correctAnswer": 0
            }
          ]
        },
        {
          "title": "Working with Forms",
          "content": "1. How to interact with form elements using JavaScript.\n2. Validating form inputs.\n",
          "lesson": "#Accessing Form Elements\nYou can use `document.forms` to access form elements.\n\nExample:\n`javascript\nlet form = document.forms['myForm'];\nlet nameInput = form['name'];\n`\nInteracting with forms is a crucial aspect of web development. The document.forms property allows you to access form elements by their name or index. This is particularly useful when you need to retrieve user input or perform form validation using JavaScript.\n\n#Form Validation\n`javascript\nfunction validateForm() {\n    let x = document.forms['myForm']['name'].value;\n    if (x == '') {\n        alert('Name must be filled out');\n        return false;\n    }\n}\n`\n",
          "quiz": [
            {
              "question": "How do you access the value of an input field with the name 'username' in a form named 'loginForm'?",
              "options": [
                "A) `document.forms['loginForm']['username'].value`",
                "B) `document.forms['loginForm'].username.value`",
                "C) `document.getElementById('username').value'",
                " D) `document.forms.username.value`"
              ],
              "correctAnswer": 0
            },
            {
              "question": "What will the following function do? `javascript    function validate() {        let email = document.forms['contactForm']['email'].value;        if (email == '') {            alert('Email must be filled out');            return false;        }    }    `",
              "options": [
                "A) Submit the form",
                "B) Check if the email field is empty",
                " C) Clear the email field",
                "D) Return true if the email field is filled"
              ],
              "correctAnswer": 1
            },
            {
              "question": "What method is used to prevent the default form submission?",
              "options": [
                "A) `stopPropagation`",
                "B) `preventDefault`",
                "C) `return false`",
                "D) `stopDefault`"
              ],
              "correctAnswer": 1
            }
          ]
        },
        {
          "title": "Introduction to ES6",
          "content": "1. New features in ES6 (ECMAScript 2015).\n2. Arrow functions, template literals, and `let`/`const`.\n",
          "lesson": "ES6 introduced several new features and enhancements to JavaScript, making it more expressive and concise. Arrow functions provide a shorter syntax for defining functions, template literals allow interpolation of variables within strings, and let and const offer block-scoped variable declarations, providing more predictable behavior compared to var.\n\n#Arrow Functions\nConcise syntax for writing functions.\n\nExample:\n`javascript\nlet add = (a, b) => a + b;\nconsole.log(add(2, 3)); // 5\n`\n\n#Template Literals\nAllows embedding expressions within strings.\n\nExample:\n`javascript\nlet name = 'John';\nlet message = 'Hello, ${name}!';\nconsole.log(message); // \"Hello, John!\"\n`\n\n#'let' and 'const'\nBlock-scoped variables.\n\nExample:\n`javascript\nlet age = 30;\nconst birthYear = 1994;\n`\n",
          "quiz": [
            {
              "question": "What is the advantage of using arrow functions in JavaScript?",
              "options": [
                "A) They are more powerful than regular functions.",
                "B) They have a shorter syntax and bind the 'this' value lexically.",
                "C) They can be used only in classes.",
                "D) They are used for asynchronous operations."
              ],
              "correctAnswer": 1
            },
            {
              "question": "How do you define a block-scoped variable in ES6?",
              "options": [
                "A) `var`",
                "B) `let`",
                "C) `const`",
                "D) Both B and C"
              ],
              "correctAnswer": 3
            },
            {
              "question": "What will the following code output? `javascript    let name = 'Alice';    let greeting = `Hello, ${name}!`;    console.log(greeting);    `",
              "options": [
                "A) \"Hello, Alice!\"",
                "B) 'Hello, ${name}!'",
                "C) \"Hello, name!\"",
                "D) 'Hello, Alice!'"
              ],
              "correctAnswer": 0
            }
          ]
        }
      ],
      "python": [
        {
          "title": "Python Syntax",
          "content": "#Python Syntax\n##Python syntax is designed to be clear and concise, making it easy to write and understand code. Statements are typically written on separate lines, and indentation is used to indicate code blocks.\n",
          "lesson": "##Python Indentation\nIndentation refers to the spaces at the beginning of a code line.\n\nWhere in other programming languages the indentation in code is for readability only, the indentation in Python is very important.\n\nPython uses indentation to indicate a block of code.\nThe number of spaces is up to you as a programmer, the most common use is four, but it has to be at least one.\nYou have to use the same number of spaces in the same block of code, otherwise Python will give you an error\n##Comments\nPython has commenting capability for the purpose of in-code documentation.\n`if 5 > 2:\n print(\"Five is greater than two!\") \nif 5 > 2:\n        print(\"Five is greater than two!\")`\n\nComments start with a #, and Python will render the rest of the line as a comment:\n`#This is a comment.\nprint(\"Hello, World!\")`\n#Python Variables\nIn Python, variables are created when you assign a value to it:\n`x = 5\ny = \"Hello, World!\"`\n#Python has no command for declaring a variable.\n#You will learn more about variables in the Python Variables chapter.",
          "quiz": [
            {
              "question": "How do we denote a multi-line block of code in Python?",
              "options": [
                " Using square brackets []",
                " Using parentheses ()",
                "Using curly braces {}",
                " Using indentation"
              ],
              "correctAnswer": 3
            },
            {
              "question": "What symbol do we use to indicate comments in Python?",
              "options": [
                "//",
                "#",
                "%%",
                "/* */",
                "#"
              ],
              "correctAnswer": 1
            }
          ]
        },
        {
          "title": "Python Variables",
          "content": "#Python Variables\n##Variables are used to store data values in Python. They are assigned using the equals sign (=) and can hold different types of data, such as numbers, strings, or booleans.",
          "lesson": "#Variables are containers for storing data values.\n##Creating Variables\nPython has no command for declaring a variable.\nA variable is created the moment you first assign a value to it.\n`x = 5\ny = \"John\"\nprint(x)\nprint(y)`\nVariables do not need to be declared with any particular type, and can even change type after they have been set.\n##If you want to specify the data type of a variable, this can be done with casting.\n`x = str(3)    # x will be '3'\ny = int(3)    # y will be 3\nz = float(3)  # z will be 3.0`\n##Get the Type\nYou can get the data type of a variable with the type() function.\n`x = 5\ny = \"John\"\nprint(type(x))\nprint(type(y))`\n##Single or Double Quotes?\nString variables can be declared either by using single or double quotes:\n`x = \"John\"\n# is the same as\nx = 'John'`",
          "quiz": [
            {
              "question": "What data type is used for storing whole numbers in Python?",
              "options": [
                "str",
                "int",
                "float",
                " bool"
              ],
              "correctAnswer": 1
            },
            {
              "question": "What is the result of the following code snippet?(x = 5 y = \"Hello\" print(x + y))",
              "options": [
                "5Hello",
                "Hello5",
                "TypeError",
                "10"
              ],
              "correctAnswer": 2
            }
          ]
        },
        {
          "title": "Python Operators",
          "content": "#Python Operators\n##Operators are symbols used to perform operations on variables and values. Python supports various types of operators, including arithmetic, comparison, logical, and assignment operators.",
          "lesson": "##Operators are used to perform operations on variables and values.\n\nIn the example below, we use the + operator to add together two values:\n`print(10 + 5)`\n\nPython divides the operators in the following groups:\n\n-Arithmetic operators\n-Assignment operators\n-Comparison operators\n-Logical operators\n-Identity operators\n-Membership operators\n-Bitwise operators\n`# Arithmetic operators\nx = 5 + 3\ny = 5 * 3\nz = 5 / 2\n# Comparison operators\na = 5 > 2\nb = 5 == 2\nc = 5 != 2\n# Logical operators\np = True and False\nq = True or False\n# Assignment operators\nx += 1  # Equivalent to x = x + 1`\n##Python Comparison Operators\n==\tEqual\tx == y\t\n!=\tNot equal\tx != y\t\n>\tGreater than\tx > y\t\n<\tLess than\tx < y\t\n>=\tGreater than or equal to\tx >= y\t\n<=\tLess than or equal to\tx <= y\n##Python Arithmetic Operators\n+\tAddition\tx + y\t\n-\tSubtraction\tx - y\t\n*\tMultiplication\tx * y\t\n/\tDivision\tx / y\t\n%\tModulus\tx % y\t\n**\tExponentiation\tx ** y\t\n//\tFloor division\tx // y\n##Python Bitwise Operators\n& \tAND\tSets each bit to 1 if both bits are 1\tx & y\t\n|\tOR\tSets each bit to 1 if one of two bits is 1\tx | y\t\n^\tXOR\tSets each bit to 1 if only one of two bits is 1\tx ^ y\t\n~\tNOT\tInverts all the bits\t~x\t\n<<\tZero fill left shift\tShift left by pushing zeros in from the right and let the leftmost bits fall off\tx << 2\t\n>>\tSigned right shift\tShift right by pushing copies of the leftmost bit in from the left, and let the rightmost bits fall off\tx >> 2\n##Operator Precedence\n`print((6 + 3) - (6 + 3))`\nParentheses has the highest precedence, meaning that expressions inside parentheses must be evaluated first:\nMultiplication * has higher precedence than addition +, and therefor multiplications are evaluated before additions:\n`print(100 + 5 * 3)`\n#The precedence order is described in the table below, starting with the highest precedence at the top:\n\n()\tParentheses\t\n**\tExponentiation\t\n+x  -x  ~x\tUnary plus, unary minus, and bitwise NOT\t\n*  /  //  %\tMultiplication, division, floor division, and modulus\t\n+  -\tAddition and subtraction\t\n<<  >>\tBitwise left and right shifts\t\n&\tBitwise AND\t\n^\tBitwise XOR\t\n|\tBitwise OR\t\n==  !=  >  >=  <  <=  is  is not  in  not in \tComparisons, identity, and membership operators\t\nnot\tLogical NOT\t\nand\tAND\t\nor\tOR",
          "quiz": [
            {
              "question": "What is the result of 5 + 2?",
              "options": [
                "7",
                "52",
                "TypeError",
                "None"
              ],
              "correctAnswer": 0
            },
            {
              "question": "What operator is used for exponentiation in Python?",
              "options": [
                "^",
                " **",
                "//",
                "%"
              ],
              "correctAnswer": 1
            }
          ]
        },
        {
          "title": "Python Lists, Tuples, Sets",
          "content": "#Python Lists, Tuples, Sets\n##Lists, tuples, and sets are data structures used to store collections of items in Python. Lists are mutable, ordered collections, while tuples are immutable. Sets are unordered collections with no duplicate elements.\n",
          "lesson": "`# List\nfruits = [\"apple\", \"banana\", \"cherry\"]\n# Tuple\ncolors = (\"red\", \"green\", \"blue\")\n# Set\nnumbers = {1, 2, 3, 4, 5}`\n##List\nLists are used to store multiple items in a single variable.\n\nLists are one of 4 built-in data types in Python used to store collections of data, the other 3 are Tuple, Set, and Dictionary, all with different qualities and usage.\n\nLists are created using square brackets:\n`thislist = [\"apple\", \"banana\", \"cherry\"]\nprint(thislist)`\n##List Items\nList items are ordered, changeable, and allow duplicate values.\n\nList items are indexed, the first item has index [0], the second item has index [1] etc.\n##Ordered\nWhen we say that lists are ordered, it means that the items have a defined order, and that order will not change.\n\nIf you add new items to a list, the new items will be placed at the end of the list.\n##Allow Duplicates\nSince lists are indexed, lists can have items with the same value:\n`thislist = [\"apple\", \"banana\", \"cherry\", \"apple\", \"cherry\"]\nprint(thislist)`\n##List Length\n`thislist = [\"apple\", \"banana\", \"cherry\"]\nprint(len(thislist))`\n",
          "quiz": [
            {
              "question": "Which data type in Python is ordered and mutable?",
              "options": [
                "list",
                "tuple",
                "set",
                "dictionary"
              ],
              "correctAnswer": 0
            },
            {
              "question": "What is the correct syntax for creating a tuple?",
              "options": [
                "[1, 2, 3]",
                "(1, 2, 3)",
                "{1, 2, 3}",
                "{1: 'a', 2: 'b', 3: 'c'}"
              ],
              "correctAnswer": 1
            }
          ]
        },
        {
          "title": "Python Dictionaries",
          "content": "\n#Python Dictionaries\n##Dictionaries are data structures used to store key-value pairs in Python. Each key is associated with a value, allowing for efficient lookup and retrieval of data.\n##Use dictionaries to store and retrieve data in key-value pairs. Dictionaries are useful for representing structured data and organizing information in your programs.",
          "lesson": "##Dictionaries are used to store data values in key:value pairs.\n\nA dictionary is a collection which is ordered*, changeable and do not allow duplicates.\n`thisdict = {\n  \"brand\": \"Ford\",\n  \"model\": \"Mustang\",\n  \"year\": 1964\n}\nprint(thisdict)`\n##Dictionary Items\nDictionary items are ordered, changeable, and do not allow duplicates.\n\nDictionary items are presented in key:value pairs, and can be referred to by using the key name.\n`thisdict = {\n  \"brand\": \"Ford\",\n  \"model\": \"Mustang\",\n  \"year\": 1964\n}\nprint(thisdict[\"brand\"])`\n##Ordered or Unordered?\nWhen we say that dictionaries are ordered, it means that the items have a defined order, and that order will not change.\n\nUnordered means that the items do not have a defined order, you cannot refer to an item by using an index.\n##Changeable\nDictionaries are changeable, meaning that we can change, add or remove items after the dictionary has been created.\n##Duplicates Not Allowed\nDictionaries cannot have two items with the same key:\n\n`thisdict = {\n  \"brand\": \"Ford\",\n  \"model\": \"Mustang\",\n  \"year\": 1964,\n  \"year\": 2020\n}\nprint(thisdict)`\n\n",
          "quiz": [
            {
              "question": "How are items stored in a dictionary?",
              "options": [
                "Ordered sequence",
                "Random sequence",
                "Key-value pairs",
                "Index-value pairs"
              ],
              "correctAnswer": 2
            },
            {
              "question": "What happens if you try to access a key that does not exist in a dictionary?",
              "options": [
                "It returns None",
                " It returns an empty string",
                " It raises a KeyError",
                " It returns False"
              ],
              "correctAnswer": 2
            }
          ]
        },
        {
          "title": "Python If…Else",
          "content": "#Python If…Else\n## If...else statements are used to make decisions in Python based on certain conditions. They allow your program to execute different code blocks depending on whether a condition is true or false.\n##Use if...else statements to control the flow of your program and perform different actions based on specific conditions. They are essential for implementing logic and making your programs more dynamic.\n",
          "lesson": "#Python Conditions and If statements\nPython supports the usual logical conditions from mathematics:\nEquals: a == b\nNot Equals: a != b\nLess than: a < b\nLess than or equal to: a <= b\nGreater than: a > b\nGreater than or equal to: a >= b\n`Example:\nx = 5\nif x > 3:\n    print(\"x is greater than 3\")\nelse:\n    print(\"x is less than or equal to 3\")`\n#Indentation\nPython relies on indentation (whitespace at the beginning of a line) to define scope in the code. Other programming languages often use curly-brackets for this purpose.\n\n##Elif\nThe elif keyword is Python's way of saying \"if the previous conditions were not true, then try this condition\".\n`a = 33\nb = 33\nif b > a:\n  print(\"b is greater than a\")\nelif a == b:\n  print(\"a and b are equal\")`\n\n##Else\nThe else keyword catches anything which isn't caught by the preceding conditions.\n`a = 200\nb = 33\nif b > a:\n  print(\"b is greater than a\")\nelif a == b:\n  print(\"a and b are equal\")\nelse:\n  print(\"a is greater than b\")`\n\nIn this example a is greater than b, so the first condition is not true, also the elif condition is not true, so we go to the else condition and print to screen that \"a is greater than b\".\n\nYou can also have an else without the elif:\n\n`a = 200\nb = 33\nif b > a:\n  print(\"b is greater than a\")\nelse:\n  print(\"b is not greater than a\")`\n\n\n##Short Hand If\nIf you have only one statement to execute, you can put it on the same line as the if statement.\n`if a > b: print(\"a is greater than b\")`\n\n##And\nThe and keyword is a logical operator, and is used to combine conditional statements:\n`a = 200\nb = 33\nc = 500\nif a > b and c > a:\n  print(\"Both conditions are True\")`\n##Or\nThe or keyword is a logical operator, and is used to combine conditional statements:\n`a = 200\nb = 33\nc = 500\nif a > b or a > c:\n  print(\"At least one of the conditions is True\")`\n\n##Not\nThe not keyword is a logical operator, and is used to reverse the result of the conditional statement:\n`a = 33\nb = 200\nif not a > b:\n  print(\"a is NOT greater than b\")`\n\n#Nested If\nYou can have if statements inside if statements, this is called nested if statements.\n`x = 41\n\nif x > 10:\n  print(\"Above ten,\")\n  if x > 20:\n    print(\"and also above 20!\")\n  else:\n    print(\"but not above 20.\")`\n",
          "quiz": [
            {
              "question": "What keyword is used to start an if statement in Python?",
              "options": [
                "then",
                "elif",
                " else",
                "if"
              ],
              "correctAnswer": 3
            },
            {
              "question": "What happens if no conditions in an if...elif...else statement are True?",
              "options": [
                "The program crashes",
                "The else block is executed",
                "The program exits",
                "None of the above"
              ],
              "correctAnswer": 1
            }
          ]
        },
        {
          "title": "Python While Loops",
          "content": "#Python While Loops\n## While loops are used to execute a block of code repeatedly as long as a specified condition is true. They continue iterating until the condition becomes false.\n##Use while loops when you need to repeatedly execute a block of code until a certain condition is met. Be cautious to avoid infinite loops by ensuring that the condition eventually becomes false.",
          "lesson": "`Example:\ni = 0\nwhile i < 5:\n    print(i)\n    i += 1`\n\n##Python Loops\nPython has two primitive loop commands:\n\nwhile loops\nfor loops\n\n##The break Statement\nWith the break statement we can stop the loop even if the while condition is true:\n`i = 1\nwhile i < 6:\n  print(i)\n  if i == 3:\n    break\n  i += 1`\n\n##The continue Statement\n`i = 0\nwhile i < 6:\n  i += 1\n  if i == 3:\n    continue\n  print(i)`\n\n\n##The else Statement\nWith the else statement we can run a block of code once when the condition no longer is true:\n`i = 1\nwhile i < 6:\n  print(i)\n  i += 1\nelse:\n  print(\"i is no longer less than 6\")`\n\n",
          "quiz": [
            {
              "question": "What keyword is used to start a while loop in Python?",
              "options": [
                "for",
                "while",
                "loop",
                "until"
              ],
              "correctAnswer": 1
            },
            {
              "question": "How do you exit a while loop prematurely?",
              "options": [
                " Using the break keyword",
                "Using the continue keyword",
                "Using the return keyword",
                "None of the above"
              ],
              "correctAnswer": 0
            }
          ]
        }
      ],
      "c": [
        {
          "title": "Getting started with C",
          "content": "#What is C?\nC is a general-purpose programming language created by Dennis Ritchie at the Bell Laboratories in 1972.\n\nIt is a very popular language, despite being old. The main reason for its popularity is because it is a fundamental language in the field of computer science.\n\nC is strongly associated with UNIX, as it was developed to write the UNIX operating system.",
          "lesson": "#Getting Started with C in Visual Studio Code: Detailed Steps\n\n##Step 1: Install Visual Studio Code\nFirst, you need to download and install Visual Studio Code. Head over to the Visual Studio Code download page. There, you'll find options to download the installer for your operating system, whether it's Windows, macOS, or Linux. Select the appropriate installer and download it. Once the download is complete, run the installer and follow the on-screen instructions to install VS Code on your computer.\n\n##Step 2: Install the C Compiler\nNext, you'll need a C compiler to compile your C programs. We'll use GCC (GNU Compiler Collection) for this purpose. To get GCC, we'll install MinGW-w64. Go to the MinGW-w64 download page and download the installer (mingw-w64-install.exe). Run the installer and follow these steps during the installation process:\n\n-> Select the architecture as x86_64.\n-> Set the threads to win32.\n-> Choose the latest version of the compiler.\n-> Complete the installation following the on-screen instructions.\n\nAfter installing MinGW, you need to add it to your system's PATH environment variable so that you can use the GCC compiler from the command line. Open the Start Menu and search for \"Environment Variables\". Click on \"Edit the system environment variables\", which opens the System Properties window. In this window, click on \"Environment Variables\". In the Environment Variables window, under \"System variables\", find the Path variable and click on \"Edit\". Add a new entry for the path to the MinGW bin directory, typically something like \"C:\\Program Files\\mingw-w64\\x86_64-8.1.0-posix-seh-rt_v6-rev0\\mingw64\\bin.\" Once you've added the path, click \"OK\" to close all the windows.\n\n##Step 3: Install C/C++ Extension for VS Code\nNow that VS Code and the GCC compiler are set up, you need to install the C/C++ extension in VS Code to help with code editing and debugging. Open VS Code and click on the Extensions view icon on the Sidebar, or press Ctrl+Shift+X to open the Extensions view. In the search bar, type \"C/C++\" and look for the extension provided by Microsoft. Click the \"Install\" button to add this extension to your VS Code setup.\n\n##Step 4: Create and Run Your First C Program\nTo create your first C program, start by opening a new file in VS Code. Go to File > New File or press Ctrl+N. Save this new file with a .c extension, such as myfirstprogram.c, by going to File > Save As.\n\nWith your new file open, type the following C code into it:\n`#include <stdio.h>\n\nint main() {\n  printf(\"Hello, World!\");\n  return 0;\n}`\nThis is a simple C program that prints \"Hello, World!\" to the console.\n\nBefore you can compile and run this program, you need to set up the build task in VS Code. Go to Terminal > Configure Default Build Task and select C/C++: gcc build active file. VS Code will create a tasks.json file in a .vscode directory with the necessary configurations.\n\nTo compile the program, open the terminal in VS Code by going to Terminal > New Terminal or pressing Ctrl+` . In the terminal, type the following command and press Enter:\n\n`gcc -o myfirstprogram myfirstprogram.c`\nThis command tells GCC to compile myfirstprogram.c and output an executable named myfirstprogram.\n\nOnce the compilation is complete, run the program by typing the following command in the terminal and pressing Enter:\n\n`./myfirstprogram`\nYou should see the output \"Hello, World!\" printed in the terminal, indicating that your program ran successfully.",
          "quiz": [
            {
              "question": "What is the purpose of adding MinGW to the system's PATH environment variable?",
              "options": [
                "To enable the system to find and execute the GCC compiler from the command line.",
                "To enhance the graphical user interface of Visual Studio Code.",
                "To install additional programming languages in VS Code.",
                "To enable auto-completion for C code in VS Code."
              ],
              "correctAnswer": 0
            },
            {
              "question": "Which command is used to compile a C program using GCC in the terminal?",
              "options": [
                "gcc compile myfirstprogram.c",
                "gcc myfirstprogram",
                "gcc -o myfirstprogram myfirstprogram.c",
                "gcc run myfirstprogram.c"
              ],
              "correctAnswer": 2
            },
            {
              "question": "After writing the \"Hello, World!\" program in VS Code, what are the correct steps to compile and run it?",
              "options": [
                "Open terminal, type gcc -o myfirstprogram myfirstprogram.c, then type ./myfirstprogram",
                "Click Run > Start Debugging, then type ./myfirstprogram",
                "Save the file, click Build > Build and Run",
                "Open terminal, type gcc build myfirstprogram.c, then type run myfirstprogram"
              ],
              "correctAnswer": 0
            }
          ]
        },
        {
          "title": "C Syntax",
          "content": "In this lesson, you will learn the basic structure and syntax of a C program. By the end of this lesson, you will be able to understand and write simple C programs that include functions, statements, and proper use of header files.",
          "lesson": "#Understanding a Simple C Program\nLet's break down a simple C program step by step:\n`#include <stdio.h>\n\nint main() {\n  printf(\"Hello World!\");\n  return 0;\n}`\n-> Line 1: #include <stdio.h>\nThis line includes the Standard Input Output library. It allows us to use functions like printf() to print text to the screen. Think of this as a tool that provides extra capabilities to your program.\n-> Line 2: A blank line.\nIn C, blank lines and white spaces are ignored by the compiler but are used by programmers to make the code more readable.\n-> Line 3: int main() {\nThis line starts the main function. Every C program must have a main() function. The code inside the curly brackets {} will be executed when the program runs.\n-> Line 4: printf(\"Hello World!\");\nThis is a statement that prints \"Hello World!\" to the screen. Note the use of ; at the end of the statement. Every statement in C ends with a semicolon.\n-> Line 5: return 0;\nThis statement ends the main() function and returns the value 0 to the operating system, indicating that the program finished successfully.\n-> Line 6: }\nThis closing curly bracket ends the main() function.\n\n#C Statements\nA computer program is a list of instructions to be executed by the computer. In C, these instructions are called statements. Each statement tells the compiler what to do.\n##Example:\n`printf(\"Hello World!\");`\nThis statement instructs the compiler to print the text \"Hello World!\" to the screen.\nIf you forget the semicolon at the end of a statement, the program will not run and an error will occur.\n##Example with Error:\n`printf(\"Hello World!\")\n// error: expected ';' before 'return'`\n\n#Multiple Statements\nMost C programs contain multiple statements. These statements are executed one by one, in the order they are written.\n##Example:\n`Copy code\nprintf(\"Hello World!\");\nprintf(\"Have a good day!\");\nreturn 0;`\nExplanation:\nThe first statement prints \"Hello World!\" to the screen.\nThe second statement prints \"Have a good day!\" to the screen.\nThe third statement ends the program successfully.\n\n#Cheat Sheet\n1) \\#include <stdio.h>: Includes the Standard Input Output library.\n2) int main(): Defines the main function.\n3) { }: Curly brackets enclose the body of a function.\n4) printf(): Function to print text to the screen.\n5) ;: Semicolon ends each statement.\n6) return 0;: Ends the main() function and returns 0 to indicate success.",
          "quiz": [
            {
              "question": "What does #include <stdio.h> do in a C program?",
              "options": [
                "It defines the main function.",
                "It includes the Standard Input Output library.",
                "It prints text to the screen."
              ],
              "correctAnswer": 1
            },
            {
              "question": "Which of the following statements is correct to print \"Hello World!\"?",
              "options": [
                "printf(\"Hello World!\")",
                "print(\"Hello World!\");",
                "printf(\"Hello World!\");"
              ],
              "correctAnswer": 2
            },
            {
              "question": "What will happen if you forget the semicolon at the end of a statement?",
              "options": [
                "The program will run normally.",
                "The program will print an error and not run.",
                "The program will ignore the statement."
              ],
              "correctAnswer": 1
            }
          ]
        },
        {
          "title": "Mastering Output in C",
          "content": "In this lesson, you will learn how to use the \"printf()\" function to print text and values to the screen. You will understand how to format text using escape sequences and how to manage multiple lines of output. By the end of this lesson, you will be able to produce well-formatted output in your C programs.",
          "lesson": "#Using \"printf()\" to Print Text\nTo output values or print text in C, you use the printf() function.\n##Example:\n`#include <stdio.h>\n\nint main() {\n  printf(\"Hello World!\");\n  return 0;\n}`\nIn this example, the printf() function prints \"Hello World!\" to the screen.\n\n#Importance of Double Quotes\nWhen working with text, it must be enclosed in double quotation marks \"\".\n##Example:\n`printf(\"This sentence will work!\");\nprintf(This sentence will produce an error.); // This will cause an error`\nForgetting the double quotes around text will cause a compilation error.\n\n#Multiple printf() Functions\nYou can use multiple printf() functions to print several pieces of text. Note that printf() does not automatically add a new line at the end of its output.\n##Example:\n`#include <stdio.h>\n\nint main() {\n  printf(\"Hello World!\");\n  printf(\"I am learning C.\");\n  printf(\"And it is awesome!\");\n  return 0;\n}`\nThe output will be: \n`Hello World!I am learning C.And it is awesome!`\n\n#Using New Lines with \"\\n\"\nTo insert a new line, use the \"\\n\" character, which is an escape sequence that moves the cursor to the beginning of the next line.\n##Example:\n`#include <stdio.h>\n\nint main() {\n  printf(\"Hello World!\\n\");\n  printf(\"I am learning C.\");\n  return 0;\n}`\nThe output will be:\n`Hello World!\nI am learning C.`\nYou can also include multiple lines within a single printf() function, though this can reduce readability.\n##Example:\n`#include <stdio.h>\n\nint main() {\n  printf(\"Hello World!\\nI am learning C.\\nAnd it is awesome!\");\n  return 0;\n}`\nThe output will be:\n`Hello World!\nI am learning C.\nAnd it is awesome!`\n\n#Creating Blank Lines\nUsing two \\n characters in a row will create a blank line.\n##Example:\n`#include <stdio.h>\n\nint main() {\n  printf(\"Hello World!\\n\\n\");\n  printf(\"I am learning C.\");\n  return 0;\n}`\nThe output will be:\n`Copy code\nHello World!\n\nI am learning C.`\n\n#Other Useful Escape Sequences\n$./assets/images/c1.png\n\n#Cheat Sheet\n1) printf(): Function to print text and values to the screen.\n2) Double Quotes: Text must be enclosed in double quotes \"\".\n3) \\n: Newline character, moves the cursor to the next line.\n4) Escape Sequences: Special characters used to format output (\\t, \\\\, \\\").\n\nNOTE: This lesson covers the basics of outputting text in C, ensuring you can display information and format it properly in your programs. Practice using \"printf()\" and escape sequences to become comfortable with producing output in C.",
          "quiz": [
            {
              "question": "What will happen if you forget to put double quotes around text in printf()?",
              "options": [
                "The text will be printed as is.",
                "An error will occur.",
                "The text will be ignored."
              ],
              "correctAnswer": 1
            },
            {
              "question": "How do you insert a new line in a C program?",
              "options": [
                "By using \\\\n",
                " By using \\n",
                "By using newLine()"
              ],
              "correctAnswer": 1
            },
            {
              "question": "Which escape sequence creates a horizontal tab?",
              "options": [
                "\\n",
                "\\\\",
                "\\t"
              ],
              "correctAnswer": 2
            }
          ]
        },
        {
          "title": "Understanding Comments in C",
          "content": "In this lesson, you will learn about comments in C and how to use them to make your code more readable and maintainable. You will understand the difference between single-line and multi-line comments and when to use each type. By the end of this lesson, you will be able to effectively comment your C programs.",
          "lesson": "#Purpose of Comments\nComments in C are used to explain code and make it more readable. They can also be used to prevent code from being executed, which is helpful when testing different parts of your code. Comments are ignored by the compiler, meaning they do not affect the program's execution.\n\n#Single-line Comments\nSingle-line comments start with two forward slashes //. Any text following // until the end of the line is ignored by the compiler.\n##Example:\n`// This is a comment\nprintf(\"Hello World!\");`\n\nYou can also place a single-line comment at the end of a line of code.\n##Example:\n`printf(\"Hello World!\"); // This is a comment`\n\n#Multi-line Comments\nMulti-line comments start with /* and end with */. Any text between these markers is ignored by the compiler.\n##Example:\n`/* The code below will print the words Hello World!\nto the screen, and it is amazing */\nprintf(\"Hello World!\");`\n\n#Choosing Between Single and Multi-line Comments\nThe choice between single-line and multi-line comments depends on the length and complexity of the comment. Generally, // is used for short comments, while /* */ is used for longer comments or blocks of comments.\n\nIt's important to note that before the C99 standard (released in 1999), only multi-line comments were available in C.\n\n#Cheat Sheet\n1) Single-line comments: Start with //. Used for short comments.\n2) Multi-line comments: Start with /* and end with */. Used for longer comments or blocks of comments.\n3) Comments are ignored by the compiler and do not affect program execution.\n4) Use comments to explain your code and make it more readable.\n\nNOTE: This lesson covers the basics of using comments in C, ensuring you can add explanations and notes to your code effectively. Practice adding both single-line and multi-line comments to your programs to enhance readability and maintainability.",
          "quiz": [
            {
              "question": "How do you start a single-line comment in C?",
              "options": [
                "/*",
                "//",
                "#"
              ],
              "correctAnswer": 1
            },
            {
              "question": "How do you end a multi-line comment in C?",
              "options": [
                "*/",
                "//",
                "**"
              ],
              "correctAnswer": 0
            },
            {
              "question": "Why are comments used in C?",
              "options": [
                "To change the program’s execution.",
                "To explain code and make it more readable.",
                "To compile the program faster."
              ],
              "correctAnswer": 1
            }
          ]
        },
        {
          "title": "Introduction to C Variables",
          "content": "In this lesson, you will learn about variables in C, how to declare and initialize them, and how to use them in your programs. You will also understand format specifiers and the rules for naming variables. By the end of this lesson, you will be able to effectively work with variables and print their values in C.",
          "lesson": "#What Are Variables?\nVariables are containers for storing data values. In C, different types of variables are defined with different keywords:\n1) int for integers (whole numbers), such as 123 or -123\n2) float for floating point numbers, such as 19.99 or -19.99\n3) char for single characters, such as 'a' or 'B' (characters are surrounded by single quotes)\n\n#Declaring and Initializing Variables\nTo create a variable, specify the type and assign it a value:\n##Syntax:\n`type variableName = value;`\nHere, type is one of C's data types, variableName is the name of the variable, and the equal sign = assigns a value to the variable.\n##Example:\n`int myNum = 15;`\nYou can also declare a variable without assigning a value and assign it later:\n##Example:\n`// Declare a variable\nint myNum;\n\n// Assign a value to the variable\nmyNum = 15;`\n\n#Outputting Variables\nTo print values in C, you use the \"printf()\" function. Unlike some other programming languages, you need to use format specifiers to tell the compiler what type of data the variable is storing.\n#Example:\n`int myNum = 15;\nprintf(\"%d\", myNum);  // Outputs 15`\n\n#Format specifiers include:\n1) %d for integers\n2) %f for floating point numbers\n3) %c for characters\n##Example:\n`int myNum = 15;\nfloat myFloatNum = 5.99;\nchar myLetter = 'D';\n\nprintf(\"%d\\n\", myNum);\nprintf(\"%f\\n\", myFloatNum);\nprintf(\"%c\\n\", myLetter);`\n\nTo combine text and a variable, separate them with a comma inside printf():\n##Example:\n`int myNum = 15;\nprintf(\"My favorite number is: %d\", myNum);`\n\nYou can also print different types in a single printf() function:\n##Example:\n`int myNum = 15;\nchar myLetter = 'D';\nprintf(\"My number is %d and my letter is %c\", myNum, myLetter);`\n\n#Changing Variable Values\nYou can overwrite the value of an existing variable:\n##Example:\n`int myNum = 15;\nmyNum = 10;  // Now myNum is 10`\n\nYou can assign the value of one variable to another:\n##Example:\n`int myNum = 15;\nint myOtherNum = 23;\nmyNum = myOtherNum;  // myNum is now 23`\n\n#Adding Variables Together\nTo add the values of two variables:\n##Example:\n`int x = 5;\nint y = 6;\nint sum = x + y;\nprintf(\"%d\", sum);`\n\n#Declaring Multiple Variables\nTo declare multiple variables of the same type in a single line:\n##Example:\n`int x = 5, y = 6, z = 50;\nprintf(\"%d\", x + y + z);`\n\nYou can also assign the same value to multiple variables:\n##Example:\n`int x, y, z;\nx = y = z = 50;\nprintf(\"%d\", x + y + z);`\n\n#Naming Variables (Identifiers)\nVariable names in C must be unique and are called identifiers. Here are some general rules for naming variables:\n-> Names can contain letters, digits, and underscores.\n-> Names must begin with a letter or an underscore.\n-> Names are case-sensitive (myVar and myvar are different).\n-> Names cannot contain whitespaces or special characters like !, #, %, etc.\n-> Reserved words (such as int) cannot be used as names.\n##Example:\n`// Good variable name\nint minutesPerHour = 60;\n\n// OK, but not so clear\nint m = 60;`\n\n#Cheat Sheet\n1) int, float, char: Basic data types for variables.\n2) Variable Declaration: type variableName = value;\n3) Format Specifiers: %d for integers, %f for floats, %c for characters.\n4) Changing Values: Variables can be reassigned new values.\n5) Multiple Declarations: Multiple variables can be declared and initialized in a single line.\n6) Naming Rules: Follow the rules for valid and descriptive variable names.\n\nNOTE: This lesson provides a comprehensive introduction to variables in C, ensuring you can declare, initialize, and use variables effectively in your programs. Practice creating and manipulating variables to become proficient in C programming.",
          "quiz": [
            {
              "question": "How do you declare an integer variable x and assign it the value 10?",
              "options": [
                "int x; x = 10;",
                "int x = 10;",
                "Both A and B"
              ],
              "correctAnswer": 2
            },
            {
              "question": "What format specifier is used for a floating point number?",
              "options": [
                "%d",
                "%f",
                "%c"
              ],
              "correctAnswer": 1
            },
            {
              "question": "Which of the following is a valid variable name?",
              "options": [
                "2ndVariable",
                "variable_2",
                "variable-2"
              ],
              "correctAnswer": 1
            }
          ]
        },
        {
          "title": "C Data Types",
          "content": "In this lesson, you'll dive into the fundamental data types in C, including integers, floating-point numbers, characters, and their usage. You'll also understand format specifiers, type conversion, and how to retrieve the memory size of variables. By the end, you'll be equipped to handle various data types effectively in your C programs.",
          "lesson": "#Basic Data Types\nData types in C specify the size and type of information a variable can store. The most common ones are:\n1) int: Stores whole numbers without decimals.\n2) float: Stores fractional numbers with limited decimal precision.\n3) double: Stores fractional numbers with higher decimal precision.\n4) char: Stores a single character or ASCII values.\n\n#Format Specifiers\nTo print variables in C, you use format specifiers with the \"printf()\" function. Here are some common ones:\n1) %d or %i for integers\n2) %f for floats\n3) %lf for doubles\n4) %c for characters\n\n#Character Data Types\nThe char type stores a single character and is surrounded by single quotes. You can print characters using the %c specifier. ASCII values can also be used to represent characters.\n\n#Numeric Data Types\n1)int: Stores whole numbers.\n2) float: Stores floating-point numbers with limited precision.\n3) double: Stores floating-point numbers with higher precision.\n\n#Decimal Precision\nYou can control the decimal precision of floating-point numbers using format specifiers like %.2f to display two decimal places.\n\n#The sizeof Operator\nThe sizeof operator retrieves the memory size of a variable or data type in bytes.\n\n#Type Conversion\nImplicit Conversion: Automatically done by the compiler.\nExplicit Conversion: Manually performed by the programmer using type casting.\n\n#Cheat Sheet\n1) Basic Data Types: int, float, double, char.\n2) Format Specifiers: %d, %f, %lf, %c.\n3) Decimal Precision: Control the number of decimal places with format specifiers.\n4) sizeof Operator: Get the memory size of variables.\n5) Type Conversion: Implicit and explicit conversions for handling different data types.\n\nNOTE: With a solid understanding of C data types, you're now ready to handle various types of data and perform operations efficiently in your C programs. Practice using different data types and format specifiers to strengthen your skills.",
          "quiz": [
            {
              "question": "What format specifier is used for integers in printf()?",
              "options": [
                "%i",
                "%d",
                "%f",
                "A and B",
                "B and C"
              ],
              "correctAnswer": 3
            },
            {
              "question": "Which data type stores a single character in C?",
              "options": [
                "int",
                "float",
                "char"
              ],
              "correctAnswer": 2
            },
            {
              "question": "How do you control the decimal precision of a floating-point number to two decimal places?",
              "options": [
                "%.2f",
                "%2f",
                "%.f"
              ],
              "correctAnswer": 0
            }
          ]
        },
        {
          "title": "Understanding C Constants",
          "content": "In this lesson, you'll grasp the concept of constants in C programming and understand how to use the \"const\" keyword to declare unchangeable variables. You'll learn the benefits of using constants, good practices for naming them, and how to avoid common pitfalls.",
          "lesson": "#Constants in C\nConstants are variables whose values remain fixed throughout the execution of a program. They are declared using the const keyword, making them read-only and unchangeable.\n\n#Declaring Constants\nTo declare a constant in C, use the const keyword followed by the data type and the variable name, then assign it a value. Once declared, the value of a constant cannot be modified.\n##Example:\n`const int minutesPerHour = 60;\nconst float PI = 3.14;`\n\n##Notes on Constants\n-> Constant variables must be assigned a value during declaration. Attempting to assign a value later will result in an error.\n-> It's a good practice to declare constants with uppercase letters for better code readability.\n##Good Practice\nUsing constants helps improve code readability and maintainability, especially when dealing with values that are unlikely to change. By declaring constants, you make your code more self-explanatory and easier to understand for other programmers.\n##Example:\n`const int BIRTHYEAR = 1980;`\n\n#Cheat Sheet\n1) Constants: Variables whose values remain fixed.\n2) Declaration: Use the const keyword followed by the data type and variable name.\n3) Value Assignment: Constants must be assigned a value during declaration.\n4) Good Practice: Declare constants with uppercase letters for better readability.\n\nNOTE: Understanding how to use constants in C will enhance the clarity and maintainability of your code. Practice declaring and using constants in your programs to solidify your understanding.",
          "quiz": [
            {
              "question": "What keyword is used to declare constants in C?",
              "options": [
                "var",
                "let",
                "const",
                "final"
              ],
              "correctAnswer": 2
            },
            {
              "question": "Which of the following statements about constants is true?",
              "options": [
                "Constants can be modified after declaration.",
                "Constants must be assigned a value during declaration.",
                "Constants are declared using the \"volatile\" keyword.",
                "Constants have dynamic values."
              ],
              "correctAnswer": 1
            },
            {
              "question": "Which of the following is a valid way to declare a constant with the value 3.14159 in C?",
              "options": [
                "const PI = 3.14159;",
                "const float PI = 3.14159;",
                "constant PI = 3.14159;",
                "constant float PI = 3.14159;"
              ],
              "correctAnswer": 1
            }
          ]
        },
        {
          "title": "C Operators",
          "content": "In this lesson, you'll dive into the world of operators in C programming. You'll understand the different types of operators, such as arithmetic, assignment, comparison, and logical operators, and learn how to use them effectively in your programs.",
          "lesson": "#Operators in C\nOperators are symbols used to perform operations on variables and values. They are divided into various groups based on their functionality.\n\n#Arithmetic Operators\nArithmetic operators are used to perform mathematical operations such as addition, subtraction, multiplication, division, modulus, increment, and decrement.\n$./assets/images/c2.png\n\n#Assignment Operators\nAssignment operators are used to assign values to variables. They include the basic assignment operator (=) as well as compound assignment operators like +=, -=, *=, etc.\n$./assets/images/c3.png\n\n#Comparison Operators\nComparison operators are used to compare two values or variables. They return either true (1) or false (0) based on the comparison result.\n$./assets/images/c4.png\n\n#Logical Operators\nLogical operators are used to determine the logic between variables or values. They include logical AND (&&), logical OR (||), and logical NOT (!).\n$./assets/images/c5.png\n\n#Cheat Sheet\n1) Arithmetic Operators: Perform mathematical operations like addition, subtraction, multiplication, etc.\n2) Assignment Operators: Assign values to variables, including compound assignment operators.\n3) Comparison Operators: Compare two values or variables and return true or false.\n4) Logical Operators: Determine the logic between variables or values.\n\nNOTE: Understanding operators is crucial for performing various operations in C programming. Practice using different operators to enhance your programming skills.",
          "quiz": [
            {
              "question": "Which operator is used to perform addition in C?",
              "options": [
                "*",
                "/",
                "+",
                "-"
              ],
              "correctAnswer": 2
            },
            {
              "question": "What will the following expression return: 10 > 5?",
              "options": [
                "1",
                "0",
                "True",
                "False"
              ],
              "correctAnswer": 0
            },
            {
              "question": "Which assignment operator is equivalent to x = x + 5?",
              "options": [
                "+=",
                "=+",
                "/=",
                "-="
              ],
              "correctAnswer": 0
            }
          ]
        },
        {
          "title": "Mastering C Booleans",
          "content": "In this lesson, you'll delve into the world of booleans in C programming. You'll understand the bool data type, how to declare boolean variables, compare values using boolean expressions, and utilize boolean operators effectively.",
          "lesson": "#Booleans in C\nBooleans are a fundamental data type in programming that represent values of true or false. In C, the bool data type is used for boolean variables.\n\n#Declaring Boolean Variables\nTo use boolean variables in C, you need to include the <stdbool.h> header file. Boolean variables are declared using the bool keyword and can have values of true or false.\n\n#Printing Boolean Values\nBoolean values are represented as integers: 1 for true and 0 for false. Use the %d format specifier to print boolean values.\n\n#Comparing Values with Booleans\nYou can compare values using boolean expressions and comparison operators such as greater than (>), equal to (==), etc. The result of a comparison is a boolean value: 1 for true and 0 for false.\n##Examples:\nComparing numeric values: \n`printf(\"%d\", 10 > 5); // Returns 1 (true)`\nComparing boolean variables: \n`bool isHamburgerTasty = true; \nprintf(\"%d\", isHamburgerTasty == true);`\n\n#Cheat Sheet\n1) Boolean Variables: Declared using the bool keyword, representing true or false values.\n2) Comparing Values: Use comparison operators to compare values and get boolean results.\n3) Printing Boolean Values: Represented as integers: 1 for true, 0 for false.\n\nNOTE: Understanding booleans and boolean expressions is essential for making decisions and controlling program flow in C programming. Practice using boolean variables and expressions to strengthen your understanding.",
          "quiz": [
            {
              "question": "What header file should you include to use boolean variables in C?",
              "options": [
                "<stdio.h>",
                "<stdbool.h>",
                "<stdlib.h>",
                "stdboolean.h>"
              ],
              "correctAnswer": 1
            },
            {
              "question": "What will the following expression return: \"bool isTasty = true; printf(\"%d\", isTasty);\"?",
              "options": [
                "True",
                "False",
                "1",
                "0"
              ],
              "correctAnswer": 2
            },
            {
              "question": "How are boolean values represented in C?",
              "options": [
                " 'true' and 'false' strings",
                "0 for true, 1 for false",
                "1 for true, 0 for false",
                "'yes' and 'no' strings"
              ],
              "correctAnswer": 2
            }
          ]
        },
        {
          "title": "Flow Control in C Programming",
          "content": "In this lesson, you'll dive into the various flow control constructs in C programming. You'll understand how to make decisions using conditional statements (if, if-else, if-else if) and switch statements. Additionally, you'll learn about executing code repeatedly using while and for loops, as well as controlling loop execution using the break and continue statements.",
          "lesson": "#Conditional Statements\nConditional statements allow you to execute code based on certain conditions.\n\n##if Statement\nThe if statement evaluates a condition and executes a block of code if the condition is true.\n##Example\n`if (condition) {\n    // code to be executed if condition is true\n}`\nThis snippet checks the condition. If the condition evaluates to true, the code inside the curly braces is executed.\n\n##if-else Statement\nThe if-else statement executes one block of code if the condition is true, and another block if the condition is false.\n##Example\n`if (condition) {\n    // code to be executed if condition is true\n} else {\n    // code to be executed if condition is false\n}`\nIf the condition is true, the code inside the first block is executed. If the condition is false, the code inside the else block is executed.\n\n##if-else if Statement\nThe if-else if statement allows you to evaluate multiple conditions sequentially and execute different blocks of code accordingly.\n##Example\n`if (condition1) {\n    // code to be executed if condition1 is true\n} else if (condition2) {\n    // code to be executed if condition2 is true\n} else {\n    // code to be executed if all conditions are false\n}`\nThis snippet evaluates multiple conditions sequentially. If condition1 is true, the code inside the first block is executed. If condition1 is false and condition2 is true, the code inside the second block is executed. If all conditions are false, the code inside the else block is executed.\n\n\n#Switch Statement\nThe switch statement allows you to select one of many code blocks to be executed.\n##Example\n`switch (expression) {\n    case value1:\n        // code to be executed if expression equals value1\n        break;\n    case value2:\n        // code to be executed if expression equals value2\n        break;\n    default:\n        // code to be executed if expression doesn't match any case\n}`\nThe switch statement evaluates an expression and executes the code block associated with the matching case. If no case matches the expression, the code block inside the default case is executed.\n\n#Loops\nLoops allow you to execute a block of code repeatedly.\n\n##while Loop\nThe while loop repeatedly executes a block of code as long as the condition remains true. It is used when we do not know the number of times the block of code is needed to be repeated.\n##Example\n`while (condition) {\n    // code to be executed repeatedly while condition is true\n}`\n\n##for Loop\nThe for loop executes a block of code a specified number of times. It is used when we know the number of times the block of code is needed to be repeated.\n`for (initialization; condition; increment/decrement) {\n    // code to be executed repeatedly until condition becomes false\n}`\n\n\n#Loop Control Statements\nLoop control statements allow you to control the flow of execution within loops.\n\n##break Statement\nThe break statement terminates the loop prematurely and transfers control to the next statement after the loop.\n`for (int i = 0; i < 10; i++) {\n    if (condition) {\n        break;\n    }\n}`\n\n##continue Statement\nThe continue statement skips the remaining code inside the loop for the current iteration and proceeds to the next iteration.\n`for (int i = 0; i < 10; i++) {\n    if (condition) {\n        continue;\n    }\n    // code here will be skipped if condition is true\n}`\n\n\n#Cheatsheet\n1) Conditional Statements: if, if-else, if-else if\n2) Switch Statement: switch, case, default\n3) Loops: while, for\n4) Loop Control Statements: break, continue\n\nNOTE: Understanding control flow constructs is essential for writing efficient and structured code in C programming. Practice using conditional statements, loops, and loop control statements to master the concept.",
          "quiz": [
            {
              "question": "Which statement allows you to select one of many code blocks to be executed?",
              "options": [
                "if",
                "while",
                "for",
                "switch"
              ],
              "correctAnswer": 3
            },
            {
              "question": "What is the purpose of the break statement in a loop?",
              "options": [
                "Skips the remaining code inside the loop for the current iteration",
                "Terminates the loop prematurely",
                "Executes the next iteration of the loop",
                "None of the above"
              ],
              "correctAnswer": 1
            },
            {
              "question": "How does the while loop differ from the for loop?",
              "options": [
                "while loop requires an initialization expression",
                "for loop executes a block of code as long as a condition remains true",
                "while loop iterates a specified number of times",
                "for loop executes a block of code a specified number of times"
              ],
              "correctAnswer": 3
            }
          ]
        },
        {
          "title": "Exploring Arrays in C Programming",
          "content": "-> Understanding the concept of arrays in C programming.\n-> How to create, access, modify, and loop through one-dimensional (1D) arrays.\n-> Introduction to two-dimensional (2D) arrays and their manipulation.",
          "lesson": "#Arrays in C Programming:\nArrays are used to store multiple values of the same data type in a single variable.\nThey provide a convenient way to manage collections of data without the need for separate variables.\nArrays can be one-dimensional or multi-dimensional.\n\n#Creating and Accessing Elements of 1D Arrays:\nTo create a 1D array, specify the data type and the array name followed by square brackets [].\n##Example\n`int myNumbers[] = {25, 50, 75, 100};`\nAccessing elements of an array is done using index notation, where the first element has index 0.\n##Example\n`printf(\"%d\", myNumbers[0]); // Outputs 25`\nChanging the value of an element is as simple as assigning a new value to the corresponding index.\n##Example\n`myNumbers[0] = 33;\nprintf(\"%d\", myNumbers[0]); // Now outputs 33 instead of 25`\n\n\n#Looping Through 1D Arrays:\nYou can use a for loop to iterate through the elements of a 1D array.\n##Example\n`int i;\nfor (i = 0; i < 4; i++) {\n  printf(\"%d\\n\", myNumbers[i]);\n}`\n\n\n#Understanding Array Size:\nThe sizeof operator returns the size of a type in bytes, not the number of elements in an array.\n##Example\n`int length = sizeof(myNumbers) / sizeof(myNumbers[0]);`\nThis method ensures accurate determination of array length irrespective of its size.\n\n\n#Introduction to 2D Arrays:\nTwo-dimensional arrays, also known as matrices, are used to represent tabular data with rows and columns.\n##Example\n`int matrix[2][3] = { {1, 4, 2}, {3, 6, 8} };`\nAccessing elements of a 2D array requires providing both row and column indices.\n##Example\n`printf(\"%d\", matrix[0][2]);  // Outputs 2`\n\n\n#Manipulating 2D Arrays:\nYou can change the value of an element in a 2D array by specifying the indices of the element.\n##Example\n`matrix[0][0] = 9;\nprintf(\"%d\", matrix[0][0]);  // Now outputs 9 instead of 1`\nLooping through a 2D array involves using nested loops, one for each dimension.\n##Example\n`int i, j;\nfor (i = 0; i < 2; i++) {\n  for (j = 0; j < 3; j++) {\n    printf(\"%d\\n\", matrix[i][j]);\n  }\n}`\n\n\n#Cheatsheet:\n1) Arrays store multiple values of the same data type.\n2) Use index notation to access and modify elements of arrays.\n3) Loop through arrays using for loops, adapting the loop condition to array size.\n4) Use sizeof operator to determine the size of an array and calculate its length.\n5) Two-dimensional arrays represent tabular data and require row and column indices for element access.",
          "quiz": [
            {
              "question": "What is the first step in creating a one-dimensional array in C?",
              "options": [
                "Declare the array size",
                "Specify the data type",
                " Initialize the array elements",
                "Define the array name"
              ],
              "correctAnswer": 1
            },
            {
              "question": "How do you access the element in the second row and third column of a 2D array named \"matrix\"?",
              "options": [
                "matrix[1][3]",
                "matrix[2][2]",
                "matrix[2][3]",
                "matrix[1][2]"
              ],
              "correctAnswer": 3
            },
            {
              "question": "How do you determine the number of elements in a C array named \"myArray\"?",
              "options": [
                "sizeof(myArray);",
                "sizeof(myArray) / sizeof(myArray[0]);",
                "sizeof(myArray) * sizeof(myArray[0]);",
                "sizeof(myArray[0]) / sizeof(myArray);"
              ],
              "correctAnswer": 1
            }
          ]
        },
        {
          "title": "Strings in C",
          "content": "-> Understanding the concept of strings in C programming.\n-> How to create, access, modify, and loop through strings.\n-> Differences between different ways of creating strings in C.",
          "lesson": "#Strings in C Programming:\nStrings are used for storing text/characters.\nIn C, strings are represented as arrays of characters.\nTo create a string, you must use the char type and create an array of characters.\n\n#Creating and Accessing Strings:\nStrings are created using character arrays initialized with double quotes.\n##Example\n`char greetings[] = \"Hello World!\";`\nAccessing individual characters of a string is done using index notation.\n##Example\n`printf(\"%c\", greetings[0]); // Outputs 'H'`\nModifying strings is similar to modifying arrays, where you assign a new value to a specific index.\n##Example\n`greetings[0] = 'J';\nprintf(\"%s\", greetings); // Outputs \"Jello World!\"`\n\n#Looping Through Strings:\nStrings can be looped through using a for loop.\n##Example\n`char carName[] = \"Volvo\";\nint i;\n\nfor (i = 0; i < 5; ++i) {\n  printf(\"%c\\n\", carName[i]);\n}`\nUsing the sizeof formula makes the loop more adaptable to changes in string length.\n##Example\n`char carName[] = \"Volvo\";\nint length = sizeof(carName) / sizeof(carName[0]);\nint i;\n\nfor (i = 0; i < length; ++i) {\n  printf(\"%c\\n\", carName[i]);\n}`\n\n#Creating Strings:\nStrings can also be created using a set of characters, but must be terminated with a null character '\\0'.\n##Example\n`char greetings[] = {'H', 'e', 'l', 'l', 'o', ' ', 'W', 'o', 'r', 'l', 'd', '!', '\\0'};`\nThe null terminating character indicates the end of the string.\n\n\n#Differences:\nThere are two ways to create strings in C: using string literals or character arrays.\nString literals are easier to write and automatically include the null terminating character.\nCharacter arrays require manual inclusion of the null character.\n##Example\n`char message[] = \"Good to see you,\";\nchar fname[] = \"John\";\n\nprintf(\"%s %s!\", message, fname);`\n\n#Summary/Cheatsheet:\n1) Strings in C are represented as arrays of characters.\n2) Access and modify strings using index notation.\n3) Loop through strings using for loops, adapting the loop condition to string length.\n4) Strings can be created using string literals or character arrays, with or without explicit null termination.",
          "quiz": [
            {
              "question": "Which format specifier is used to print a single character in C?",
              "options": [
                "%c",
                "%s",
                "%d",
                "%f"
              ],
              "correctAnswer": 0
            },
            {
              "question": "What character indicates the end of a string in C?",
              "options": [
                "\\n",
                "\\t",
                "\\0",
                "\\end"
              ],
              "correctAnswer": 2
            },
            {
              "question": "What is the main difference between creating strings using string literals and character arrays in C?",
              "options": [
                "String literals require manual inclusion of the null character.",
                "Character arrays automatically include the null character.",
                " String literals are easier to write and automatically include the null character.",
                "Character arrays are immutable once initialized."
              ],
              "correctAnswer": 2
            }
          ]
        },
        {
          "title": "User Input",
          "content": "-> How to get user input in C using scanf() and fgets() functions.\n-> Handling single and multiple inputs from the user.\n-> Differences between scanf() and fgets() for string input.",
          "lesson": "#User Input in C:\nIn C programming, you can obtain user input using the scanf() function for formatted input and fgets() for reading a line of text.\n\n#Getting Single Input with scanf():\nTo get a single input from the user using scanf(), you specify the format specifier and use the reference operator (&) to store the value in a variable.\n##Example\n`int myNum;\nprintf(\"Type a number: \\n\");\nscanf(\"%d\", &myNum);\nprintf(\"Your number is: %d\", myNum);`\n\n#Getting Multiple Inputs with scanf():\nscanf() can also handle multiple inputs by specifying multiple format specifiers.\n##Example\n`int myNum;\nchar myChar;\nprintf(\"Type a number AND a character: \\n\");\nscanf(\"%d %c\", &myNum, &myChar);\nprintf(\"Your number is: %d\\n\", myNum);\nprintf(\"Your character is: %c\\n\", myChar);`\n\n#Taking String Input with scanf():\nFor string input using scanf(), specify the size of the string/array and don't use the reference operator (&).\n##Example\n`char firstName[30];\nprintf(\"Enter your first name: \\n\");\nscanf(\"%s\", firstName);\nprintf(\"Hello %s\", firstName);`\n\n#Using fgets() for String Input:\nfgets() is preferred for reading strings as it handles whitespace characters correctly and avoids buffer overflow.\n##Example\n`char fullName[30];\nprintf(\"Type your full name: \\n\");\nfgets(fullName, sizeof(fullName), stdin);\nprintf(\"Hello %s\", fullName);`\n\n#Cheat sheet:\n1) Use scanf() for formatted input, fgets() for reading strings.\n2) For scanf(), use the format specifier and reference operator (&) for single inputs.\n3) scanf() can handle multiple inputs by specifying multiple format specifiers.\n4) For string input with scanf(), specify the size of the string and don't use the reference operator.\n5) fgets() is preferred for reading strings as it handles whitespace characters and avoids buffer overflow.",
          "quiz": [
            {
              "question": "Which function is preferred for reading a line of text in C?",
              "options": [
                "printf()",
                "scanf()",
                "gets()",
                "fgets()"
              ],
              "correctAnswer": 3
            },
            {
              "question": "How do you get multiple inputs from the user using scanf()?",
              "options": [
                "Use multiple scanf() functions",
                "Separate format specifiers with commas",
                "Specify multiple format specifiers in a single scanf() call",
                "Use scanf() with loops"
              ],
              "correctAnswer": 2
            },
            {
              "question": "What is the advantage of using fgets() over scanf() for reading strings?",
              "options": [
                " scanf() is faster",
                " fgets() handles whitespace characters correctly",
                "scanf() can handle multiple inputs",
                "fgets() requires fewer arguments"
              ],
              "correctAnswer": 1
            }
          ]
        },
        {
          "title": "Memory Addresses",
          "content": "-> What a memory address is in C programming.\n-> How to access and print memory addresses using the reference operator (&).\n-> Why understanding memory addresses is useful in C programming.",
          "lesson": "#Memory Address in C:\nWhen you create a variable in C, it gets stored somewhere in the computer's memory. Each variable has its own unique memory address, which is the location where its value is stored.\n\n#Accessing Memory Addresses:\nYou can access the memory address of a variable using the reference operator (&).\n##Example\n`int myAge = 43;\nprintf(\"Memory address of myAge: %p\", &myAge);`\nHere, &myAge represents the memory address of the variable myAge. Printing it using %p format specifier gives us the hexadecimal representation of the memory address.\n\n#Why Know Memory Addresses?\nUnderstanding memory addresses and pointers is crucial in C programming. Pointers allow us to directly manipulate the data stored in memory, which can lead to more efficient and optimized code.\n\nPointers are a fundamental concept in C and are used extensively for dynamic memory allocation, data structures, and low-level manipulation.\n\n#Cheat sheet:\n1) Memory address is the location in the computer's memory where a variable's value is stored.\n2) Access memory addresses using the reference operator (&).\n3) Pointers allow manipulation of data stored in memory and are essential in C programming.",
          "quiz": [
            {
              "question": "How do you access the memory address of a variable in C?",
              "options": [
                "Using the dereference operator (*)",
                "Using the reference operator (&)",
                "Using the arrow operator (->)",
                "Using the dot operator (.)"
              ],
              "correctAnswer": 1
            },
            {
              "question": "What does the reference operator (&) return in C?",
              "options": [
                "Value of the variable",
                "Size of the variable",
                "Type of the variable",
                "Address of the variable"
              ],
              "correctAnswer": 3
            },
            {
              "question": "Why is understanding memory addresses important in C programming?",
              "options": [
                "It allows for direct manipulation of data in memory",
                " It makes code more readable",
                "It increases the speed of program execution",
                "It allows for automatic memory management"
              ],
              "correctAnswer": 0
            }
          ]
        },
        {
          "title": "Understanding Pointers in C Programming",
          "content": "-> What pointers are and how to create them in C.\n-> How to access memory addresses and values using pointers.\n-> The importance of pointers in C programming and their practical applications.",
          "lesson": "#Introduction to Pointers\nIn C programming, a pointer is a variable that stores the memory address of another variable as its value. This allows us to indirectly access and manipulate data stored in memory.\n\n#Creating Pointers\nTo create a pointer variable, use the * operator followed by the data type it points to.\n##Example\n`int myAge = 43;     // Declare an int variable\nint* ptr = &myAge;  // Declare a pointer variable pointing to myAge's address`\nHere, ptr is a pointer variable that stores the memory address of myAge. The & operator is used to get the memory address of myAge and assign it to ptr.\n\n#Dereferencing Pointers\nYou can access the value of the variable a pointer points to using the * operator.\n##Example\n`printf(\"%d\\n\", *ptr); // Outputs the value of myAge using the pointer`\nThe * operator in this context is called the dereference operator. It retrieves the value stored at the memory address pointed to by the pointer.\n\n#Purpose and Importance of Pointers\nPointers are essential in C programming as they enable efficient memory management and manipulation. They are widely used in data structures, dynamic memory allocation, and low-level system programming.\n\n##Notes on Pointers:\nPointers must be handled with care to avoid unintended memory access and corruption.\nThere are two common ways to declare pointer variables in C: int* ptr; and int *ptr;.\n\n\n#Cheat sheet:\n1) Pointers store memory addresses of other variables.\n2) Create pointers using the * operator followed by the data type.\n3) Dereference pointers using the * operator to access the value stored at the pointed memory address.\n4) Pointers are crucial for efficient memory management and data manipulation in C programming.",
          "quiz": [
            {
              "question": "How do you declare a pointer variable in C?",
              "options": [
                "Using the & operator",
                "Using the -> operator",
                "Using the . operator",
                "Using the * operator"
              ],
              "correctAnswer": 3
            },
            {
              "question": "What does the * operator do when used with a pointer variable?",
              "options": [
                "Returns the memory address of the variable",
                "Returns the value stored at the memory address pointed to by the pointer",
                "Assigns a value to the pointer variable",
                "Deletes the pointer variable"
              ],
              "correctAnswer": 1
            },
            {
              "question": "Why are pointers important in C programming?",
              "options": [
                "They make code more readable",
                "They improve program execution speed",
                "They enable efficient memory management and manipulation",
                "They allow for automatic memory allocation"
              ],
              "correctAnswer": 2
            }
          ]
        }
      ],
      "cpp": []
    }
  },
  "ru": {
    "elements": {
      "langRegisterForm": "Форма регистрации",
      "langUsername": "Имя пользователя",
      "langMandatory": "(обязательное)",
      "langPassword": "Пароль",
      "langMandatory2": "(обязательное)",
      "langRegister": "Зарегистрироваться",
      "buttonStart": "Старт",
      "langSFX": "Звуковые эффекты",
      "titleSettings": "Языки",
      "langLogOut": "Выйти",
      "langHome": "Главная",
      "swipe": "Провести",
      "langStats": "Статистика",
      "langAchievements": "Достижения",
      "langGiga": "Гига Чад",
      "langTask1": "Вам нужно получить 100 опыта",
      "langCrazy": "Ты сумасшедший",
      "langTask2": "Вам нужно потратить 100 бриллиантов",
      "langDesigner": "Г-н/Г-жа дизайнер",
      "langTask3": "Вам нужно закончить 5 уроков CSS",
      "langDoom": "Рок...",
      "langTaxt4": "Вам нужно закончить все курсы",
      "langHomeProfile": "Главная",
      "title": "Что вы обнаружите",
      "langLessons": "Уроки",
      "langStartLesson": "Начать урок >",
      "langIntro": "< Введение",
      "langQuizBtn": "Викторина >",
      "title2": "Хотите начать викторину?",
      "langBackBtn2": "< Назад",
      "langStartIdk": "Начать >",
      "langAnswers": "Ответы:",
      "langConnection": "Проверьте ваше интернет-соединение..."
    },
    "categories": {
      "html": [],
      "css": [],
      "js": [],
      "python": [],
      "c": [],
      "cpp": []
    }
  },
  "ro": {
    "elements": {
      "langRegisterForm": "Formular de Înregistrare",
      "langUsername": "Nume de Utilizator",
      "langMandatory": "(obligatoriu)",
      "langPassword": "Parolă",
      "langMandatory2": "(obligatoriu)",
      "langRegister": "Înregistrare",
      "buttonStart": "start",
      "langSFX": "Efecte Sonore",
      "titleSettings": "Limbi",
      "langLogOut": "Deconectare",
      "langHome": "Acasă",
      "swipe": "Glisează",
      "langStats": "Statistici",
      "langAchievements": "Realizări",
      "langGiga": "GigaChad",
      "langTask1": "Trebuie să obții 100 de puncte de experiență",
      "langCrazy": "Ești nebun",
      "langTask2": "Trebuie să cheltuiești 100 de diamante",
      "langDesigner": "Dl./Dna. Designer",
      "langTask3": "Trebuie să termini 5 lecții de CSS",
      "langDoom": "Doom...",
      "langTaxt4": "Trebuie să termini toate cursurile",
      "langHomeProfile": "Acasă",
      "title": "Ce vei descoperi",
      "langLessons": "Lecții",
      "langStartLesson": "Începe lecția >",
      "langIntro": "< Introducere",
      "langQuizBtn": "Quiz >",
      "title2": "Vrei să începi quiz-ul?",
      "langBackBtn2": "< Înapoi",
      "langStartIdk": "Start >",
      "langAnswers": "Răspunsuri:",
      "langConnection": "Verificați conexiunea dvs. la internet..."
    },
    "categories": {
      "html": [],
      "css":  [],
      "js": [],
      "python": [],
      "c": [],
      "cpp": []
    }
  }
}